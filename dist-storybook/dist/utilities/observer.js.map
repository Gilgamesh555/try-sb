{
  "version": 3,
  "sources": ["../../src/utilities/observer.ts"],
  "sourcesContent": ["type MediaQueryCallback = (breakpoint: string) => void;\ntype OrientationCallback = (orientation: string) => void;\n\ninterface Query {\n  name: string;\n  query: string;\n}\n\nexport class MediaObserver {\n  private currentBreakpoint = '';\n  private subscriptions: { callback: MediaQueryCallback }[] = [];\n\n  constructor() {\n    this.init();\n  }\n\n  private init(): void {\n    SCREEN_SIZES.forEach(({ name, query }) => {\n      const mediaQuery = window.matchMedia(query);\n\n      const handleMediaQueryChange = () => {\n        if (mediaQuery.matches && this.currentBreakpoint !== name) {\n          this.currentBreakpoint = name;\n          this.subscriptions.forEach(({ callback }) => callback(name));\n        }\n      };\n\n      mediaQuery.addEventListener('change', handleMediaQueryChange);\n      handleMediaQueryChange(); // Initial callback with the current state\n    });\n  }\n\n  subscribe(callback: MediaQueryCallback): void {\n    this.subscriptions.push({ callback });\n\n    if (this.currentBreakpoint) {\n      callback(this.currentBreakpoint); // Notify about the current breakpoint\n    }\n  }\n\n  unsubscribeAll(): void {\n    SCREEN_SIZES.forEach(({ query }) => {\n      const mediaQuery = window.matchMedia(query);\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      mediaQuery.removeEventListener('change', () => {});\n    });\n\n    this.subscriptions = [];\n  }\n}\n\nexport class MediaOrientationObserver {\n  private currentOrientation = '';\n  private subscriptions: { callback: OrientationCallback }[] = [];\n\n  constructor() {\n    this.init();\n  }\n\n  private handleOrientationChange(mediaQuery: MediaQueryList): void {\n    if (mediaQuery.matches && this.currentOrientation !== mediaQuery.media) {\n      this.currentOrientation = mediaQuery.media;\n      this.subscriptions.forEach(({ callback }) => callback(mediaQuery.media));\n    }\n  }\n\n  private init(): void {\n    ORIENTATION_QUERIES.forEach(query => {\n      const mediaQuery = window.matchMedia(query.query);\n\n      if (mediaQuery.addEventListener) {\n        mediaQuery.addEventListener('change', () => this.handleOrientationChange(mediaQuery));\n        this.handleOrientationChange(mediaQuery); // Initial callback with the current state\n      }\n    });\n  }\n\n  subscribe(callback: OrientationCallback): void {\n    this.subscriptions.push({ callback });\n    if (this.currentOrientation) {\n      callback(this.currentOrientation); // Notify about the current orientation\n    }\n  }\n\n  unsubscribeAll(): void {\n    ORIENTATION_QUERIES.forEach(query => {\n      const mediaQuery = window.matchMedia(query.query);\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      mediaQuery.removeEventListener('change', () => {}); // Dummy handler for removing listeners\n    });\n\n    this.subscriptions = [];\n  }\n}\n\nconst getMediaBreakpoints = (leftName: string, rightName = '') => {\n  const root = document.documentElement;\n  const leftBreakpoint = getComputedStyle(root).getPropertyValue(`--koerber-breakpoints-${leftName}`);\n  const rightBreakpoint = getComputedStyle(root).getPropertyValue(`--koerber-breakpoints-${rightName}`);\n\n  let leftMediaWidth = '';\n\n  if (leftBreakpoint !== '') {\n    leftMediaWidth = `(min-width: ${leftBreakpoint})`;\n  }\n\n  let rightMediaWidth = '';\n  if (rightBreakpoint !== '') {\n    rightMediaWidth = `(max-width: ${rightBreakpoint})`;\n  }\n\n  if (rightBreakpoint === '') {\n    return `${leftMediaWidth}`;\n  }\n\n  return `${leftMediaWidth} and ${rightMediaWidth}`;\n};\n\nexport const ORIENTATION_QUERIES: Query[] = [\n  { name: 'landscape', query: '(orientation: landscape)' },\n  { name: 'portrait', query: '(orientation: portrait)' }\n];\n\nexport const SCREEN_SIZES: Query[] = [\n  { name: 'xsm', query: getMediaBreakpoints('xsm', 'sm') },\n  { name: 'sm', query: getMediaBreakpoints('sm', 'md') },\n  { name: 'md', query: getMediaBreakpoints('md', 'lg') },\n  { name: 'lg', query: getMediaBreakpoints('lg', 'xl') },\n  { name: 'xl', query: getMediaBreakpoints('xl', '2xl') },\n  { name: '2xl', query: getMediaBreakpoints('2xl') }\n];\n"],
  "mappings": "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",
  "names": []
}
