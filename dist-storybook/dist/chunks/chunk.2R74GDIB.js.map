{
  "version": 3,
  "sources": ["../../src/components/include/include.component.ts"],
  "sourcesContent": ["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { requestInclude } from './request';\nimport { watch } from '../../internal/watch';\nimport componentStyles from '../../styles/component.styles';\nimport styles from './include.styles';\nimport UIKitElement from '../../internal/uikit-element';\nimport type { CSSResultGroup } from 'lit';\n\n/**\n * @summary Includes give you the power to embed external HTML files into the page.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n * @status stable\n * @since 2.0\n *\n * @event koerber-load - Emitted when the included file is loaded.\n * @event {{ status: number }} koerber-error - Emitted when the included file fails to load due to an error.\n */\nexport default class Include extends UIKitElement {\n  static styles: CSSResultGroup = [componentStyles, styles];\n\n  /**\n   * The location of the HTML file to include. Be sure you trust the content you are including as it will be executed as\n   * code and can result in XSS attacks.\n   */\n  @property() src: string;\n\n  /** The fetch mode to use. */\n  @property() mode: 'cors' | 'no-cors' | 'same-origin' = 'cors';\n\n  /**\n   * Allows included scripts to be executed. Be sure you trust the content you are including as it will be executed as\n   * code and can result in XSS attacks.\n   */\n  @property({ attribute: 'allow-scripts', type: Boolean }) allowScripts = false;\n\n  private executeScript(script: HTMLScriptElement) {\n    // Create a copy of the script and swap it out so the browser executes it\n    const newScript = document.createElement('script');\n    [...script.attributes].forEach(attr => newScript.setAttribute(attr.name, attr.value));\n    newScript.textContent = script.textContent;\n    script.parentNode!.replaceChild(newScript, script);\n  }\n\n  @watch('src')\n  async handleSrcChange() {\n    try {\n      const src = this.src;\n      const file = await requestInclude(src, this.mode);\n\n      // If the src changed since the request started do nothing, otherwise we risk overwriting a subsequent response\n      if (src !== this.src) {\n        return;\n      }\n\n      if (!file.ok) {\n        this.emit('koerber-error', { detail: { status: file.status } });\n        return;\n      }\n\n      this.innerHTML = file.html;\n\n      if (this.allowScripts) {\n        [...this.querySelectorAll('script')].forEach(script => this.executeScript(script));\n      }\n\n      this.emit('koerber-load');\n    } catch {\n      this.emit('koerber-error', { detail: { status: -1 } });\n    }\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,SAAS,YAAY;AACrB,SAAS,gBAAgB;AAiBzB,IAAqB,UAArB,cAAqC,aAAa;AAAA,EAAlD;AAAA;AAUc,gBAA2C;AAME,wBAAe;AAAA;AAAA,EAEhE,cAAc,QAA2B;AAE/C,UAAM,YAAY,SAAS,cAAc,QAAQ;AACjD,KAAC,GAAG,OAAO,UAAU,EAAE,QAAQ,UAAQ,UAAU,aAAa,KAAK,MAAM,KAAK,KAAK,CAAC;AACpF,cAAU,cAAc,OAAO;AAC/B,WAAO,WAAY,aAAa,WAAW,MAAM;AAAA,EACnD;AAAA,EAGA,MAAM,kBAAkB;AACtB,QAAI;AACF,YAAM,MAAM,KAAK;AACjB,YAAM,OAAO,MAAM,eAAe,KAAK,KAAK,IAAI;AAGhD,UAAI,QAAQ,KAAK,KAAK;AACpB;AAAA,MACF;AAEA,UAAI,CAAC,KAAK,IAAI;AACZ,aAAK,KAAK,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,KAAK,OAAO,EAAE,CAAC;AAC9D;AAAA,MACF;AAEA,WAAK,YAAY,KAAK;AAEtB,UAAI,KAAK,cAAc;AACrB,SAAC,GAAG,KAAK,iBAAiB,QAAQ,CAAC,EAAE,QAAQ,YAAU,KAAK,cAAc,MAAM,CAAC;AAAA,MACnF;AAEA,WAAK,KAAK,cAAc;AAAA,IAC1B,SAAQ;AACN,WAAK,KAAK,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,GAAG,EAAE,CAAC;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,SAAS;AACP,WAAO;AAAA,EACT;AACF;AAzDqB,QACZ,SAAyB,CAAC,0BAAiB,sBAAM;AAM5C;AAAA,EAAX,SAAS;AAAA,GAPS,QAOP;AAGA;AAAA,EAAX,SAAS;AAAA,GAVS,QAUP;AAM6C;AAAA,EAAxD,SAAS,EAAE,WAAW,iBAAiB,MAAM,QAAQ,CAAC;AAAA,GAhBpC,QAgBsC;AAWnD;AAAA,EADL,MAAM,KAAK;AAAA,GA1BO,QA2Bb;",
  "names": []
}
