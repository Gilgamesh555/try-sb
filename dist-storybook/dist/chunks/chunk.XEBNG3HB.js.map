{
  "version": 3,
  "sources": ["../../src/internal/math.ts", "../../src/components/tree/tree.component.ts"],
  "sourcesContent": ["/** Ensures a number stays within a minimum and maximum value */\nexport function clamp(value: number, min: number, max: number) {\n  const noNegativeZero = (n: number) => (Object.is(n, -0) ? 0 : n);\n\n  if (value < min) {\n    return noNegativeZero(min);\n  }\n\n  if (value > max) {\n    return noNegativeZero(max);\n  }\n\n  return noNegativeZero(value);\n}\n", "import { clamp } from '../../internal/math';\nimport { html } from 'lit';\nimport { LocalizeController } from '../../utilities/localize';\nimport { query, state } from 'lit/decorators.js';\nimport { watch } from '../../internal/watch';\nimport componentStyles from '../../styles/component.styles';\nimport styles from './tree.styles';\nimport TreeItem from '../tree-item/tree-item.component';\nimport UIKitElement from '../../internal/uikit-element';\nimport type { CSSResultGroup } from 'lit';\n\nfunction syncCheckboxes(changedTreeItem: TreeItem, initialSync = false) {\n  function syncParentItem(treeItem: TreeItem) {\n    const children = treeItem.getChildrenItems({ includeDisabled: false });\n\n    if (children.length) {\n      const allChecked = children.every(item => item.selected);\n      const allUnchecked = children.every(item => !item.selected && !item.indeterminate);\n\n      treeItem.selected = allChecked;\n      treeItem.indeterminate = !allChecked && !allUnchecked;\n    }\n  }\n\n  function syncAncestors(treeItem: TreeItem) {\n    const parentItem: TreeItem | null = treeItem.parentElement as TreeItem;\n\n    if (TreeItem.isTreeItem(parentItem)) {\n      syncParentItem(parentItem);\n      syncAncestors(parentItem);\n    }\n  }\n\n  function syncDescendants(treeItem: TreeItem) {\n    for (const childItem of treeItem.getChildrenItems()) {\n      childItem.selected = initialSync\n        ? treeItem.selected || childItem.selected\n        : !childItem.disabled && treeItem.selected;\n\n      syncDescendants(childItem);\n    }\n\n    if (initialSync) {\n      syncParentItem(treeItem);\n    }\n  }\n\n  syncDescendants(changedTreeItem);\n  syncAncestors(changedTreeItem);\n}\n\n/**\n * @summary Trees allow you to display a hierarchical list of selectable [tree items](/components/tree-item). Items with children can be expanded and collapsed as desired by the user.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-tree--docs\n * @status stable\n * @since 2.0\n *\n * @event {{ selection: TreeItem[] }} koerber-selection-change - Emitted when a tree item is selected or deselected.\n *\n * @slot - The default slot.\n * @slot expand-icon - The icon to show when the tree item is expanded. Works best with `<koerber-icon>`.\n * @slot collapse-icon - The icon to show when the tree item is collapsed. Works best with `<koerber-icon>`.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty [--indent-size=var(--koerber-spacing-s)] - The size of the indentation for nested items.\n * @cssproperty [--indent-guide-color=var(--koerber-color-neutral-200)] - The color of the indentation line.\n * @cssproperty [--indent-guide-offset=0] - The amount of vertical spacing to leave between the top and bottom of the\n *  indentation line's starting position.\n * @cssproperty [--indent-guide-style=solid] - The style of the indentation line, e.g. solid, dotted, dashed.\n * @cssproperty [--indent-guide-width=0] - The width of the indentation line.\n */\nexport default class Tree extends UIKitElement {\n  static styles: CSSResultGroup = [componentStyles, styles];\n\n  @query('slot:not([name])') defaultSlot: HTMLSlotElement;\n  @query('slot[name=expand-icon]') expandedIconSlot: HTMLSlotElement;\n  @query('slot[name=collapse-icon]') collapsedIconSlot: HTMLSlotElement;\n\n  /**\n   * The selection behavior of the tree. Single selection allows only one node to be selected at a time. Multiple\n   * displays checkboxes and allows more than one node to be selected. Leaf allows only leaf nodes to be selected.\n   */\n  @state() selection: 'single' | 'multiple' | 'leaf' = 'multiple';\n\n  //\n  // A collection of all the items in the tree, in the order they appear. The collection is live, meaning it is\n  // automatically updated when the underlying document is changed.\n  //\n  private lastFocusedItem: TreeItem;\n  private readonly localize = new LocalizeController(this);\n  private mutationObserver: MutationObserver;\n  private clickTarget: TreeItem | null = null;\n\n  constructor() {\n    super();\n    this.addEventListener('focusin', this.handleFocusIn);\n    this.addEventListener('focusout', this.handleFocusOut);\n    this.addEventListener('koerber-lazy-change', this.handleSlotChange);\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n    this.setAttribute('role', 'tree');\n    this.setAttribute('tabindex', '0');\n\n    await this.updateComplete;\n\n    this.mutationObserver = new MutationObserver(this.handleTreeChanged);\n    this.mutationObserver.observe(this, { childList: true, subtree: true });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.mutationObserver.disconnect();\n  }\n\n  // Generates a clone of the expand icon element to use for each tree item\n  private getExpandButtonIcon(status: 'expand' | 'collapse') {\n    const slot = status === 'expand' ? this.expandedIconSlot : this.collapsedIconSlot;\n    const icon = slot.assignedElements({ flatten: true })[0] as HTMLElement;\n\n    // Clone it, remove ids, and slot it\n    if (icon) {\n      const clone = icon.cloneNode(true) as HTMLElement;\n      [clone, ...clone.querySelectorAll('[id]')].forEach(el => el.removeAttribute('id'));\n      clone.setAttribute('data-default', '');\n      clone.slot = `${status}-icon`;\n\n      return clone;\n    }\n\n    return null;\n  }\n\n  // Initializes new items by setting the `selectable` property and the expanded/collapsed icons if any\n  private initTreeItem = (item: TreeItem) => {\n    item.selectable = this.selection === 'multiple';\n\n    ['expand', 'collapse']\n      .filter(status => !!this.querySelector(`[slot=\"${status}-icon\"]`))\n      .forEach((status: 'expand' | 'collapse') => {\n        const existingIcon = item.querySelector(`[slot=\"${status}-icon\"]`);\n\n        if (existingIcon === null) {\n          // No separator exists, add one\n          item.append(this.getExpandButtonIcon(status)!);\n        } else if (existingIcon.hasAttribute('data-default')) {\n          // A default separator exists, replace it\n          existingIcon.replaceWith(this.getExpandButtonIcon(status)!);\n        } else {\n          // The user provided a custom icon, leave it alone\n        }\n      });\n  };\n\n  private handleTreeChanged = (mutations: MutationRecord[]) => {\n    for (const mutation of mutations) {\n      const addedNodes: TreeItem[] = [...mutation.addedNodes].filter(TreeItem.isTreeItem) as TreeItem[];\n      const removedNodes = [...mutation.removedNodes].filter(TreeItem.isTreeItem) as TreeItem[];\n\n      addedNodes.forEach(this.initTreeItem);\n\n      // If the focused item has been removed form the DOM, move the focus to the first focusable item\n      if (removedNodes.includes(this.lastFocusedItem)) {\n        this.focusItem(this.getFocusableItems()[0]);\n      }\n    }\n  };\n\n  private syncTreeItems(selectedItem: TreeItem) {\n    const items = this.getAllTreeItems();\n\n    if (this.selection === 'multiple') {\n      syncCheckboxes(selectedItem);\n    } else {\n      for (const item of items) {\n        if (item !== selectedItem) {\n          item.selected = false;\n        }\n      }\n    }\n  }\n\n  private selectItem(selectedItem: TreeItem) {\n    const previousSelection = [...this.selectedItems];\n\n    if (this.selection === 'multiple') {\n      selectedItem.selected = !selectedItem.selected;\n      if (selectedItem.lazy) {\n        selectedItem.open = true;\n      }\n      this.syncTreeItems(selectedItem);\n    } else if (this.selection === 'single' || selectedItem.isLeaf) {\n      selectedItem.selected = true;\n\n      this.syncTreeItems(selectedItem);\n    } else if (this.selection === 'leaf') {\n      selectedItem.open = !selectedItem.open;\n    }\n\n    const nextSelection = this.selectedItems;\n\n    if (\n      previousSelection.length !== nextSelection.length ||\n      nextSelection.some(item => !previousSelection.includes(item))\n    ) {\n      // Wait for the tree items' DOM to update before emitting\n      Promise.all(nextSelection.map(el => el.updateComplete)).then(() => {\n        this.emit('koerber-selection-change', { detail: { selection: nextSelection } });\n      });\n    }\n  }\n\n  private getAllTreeItems() {\n    return [...this.querySelectorAll<TreeItem>('koerber-tree-item')];\n  }\n\n  private focusItem(item?: TreeItem | null) {\n    item?.focus();\n  }\n\n  private handleKeyDown(event: KeyboardEvent) {\n    if (!['ArrowDown', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'Home', 'End', 'Enter', ' '].includes(event.key)) {\n      return;\n    }\n\n    const items = this.getFocusableItems();\n    const isLtr = this.localize.dir() === 'ltr';\n    const isRtl = this.localize.dir() === 'rtl';\n\n    if (items.length > 0) {\n      event.preventDefault();\n      const activeItemIndex = items.findIndex(item => item.matches(':focus'));\n      const activeItem: TreeItem | undefined = items[activeItemIndex];\n\n      const focusItemAt = (index: number) => {\n        const item = items[clamp(index, 0, items.length - 1)];\n        this.focusItem(item);\n      };\n      const toggleExpand = (open: boolean) => {\n        activeItem.open = open;\n      };\n\n      if (event.key === 'ArrowDown') {\n        // Moves focus to the next node that is focusable without opening or closing a node.\n        focusItemAt(activeItemIndex + 1);\n      } else if (event.key === 'ArrowUp') {\n        // Moves focus to the next node that is focusable without opening or closing a node.\n        focusItemAt(activeItemIndex - 1);\n      } else if ((isLtr && event.key === 'ArrowRight') || (isRtl && event.key === 'ArrowLeft')) {\n        //\n        // When focus is on a closed node, opens the node; focus does not move.\n        // When focus is on a open node, moves focus to the first child node.\n        // When focus is on an end node (a tree item with no children), does nothing.\n        //\n        if (!activeItem || activeItem.disabled || activeItem.open || (activeItem.isLeaf && !activeItem.lazy)) {\n          focusItemAt(activeItemIndex + 1);\n        } else {\n          toggleExpand(true);\n        }\n      } else if ((isLtr && event.key === 'ArrowLeft') || (isRtl && event.key === 'ArrowRight')) {\n        //\n        // When focus is on an open node, closes the node.\n        // When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n        // When focus is on a closed `tree`, does nothing.\n        //\n        if (!activeItem || activeItem.disabled || activeItem.isLeaf || !activeItem.open) {\n          focusItemAt(activeItemIndex - 1);\n        } else {\n          toggleExpand(false);\n        }\n      } else if (event.key === 'Home') {\n        // Moves focus to the first node in the tree without opening or closing a node.\n        focusItemAt(0);\n      } else if (event.key === 'End') {\n        // Moves focus to the last node in the tree that is focusable without opening the node.\n        focusItemAt(items.length - 1);\n      } else if (event.key === 'Enter' || event.key === ' ') {\n        // Selects the focused node.\n        if (!activeItem.disabled) {\n          this.selectItem(activeItem);\n        }\n      }\n    }\n  }\n\n  private handleClick(event: Event) {\n    const target = event.target as TreeItem;\n    const treeItem = target.closest('koerber-tree-item')!;\n    const isExpandButton = event\n      .composedPath()\n      .some((el: HTMLElement) => el?.classList?.contains('tree-item__expand-button'));\n\n    const isAction = event.composedPath().some((el: HTMLElement) => el?.classList?.contains('tree-item__actions'));\n\n    const isCheckbox = event.composedPath().some((el: HTMLElement) => el?.classList?.contains('tree-item__checkbox'));\n\n    //\n    // Don't Do anything if there's no tree item, if it's disabled, or if the click doesn't match the initial target\n    // from mousedown. The latter case prevents the user from starting a click on one item and ending it on another,\n    // causing the parent node to collapse.\n    //\n    // See https://github.com/shoelace-style/shoelace/issues/1082\n    //\n    if (!treeItem || treeItem.disabled || target !== this.clickTarget) {\n      return;\n    }\n\n    if (isExpandButton) {\n      treeItem.open = !treeItem.open;\n    } else if (this.selection === 'multiple' && !isAction) {\n      this.selectItem(treeItem);\n    } else if (this.selection === 'single' || this.selection === 'leaf') {\n      this.selectItem(treeItem);\n    }\n\n    /* prevent default click twice on checkbox */\n    if (isCheckbox) {\n      event.preventDefault();\n    }\n  }\n\n  handleMouseDown(event: MouseEvent) {\n    // Record the click target so we know which item the click initially targeted\n    this.clickTarget = event.target as TreeItem;\n  }\n\n  private handleFocusOut = (event: FocusEvent) => {\n    const relatedTarget = event.relatedTarget as HTMLElement;\n\n    // If the element that got the focus is not in the tree\n    if (!relatedTarget || !this.contains(relatedTarget)) {\n      this.tabIndex = 0;\n    }\n  };\n\n  private handleFocusIn = (event: FocusEvent) => {\n    const target = event.target as TreeItem;\n\n    // If the tree has been focused, move the focus to the last focused item\n    if (event.target === this) {\n      this.focusItem(this.lastFocusedItem || this.getAllTreeItems()[0]);\n    }\n\n    // If the target is a tree item, update the tabindex\n    if (TreeItem.isTreeItem(target) && !target.disabled) {\n      if (this.lastFocusedItem) {\n        this.lastFocusedItem.tabIndex = -1;\n      }\n      this.lastFocusedItem = target;\n      this.tabIndex = -1;\n\n      target.tabIndex = 0;\n    }\n  };\n\n  private handleSlotChange() {\n    const items = this.getAllTreeItems();\n    items.forEach(this.initTreeItem);\n  }\n\n  @watch('selection')\n  async handleSelectionChange() {\n    const isSelectionMultiple = this.selection === 'multiple';\n    const items = this.getAllTreeItems();\n\n    this.setAttribute('aria-multiselectable', isSelectionMultiple ? 'true' : 'false');\n\n    for (const item of items) {\n      item.selectable = isSelectionMultiple;\n    }\n\n    if (isSelectionMultiple) {\n      await this.updateComplete;\n\n      [...this.querySelectorAll(':scope > koerber-tree-item')].forEach((treeItem: TreeItem) =>\n        syncCheckboxes(treeItem, true)\n      );\n    }\n  }\n\n  /** @internal Returns the list of tree items that are selected in the tree. */\n  get selectedItems(): TreeItem[] {\n    const items = this.getAllTreeItems();\n    const isSelected = (item: TreeItem) => item.selected;\n\n    return items.filter(isSelected);\n  }\n\n  /** @internal Gets focusable tree items in the tree. */\n  getFocusableItems() {\n    const items = this.getAllTreeItems();\n    const collapsedItems = new Set();\n\n    return items.filter(item => {\n      // Exclude disabled elements\n      if (item.disabled) return false;\n\n      // Exclude those whose parent is collapsed or loading\n      const parent: TreeItem | null | undefined = item.parentElement?.closest('[role=treeitem]');\n      if (parent && (!parent.open || parent.loading || collapsedItems.has(parent))) {\n        collapsedItems.add(item);\n      }\n\n      return !collapsedItems.has(item);\n    });\n  }\n\n  render() {\n    return html`\n      <div\n        part=\"base\"\n        class=\"tree\"\n        @click=${this.handleClick}\n        @keydown=${this.handleKeyDown}\n        @mousedown=${this.handleMouseDown}\n      >\n        <slot @slotchange=${this.handleSlotChange}></slot>\n        <slot name=\"expand-icon\" hidden aria-hidden=\"true\"> </slot>\n        <slot name=\"collapse-icon\" hidden aria-hidden=\"true\"> </slot>\n      </div>\n    `;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
