{
  "version": 3,
  "sources": ["../../src/components/form-field/form-field.component.ts"],
  "sourcesContent": ["import { HasSlotController } from '../../internal/slot';\r\nimport { html } from 'lit';\r\nimport { property, query, queryAssignedElements } from 'lit/decorators.js';\r\nimport { watch } from '../../internal/watch';\r\nimport FormFieldError from '../form-field-error/form-field-error.component';\r\nimport FormFieldLabel from '../form-field-label/form-field-label.component';\r\nimport styles from './form-field.styles';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\nimport type { UIKitFormControl } from '../../internal/uikit-element';\r\n\r\n/**\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n *\r\n * @slot (default) - form field control or a suitable display value if in readonly mode.\r\n * @slot prefix - provides custom content for the form field before field control. It is used to provide context or enhance functionality.\r\n * @slot suffix - provides custom content for the form field before field control. It is used to provide context or enhance functionality.\r\n * @slot help-text - custom content for help text.\r\n * @slot error - custom content for error messages below the field control. can be used to provide form field related error messages\r\n * @slot footer - custom content for form field footer. can be used to provide additional content after form field control and help-text area.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart form-control - The component's form control.\r\n * @csspart error - The component's error wrapper.\r\n */\r\nexport default class FormField extends UIKitElement {\r\n  static styles: CSSResultGroup = styles;\r\n  static dependencies = { 'koerber-form-field-label': FormFieldLabel, 'koerber-form-field-error': FormFieldError };\r\n\r\n  @query('slot:not([name])') defaultSlot: HTMLSlotElement;\r\n  @query('slot[name=error]') errorSlot: HTMLSlotElement;\r\n  @query('slot[name=\"suffix\"]') suffixSlot: HTMLSlotElement;\r\n\r\n  @queryAssignedElements() _controlElements!: HTMLElement[];\r\n  @queryAssignedElements({ slot: 'label' }) _labelElements!: HTMLElement[];\r\n\r\n  private readonly hasSlotController = new HasSlotController(this, 'label', 'error', 'footer');\r\n\r\n  /** The form-field's help text. If you need to display HTML, use the `help-text` slot instead. */\r\n  @property({ attribute: 'help-text' }) helpText: string = '';\r\n\r\n  /** The form-field's set of errors */\r\n  @property({ type: Array, reflect: true }) errors: string[];\r\n\r\n  /** The label of the component */\r\n  @property({ reflect: true }) label: string;\r\n\r\n  /** The Value Hint of the component */\r\n  @property({ attribute: 'value-hint' }) valueHint: string = '';\r\n\r\n  /** Sets if the user input is strictly required */\r\n  @property({ type: Boolean, reflect: true }) required = false;\r\n\r\n  /** Handles if the form field will contain a tooltip in its label */\r\n  @property({ reflect: true }) tooltip: string;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.updateComplete.then(() => {\r\n      // if suffix is slotted, add margin to the value hint to align with form-control.\r\n      if (this.suffixSlot) {\r\n        const suffix = this.suffixSlot.assignedElements({ flatten: true })[0] as HTMLElement;\r\n        const getSuffixAttribute = (attribute: string): number =>\r\n          parseInt(getComputedStyle(suffix).getPropertyValue(attribute).replace('px', ''));\r\n        const valueHintElement = this.shadowRoot!.querySelector('.value-hint');\r\n\r\n        if (suffix) {\r\n          const suffixWidth =\r\n            getSuffixAttribute('width') + getSuffixAttribute('margin-left') + getSuffixAttribute('margin-right');\r\n\r\n          if (valueHintElement) {\r\n            (valueHintElement as HTMLElement).style.marginRight = `${suffixWidth}px`;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  protected updated() {\r\n    this.handleSlotChange();\r\n  }\r\n\r\n  private handleSlotChange() {\r\n    const [controlElement] = this._controlElements;\r\n\r\n    if (controlElement) {\r\n      this.setAccessibilityAttributes(controlElement);\r\n    }\r\n\r\n    this.setErrorOnControlElement(controlElement);\r\n  }\r\n\r\n  private setAccessibilityAttributes(item: HTMLElement) {\r\n    // Set the accessible name and description to the form control component if form control attributes are being set\r\n    const itemFormControl = item as UIKitFormControl;\r\n    if (!itemFormControl.accessibleName && this.label) {\r\n      itemFormControl.accessibleName = this.label;\r\n    }\r\n\r\n    if (!itemFormControl.accessibleDescription && this.helpText) {\r\n      itemFormControl.accessibleDescription = this.helpText;\r\n    }\r\n\r\n    // If the form control component has already an accessible name, we hide the label aria properties\r\n    if (itemFormControl.accessibleName) {\r\n      const [labelElement] = this._labelElements;\r\n      const labelItem = labelElement as FormFieldLabel;\r\n\r\n      if (labelItem) {\r\n        labelItem.accessibleHidden = true;\r\n      } else {\r\n        const defaultLabel = this.shadowRoot?.querySelector('koerber-form-field-label');\r\n\r\n        if (defaultLabel) {\r\n          defaultLabel.accessibleHidden = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private setErrorOnControlElement(controlElement: HTMLElement) {\r\n    if (controlElement && this.errors?.length > 0) {\r\n      controlElement.setAttribute('error', 'true');\r\n    } else {\r\n      controlElement?.removeAttribute('error');\r\n    }\r\n  }\r\n\r\n  private handleErrorSlotChanged() {\r\n    const items = this.errorSlot.assignedElements({ flatten: true });\r\n\r\n    this.errors = items.map(item => item.textContent || '');\r\n  }\r\n\r\n  @watch('errors')\r\n  handleErrorsChanged() {\r\n    const [controlElement] = this._controlElements;\r\n    this.setErrorOnControlElement(controlElement);\r\n  }\r\n\r\n  /** Sets the errors for the form-field. */\r\n  setErrors(errors: string[]) {\r\n    this.errors = errors;\r\n  }\r\n\r\n  /** Clears the errors for the form-field. */\r\n  clearErrors() {\r\n    this.errors = [];\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <div part=\"base\" class=\"form-field\">\r\n        <div class=\"heading-container\">\r\n          ${this.hasSlotController.test('label')\r\n            ? html`<div class=\"label\" part=\"label\">\r\n                <slot name=\"label\"></slot>\r\n              </div>`\r\n            : this.label\r\n              ? html`<koerber-form-field-label\r\n                  class=\"label\"\r\n                  label=${this.label}\r\n                  tooltip=${this.tooltip}\r\n                  ?required=${this.required}\r\n                ></koerber-form-field-label>`\r\n              : ''}\r\n          ${this.valueHint ? html`<div class=\"value-hint\">${this.valueHint}</div>` : ''}\r\n        </div>\r\n        <div part=\"form-control\" class=\"form-control\">\r\n          <slot name=\"prefix\"></slot>\r\n          <div class=\"control\">\r\n            <slot @slotchange=${this.handleSlotChange}></slot>\r\n          </div>\r\n          <slot name=\"suffix\"></slot>\r\n        </div>\r\n\r\n        <!-- DO NOT TOUCH ARIA-HIDDEN PROPERTY -->\r\n        <slot name=\"help-text\" class=\"help-text\" aria-hidden>${this.helpText}</slot>\r\n\r\n        ${this.hasSlotController.test('error')\r\n          ? html`<div class=\"error\" part=\"error\">\r\n              <slot name=\"error\" @slotchange=${this.handleErrorSlotChanged}></slot>\r\n            </div>`\r\n          : this.errors && this.errors.length !== 0\r\n            ? html`<div class=\"error\" part=\"error\">\r\n                ${this.errors?.map(\r\n                  error => html`<koerber-form-field-error class=\"error-message\">${error}</koerber-form-field-error>`\r\n                )}\r\n              </div>`\r\n            : ''}\r\n        ${this.hasSlotController.test('footer')\r\n          ? html`<div class=\"footer\">\r\n              <slot name=\"footer\" part=\"form-field-footer\"></slot>\r\n            </div>`\r\n          : ''}\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
