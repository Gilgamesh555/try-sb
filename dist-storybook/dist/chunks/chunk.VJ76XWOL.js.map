{
  "version": 3,
  "sources": ["../../src/components/menu/menu.component.ts"],
  "sourcesContent": ["import { html } from 'lit';\r\nimport { query } from 'lit/decorators.js';\r\nimport componentStyles from '../../styles/component.styles';\r\nimport styles from './menu.styles';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\nimport type MenuItem from '../menu-item/menu-item';\r\n\r\nexport interface MenuSelectEventDetail {\r\n  item: MenuItem;\r\n}\r\n\r\n/**\r\n * @summary Menus provide a list of options for the user to choose from.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The menu's content, including menu items, menu labels, and dividers.\r\n *\r\n * @event {{ item: MenuItem }} koerber-select - Emitted when a menu item is selected.\r\n */\r\nexport default class Menu extends UIKitElement {\r\n  static styles: CSSResultGroup = [componentStyles, styles];\r\n\r\n  @query('slot') defaultSlot: HTMLSlotElement;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.setAttribute('role', 'menu');\r\n  }\r\n\r\n  private handleClick(event: MouseEvent) {\r\n    const target = event.target as MenuItem;\r\n    const menuItem = target.closest('koerber-menu-item')!;\r\n\r\n    if (!target) return;\r\n\r\n    // This isn't true. But we use it for TypeScript checks below.\r\n    const item = menuItem;\r\n\r\n    this.emit('koerber-select', { detail: { item } });\r\n  }\r\n\r\n  private handleKeyDown(event: KeyboardEvent) {\r\n    // Make a selection when pressing enter or space\r\n    if (event.key === 'Enter' || event.key === ' ') {\r\n      const item = this.getCurrentItem();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      // Simulate a click to support @click handlers on menu items that also work with the keyboard\r\n      item?.click();\r\n    }\r\n\r\n    // Move the selection when pressing down or up\r\n    else if (['ArrowDown', 'ArrowUp', 'Home', 'End'].includes(event.key)) {\r\n      const items = this.getAllItems();\r\n      const activeItem = this.getCurrentItem();\r\n      let index = activeItem ? items.indexOf(activeItem) : 0;\r\n\r\n      if (items.length > 0) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (event.key === 'ArrowDown') {\r\n          index++;\r\n        } else if (event.key === 'ArrowUp') {\r\n          index--;\r\n        } else if (event.key === 'Home') {\r\n          index = 0;\r\n        } else if (event.key === 'End') {\r\n          index = items.length - 1;\r\n        }\r\n\r\n        if (index < 0) {\r\n          index = items.length - 1;\r\n        }\r\n        if (index > items.length - 1) {\r\n          index = 0;\r\n        }\r\n\r\n        this.setCurrentItem(items[index]);\r\n        items[index].focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleMouseDown(event: MouseEvent) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    if (this.isMenuItem(target)) {\r\n      this.setCurrentItem(target as MenuItem);\r\n    }\r\n  }\r\n\r\n  private handleSlotChange() {\r\n    const items = this.getAllItems();\r\n\r\n    // Reset the roving tab index when the slotted items change\r\n    if (items.length > 0) {\r\n      this.setCurrentItem(items[0]);\r\n    }\r\n  }\r\n\r\n  private isMenuItem(item: HTMLElement) {\r\n    return (\r\n      item.tagName.toLowerCase() === 'koerber-menu-item' ||\r\n      ['menuitem', 'menuitemradio'].includes(item.getAttribute('role') ?? '')\r\n    );\r\n  }\r\n\r\n  /** @internal Gets all slotted menu items, ignoring dividers, headers, and other elements. */\r\n  getAllItems() {\r\n    return [...this.defaultSlot.assignedElements({ flatten: true })].filter((el: HTMLElement) => {\r\n      if (el.inert || !this.isMenuItem(el)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }) as MenuItem[];\r\n  }\r\n\r\n  /**\r\n   * @internal Gets the current menu item, which is the menu item that has `tabindex=\"0\"` within the roving tab index.\r\n   * The menu item may or may not have focus, but for keyboard interaction purposes it's considered the \"active\" item.\r\n   */\r\n  getCurrentItem() {\r\n    return this.getAllItems().find(i => i.getAttribute('tabindex') === '0');\r\n  }\r\n\r\n  /**\r\n   * @internal Sets the current menu item to the specified element. This sets `tabindex=\"0\"` on the target element and\r\n   * `tabindex=\"-1\"` to all other items. This method must be called prior to setting focus on a menu item.\r\n   */\r\n  setCurrentItem(item: MenuItem) {\r\n    const items = this.getAllItems();\r\n\r\n    // Update tab indexes\r\n    items.forEach(i => {\r\n      i.setAttribute('tabindex', i === item ? '0' : '-1');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <slot\r\n        @slotchange=${this.handleSlotChange}\r\n        @click=${this.handleClick}\r\n        @keydown=${this.handleKeyDown}\r\n        @mousedown=${this.handleMouseDown}\r\n      ></slot>\r\n    `;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
