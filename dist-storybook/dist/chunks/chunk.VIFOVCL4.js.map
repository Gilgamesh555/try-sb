{
  "version": 3,
  "sources": ["../../src/components/textarea/textarea.component.ts"],
  "sourcesContent": ["/** Exception due eslint doesn't support WAI-ARIA 1.3 that supports aria-description attr */\r\n/* eslint-disable lit-a11y/aria-attrs */\r\nimport Icon from '../icon/icon.component';\r\n\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { defaultValue } from '../../internal/default-value';\r\nimport { html } from 'lit';\r\nimport { ifDefined } from 'lit/directives/if-defined.js';\r\nimport { live } from 'lit/directives/live.js';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { watch } from '../../internal/watch';\r\nimport componentStyles from '../../styles/component.styles';\r\nimport formControlStyles from '../../styles/form-control.styles';\r\nimport styles from './textarea.styles';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\nimport type { UIKitFormControl } from '../../internal/uikit-element';\r\n\r\n/**\r\n * @summary Textareas collect data from the user and allow multiple lines of text.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-textarea--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-change - Emitted when an alteration to the control's value is committed by the user.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-input - Emitted when the control receives input.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart textarea - The internal `<textarea>` control.\r\n */\r\nexport default class Textarea extends UIKitElement implements UIKitFormControl {\r\n  static styles: CSSResultGroup = [componentStyles, formControlStyles, styles];\r\n  static dependencies = { 'koerber-icon': Icon };\r\n\r\n  private resizeObserver: ResizeObserver;\r\n\r\n  @query('.textarea__control') input: HTMLTextAreaElement;\r\n\r\n  @state() private hasFocus = false;\r\n  @property() title = ''; // make reactive to pass through\r\n\r\n  /** The name of the textarea, submitted as a name/value pair with form data. */\r\n  @property() name = '';\r\n\r\n  /** The current value of the textarea, submitted as a name/value pair with form data. */\r\n  @property() value = '';\r\n\r\n  /** The textarea's size. */\r\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /** Placeholder text to show as a hint when the input is empty. */\r\n  @property() placeholder = '';\r\n\r\n  /** The number of rows to display by default. */\r\n  @property({ type: Number }) rows = 4;\r\n\r\n  /** Controls how the textarea can be resized. */\r\n  @property() resize: 'none' | 'vertical' | 'auto' = 'none';\r\n\r\n  /** Disables the textarea. */\r\n  @property({ type: Boolean, reflect: true }) disabled = false;\r\n\r\n  /** Makes the textarea readonly. */\r\n  @property({ type: Boolean, reflect: true }) readonly = false;\r\n\r\n  /** Makes the textarea a required field. */\r\n  @property({ type: Boolean, reflect: true }) required = false;\r\n\r\n  /** The current character count in the textarea. */\r\n  @state() characterCount = 0;\r\n\r\n  /** Controls whether and how text input is automatically capitalized as it is entered by the user. */\r\n  @property() autocapitalize: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';\r\n\r\n  /** Indicates whether the browser's autocorrect feature is on or off. */\r\n  @property() autocorrect: string;\r\n\r\n  /**\r\n   * Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n   * [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.\r\n   */\r\n  @property() autocomplete: string;\r\n\r\n  /** Indicates that the input should receive focus on page load. */\r\n  @property({ type: Boolean }) autofocus: boolean;\r\n\r\n  /** Used to customize the label or icon of the Enter key on virtual keyboards. */\r\n  @property() enterkeyhint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\r\n\r\n  /** Enables spell checking on the textarea. */\r\n  @property({\r\n    type: Boolean,\r\n    converter: {\r\n      // Allow \"true|false\" attribute values but keep the property boolean\r\n      fromAttribute: value => (!value || value === 'false' ? false : true),\r\n      toAttribute: value => (value ? 'true' : 'false')\r\n    }\r\n  })\r\n  spellcheck = true;\r\n\r\n  /**\r\n   * Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\n   * keyboard on supportive devices.\r\n   */\r\n  @property() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\r\n\r\n  /**\r\n   * to indicate that the text area is used for an error.\r\n   */\r\n  @property({ type: Boolean }) error: boolean;\r\n\r\n  /** The default value of the form control. Primarily used for resetting the form control. */\r\n  @defaultValue() defaultValue = '';\r\n\r\n  /** The component accessible label name */\r\n  @property({ attribute: 'accessible-name', reflect: true }) accessibleName: string;\r\n\r\n  /** The component accessible description */\r\n  @property({ attribute: 'accessible-description', reflect: true }) accessibleDescription: string;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.resizeObserver = new ResizeObserver(() => this.setTextareaHeight());\r\n\r\n    this.updateComplete.then(() => {\r\n      this.setTextareaHeight();\r\n      this.resizeObserver.observe(this.input);\r\n    });\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.resizeObserver.unobserve(this.input);\r\n  }\r\n\r\n  private handleBlur() {\r\n    this.hasFocus = false;\r\n    this.emit('koerber-blur');\r\n  }\r\n\r\n  private handleChange() {\r\n    this.value = this.input.value;\r\n    this.characterCount = this.value.length;\r\n    this.setTextareaHeight();\r\n    this.emit('koerber-change');\r\n  }\r\n\r\n  private handleFocus() {\r\n    this.hasFocus = true;\r\n    this.emit('koerber-focus');\r\n  }\r\n\r\n  private handleInput() {\r\n    this.value = this.input.value;\r\n    this.characterCount = this.value.length;\r\n    this.emit('koerber-input');\r\n  }\r\n\r\n  private setTextareaHeight() {\r\n    if (this.resize === 'auto') {\r\n      this.input.style.height = 'auto';\r\n      this.input.style.height = `${this.input.scrollHeight}px`;\r\n    } else {\r\n      (this.input.style.height as string | undefined) = undefined;\r\n    }\r\n  }\r\n\r\n  @watch('rows', { waitUntilFirstUpdate: true })\r\n  handleRowsChange() {\r\n    this.setTextareaHeight();\r\n  }\r\n\r\n  @watch('value', { waitUntilFirstUpdate: true })\r\n  async handleValueChange() {\r\n    await this.updateComplete;\r\n    this.setTextareaHeight();\r\n  }\r\n\r\n  /** Sets focus on the textarea. */\r\n  focus(options?: FocusOptions) {\r\n    this.input.focus(options);\r\n  }\r\n\r\n  /** Removes focus from the textarea. */\r\n  blur() {\r\n    this.input.blur();\r\n  }\r\n\r\n  /** Selects all the text in the textarea. */\r\n  select() {\r\n    this.input.select();\r\n  }\r\n\r\n  /** Gets or sets the textarea's scroll position. */\r\n  scrollPosition(position?: { top?: number; left?: number }): { top: number; left: number } | undefined {\r\n    if (position) {\r\n      if (typeof position.top === 'number') this.input.scrollTop = position.top;\r\n      if (typeof position.left === 'number') this.input.scrollLeft = position.left;\r\n      return undefined;\r\n    }\r\n\r\n    return {\r\n      top: this.input.scrollTop,\r\n      left: this.input.scrollTop\r\n    };\r\n  }\r\n\r\n  /** Sets the start and end positions of the text selection (0-based). */\r\n  setSelectionRange(\r\n    selectionStart: number,\r\n    selectionEnd: number,\r\n    selectionDirection: 'forward' | 'backward' | 'none' = 'none'\r\n  ) {\r\n    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\r\n  }\r\n\r\n  /** Replaces a range of text with a new string. */\r\n  setRangeText(\r\n    replacement: string,\r\n    start?: number,\r\n    end?: number,\r\n    selectMode?: 'select' | 'start' | 'end' | 'preserve'\r\n  ) {\r\n    // @ts-expect-error - start, end, and selectMode are optional\r\n    this.input.setRangeText(replacement, start, end, selectMode);\r\n\r\n    if (this.value !== this.input.value) {\r\n      this.value = this.input.value;\r\n    }\r\n\r\n    if (this.value !== this.input.value) {\r\n      this.value = this.input.value;\r\n      this.setTextareaHeight();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <div\r\n        part=\"form-control\"\r\n        class=${classMap({\r\n          'form-control': true,\r\n          'form-control--small': this.size === 'small',\r\n          'form-control--medium': this.size === 'medium',\r\n          'form-control--large': this.size === 'large'\r\n        })}\r\n      >\r\n        <div part=\"form-control-input\" class=\"form-control-input\">\r\n          <div\r\n            part=\"base\"\r\n            class=${classMap({\r\n              textarea: true,\r\n              'textarea--small': this.size === 'small',\r\n              'textarea--medium': this.size === 'medium',\r\n              'textarea--large': this.size === 'large',\r\n              'textarea--standard': true,\r\n              'textarea--disabled': this.disabled,\r\n              'textarea--focused': this.hasFocus,\r\n              'textarea--empty': !this.value,\r\n              'textarea--resize-none': this.resize === 'none',\r\n              'textarea--resize-vertical': this.resize === 'vertical',\r\n              'textarea--resize-auto': this.resize === 'auto',\r\n              'textarea--error': this.error\r\n            })}\r\n          >\r\n            <textarea\r\n              part=\"textarea\"\r\n              id=\"input\"\r\n              class=\"textarea__control\"\r\n              title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}\r\n              name=${ifDefined(this.name)}\r\n              aria-label=${ifDefined(this.accessibleName)}\r\n              aria-description=${ifDefined(this.accessibleDescription)}\r\n              .value=${live(this.value)}\r\n              ?disabled=${this.disabled}\r\n              ?readonly=${this.readonly}\r\n              ?required=${this.required}\r\n              placeholder=${ifDefined(this.placeholder)}\r\n              rows=${ifDefined(this.rows)}\r\n              autocapitalize=${ifDefined(this.autocapitalize)}\r\n              autocorrect=${ifDefined(this.autocorrect)}\r\n              ?autofocus=${this.autofocus}\r\n              spellcheck=${ifDefined(this.spellcheck)}\r\n              enterkeyhint=${ifDefined(this.enterkeyhint)}\r\n              inputmode=${ifDefined(this.inputmode)}\r\n              @change=${this.handleChange}\r\n              @input=${this.handleInput}\r\n              @focus=${this.handleFocus}\r\n              @blur=${this.handleBlur}\r\n            ></textarea>\r\n\r\n            ${this.error\r\n              ? html`\r\n                  <div class=\"textarea-error-icon-container\">\r\n                    <koerber-icon class=\"textarea-error-icon\" name=\"alert\"></koerber-icon>\r\n                  </div>\r\n                `\r\n              : ''}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
