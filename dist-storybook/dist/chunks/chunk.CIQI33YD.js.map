{
  "version": 3,
  "sources": ["../../src/utilities/animation-registry.ts"],
  "sourcesContent": ["export interface ElementAnimation {\n  keyframes: Keyframe[];\n  rtlKeyframes?: Keyframe[];\n  options?: KeyframeAnimationOptions;\n}\n\nexport interface ElementAnimationMap {\n  [animationName: string]: ElementAnimation;\n}\n\nexport interface GetAnimationOptions {\n  /**\n   * The component's directionality. When set to \"rtl\", `rtlKeyframes` will be preferred over `keyframes` where\n   * available using getAnimation().\n   */\n  dir: string;\n}\n\nconst defaultAnimationRegistry = new Map<string, ElementAnimation>();\nconst customAnimationRegistry = new WeakMap<Element, ElementAnimationMap>();\n\nfunction ensureAnimation(animation: ElementAnimation | null) {\n  return animation ?? { keyframes: [], options: { duration: 0 } };\n}\n\n//\n// Given an ElementAnimation, this function returns a new ElementAnimation where the keyframes property reflects either\n// keyframes or rtlKeyframes depending on the specified directionality.\n//\nfunction getLogicalAnimation(animation: ElementAnimation, dir: string) {\n  if (dir.toLowerCase() === 'rtl') {\n    return {\n      keyframes: animation.rtlKeyframes || animation.keyframes,\n      options: animation.options\n    };\n  }\n\n  return animation;\n}\n\n/**\n * Sets a default animation. Components should use the `name.animation` for primary animations and `name.part.animation`\n * for secondary animations, e.g. `dialog.show` and `dialog.overlay.show`. For modifiers, use `drawer.showTop`.\n */\nexport function setDefaultAnimation(animationName: string, animation: ElementAnimation | null) {\n  defaultAnimationRegistry.set(animationName, ensureAnimation(animation));\n}\n\n/** Sets a custom animation for the specified element. */\nexport function setAnimation(el: Element, animationName: string, animation: ElementAnimation | null) {\n  customAnimationRegistry.set(el, { ...customAnimationRegistry.get(el), [animationName]: ensureAnimation(animation) });\n}\n\n/** Gets an element's animation. Falls back to the default if no animation is found. */\nexport function getAnimation(el: Element, animationName: string, options: GetAnimationOptions) {\n  const customAnimation = customAnimationRegistry.get(el);\n\n  // Check for a custom animation\n  if (customAnimation?.[animationName]) {\n    return getLogicalAnimation(customAnimation[animationName], options.dir);\n  }\n\n  // Check for a default animation\n  const defaultAnimation = defaultAnimationRegistry.get(animationName);\n  if (defaultAnimation) {\n    return getLogicalAnimation(defaultAnimation, options.dir);\n  }\n\n  // Fall back to an empty animation\n  return {\n    keyframes: [],\n    options: { duration: 0 }\n  };\n}\n"],
  "mappings": ";;;;;;AAkBA,IAAM,2BAA2B,oBAAI,IAA8B;AACnE,IAAM,0BAA0B,oBAAI,QAAsC;AAE1E,SAAS,gBAAgB,WAAoC;AAC3D,SAAO,gCAAa,EAAE,WAAW,CAAC,GAAG,SAAS,EAAE,UAAU,EAAE,EAAE;AAChE;AAMA,SAAS,oBAAoB,WAA6B,KAAa;AACrE,MAAI,IAAI,YAAY,MAAM,OAAO;AAC/B,WAAO;AAAA,MACL,WAAW,UAAU,gBAAgB,UAAU;AAAA,MAC/C,SAAS,UAAU;AAAA,IACrB;AAAA,EACF;AAEA,SAAO;AACT;AAMO,SAAS,oBAAoB,eAAuB,WAAoC;AAC7F,2BAAyB,IAAI,eAAe,gBAAgB,SAAS,CAAC;AACxE;AAGO,SAAS,aAAa,IAAa,eAAuB,WAAoC;AACnG,0BAAwB,IAAI,IAAI,iCAAK,wBAAwB,IAAI,EAAE,IAAnC,EAAsC,CAAC,aAAa,GAAG,gBAAgB,SAAS,EAAE,EAAC;AACrH;AAGO,SAAS,aAAa,IAAa,eAAuB,SAA8B;AAC7F,QAAM,kBAAkB,wBAAwB,IAAI,EAAE;AAGtD,MAAI,mDAAkB,gBAAgB;AACpC,WAAO,oBAAoB,gBAAgB,aAAa,GAAG,QAAQ,GAAG;AAAA,EACxE;AAGA,QAAM,mBAAmB,yBAAyB,IAAI,aAAa;AACnE,MAAI,kBAAkB;AACpB,WAAO,oBAAoB,kBAAkB,QAAQ,GAAG;AAAA,EAC1D;AAGA,SAAO;AAAA,IACL,WAAW,CAAC;AAAA,IACZ,SAAS,EAAE,UAAU,EAAE;AAAA,EACzB;AACF;",
  "names": []
}
