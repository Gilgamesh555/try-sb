{
  "version": 3,
  "sources": ["../../src/components/avatar/avatar.component.ts"],
  "sourcesContent": ["import { classMap } from 'lit/directives/class-map.js';\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { watch } from '../../internal/watch';\nimport Badge from '../badge/badge.component';\nimport componentStyles from '../../styles/component.styles';\nimport Icon from '../icon/icon.component';\nimport styles from './avatar.styles';\nimport UIKitElement from '../../internal/uikit-element';\nimport type { CSSResultGroup } from 'lit';\n\nconst iconSizeParser = {\n  small: 'medium',\n  medium: 'large',\n  large: 'large'\n};\n\n/**\n * @summary Avatars are used to represent a person or object.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-avatar--docs\n * @status stable\n * @since 2.0\n *\n * @dependency koerber-icon\n * @dependency koerber-badge\n *\n * @slot icon - The default icon to use when no image or initials are present. Works best with `<koerber-icon>`.\n *\n * @csspart base - The component's base wrapper.\n * @csspart icon - The container that wraps the avatar's icon.\n * @csspart initials - The container that wraps the avatar's initials.\n * @csspart image - The avatar image. Only shown when the `image` attribute is set.\n *\n * @cssproperty --size - The size of the avatar.\n */\nexport default class Avatar extends UIKitElement {\n  static styles: CSSResultGroup = [componentStyles, styles];\n  static dependencies = {\n    'koerber-icon': Icon,\n    'koerber-badge': Badge\n  };\n\n  @query('.avatar') avatar: HTMLButtonElement | HTMLLinkElement;\n\n  /** Check if the image has an error on its download */\n  @state() private hasError = false;\n\n  /** Focus state on component */\n  @state() private hasFocus = false;\n\n  /** The image source to use for the avatar. */\n  @property() image = '';\n\n  /** Icon name attribute */\n  @property() icon = 'account';\n\n  /** A label to use to describe the avatar to assistive devices. */\n  @property() label = '';\n\n  /** Initials to use as a fallback when no image is available (1-2 characters max recommended). */\n  @property() initials = '';\n\n  /** Indicates how the browser should load the image. */\n  @property() loading: 'eager' | 'lazy' = 'eager';\n\n  /** Indicates how the browser should load the image. */\n  @property() size: 'small' | 'medium' | 'large' = 'medium';\n\n  @watch('image')\n  handleImageChange() {\n    // Reset the error when a new image is provided\n    this.hasError = false;\n  }\n\n  private handleClick() {\n    this.hasFocus = true;\n    this.emit('koerber-focus');\n\n    setTimeout(() => {\n      this.hasFocus = false;\n      this.emit('koerber-blur');\n    }, 100);\n  }\n\n  private handleMouseUp() {\n    this.hasFocus = false;\n    this.emit('koerber-blur');\n  }\n\n  private handleMouseDown() {\n    this.hasFocus = true;\n    this.emit('koerber-focus');\n  }\n\n  /** Simulates click on the component */\n  click() {\n    this.avatar.click();\n  }\n\n  /** Simulates the component press certain amount of time in mil-seconds */\n  press(time: number) {\n    this.handleMouseDown();\n\n    setTimeout(() => {\n      this.handleMouseUp();\n    }, time);\n  }\n\n  render() {\n    const avatarWithImage = html`\n      <img\n        part=\"image\"\n        class=\"avatar__image\"\n        src=\"${this.image}\"\n        loading=\"${this.loading}\"\n        alt=\"\"\n        @error=\"${() => (this.hasError = true)}\"\n      />\n    `;\n\n    let avatarWithoutImage = html``;\n\n    if (this.initials) {\n      avatarWithoutImage = html`<div part=\"initials\" class=\"avatar__initials\">${this.initials}</div>`;\n    } else {\n      avatarWithoutImage = html`\n        <div part=\"icon\" class=\"avatar__icon\" aria-hidden=\"true\">\n          <slot name=\"icon\">\n            <koerber-icon name=${this.icon} size=${iconSizeParser[this.size]}></koerber-icon>\n          </slot>\n        </div>\n      `;\n    }\n\n    return html`\n      <div\n        part=\"base\"\n        class=${classMap({\n          avatar: true,\n          [`avatar--${this.size}`]: true,\n          'avatar--focused': this.hasFocus\n        })}\n        role=\"img\"\n        aria-label=${this.label}\n        @click=${this.handleClick}\n        @mousedown=${this.handleMouseDown}\n        @mouseup=${this.handleMouseUp}\n      >\n        ${this.image && !this.hasError ? avatarWithImage : avatarWithoutImage}\n      </div>\n    `;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,UAAU,OAAO,aAAa;AASvC,IAAM,iBAAiB;AAAA,EACrB,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AACT;AAoBA,IAAqB,SAArB,cAAoC,aAAa;AAAA,EAAjD;AAAA;AAUW,SAAQ,WAAW;AAGnB,SAAQ,WAAW;AAGhB,iBAAQ;AAGR,gBAAO;AAGP,iBAAQ;AAGR,oBAAW;AAGX,mBAA4B;AAG5B,gBAAqC;AAAA;AAAA,EAGjD,oBAAoB;AAElB,SAAK,WAAW;AAAA,EAClB;AAAA,EAEQ,cAAc;AACpB,SAAK,WAAW;AAChB,SAAK,KAAK,eAAe;AAEzB,eAAW,MAAM;AACf,WAAK,WAAW;AAChB,WAAK,KAAK,cAAc;AAAA,IAC1B,GAAG,GAAG;AAAA,EACR;AAAA,EAEQ,gBAAgB;AACtB,SAAK,WAAW;AAChB,SAAK,KAAK,cAAc;AAAA,EAC1B;AAAA,EAEQ,kBAAkB;AACxB,SAAK,WAAW;AAChB,SAAK,KAAK,eAAe;AAAA,EAC3B;AAAA;AAAA,EAGA,QAAQ;AACN,SAAK,OAAO,MAAM;AAAA,EACpB;AAAA;AAAA,EAGA,MAAM,MAAc;AAClB,SAAK,gBAAgB;AAErB,eAAW,MAAM;AACf,WAAK,cAAc;AAAA,IACrB,GAAG,IAAI;AAAA,EACT;AAAA,EAEA,SAAS;AACP,UAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA,eAIb,KAAK,KAAK;AAAA,mBACN,KAAK,OAAO;AAAA;AAAA,kBAEb,MAAO,KAAK,WAAW,IAAK;AAAA;AAAA;AAI1C,QAAI,qBAAqB;AAEzB,QAAI,KAAK,UAAU;AACjB,2BAAqB,qDAAqD,KAAK,QAAQ;AAAA,IACzF,OAAO;AACL,2BAAqB;AAAA;AAAA;AAAA,iCAGM,KAAK,IAAI,SAAS,eAAe,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA,IAIxE;AAEA,WAAO;AAAA;AAAA;AAAA,gBAGK,SAAS;AAAA,MACf,QAAQ;AAAA,MACR,CAAC,WAAW,KAAK,IAAI,EAAE,GAAG;AAAA,MAC1B,mBAAmB,KAAK;AAAA,IAC1B,CAAC,CAAC;AAAA;AAAA,qBAEW,KAAK,KAAK;AAAA,iBACd,KAAK,WAAW;AAAA,qBACZ,KAAK,eAAe;AAAA,mBACtB,KAAK,aAAa;AAAA;AAAA,UAE3B,KAAK,SAAS,CAAC,KAAK,WAAW,kBAAkB,kBAAkB;AAAA;AAAA;AAAA,EAG3E;AACF;AArHqB,OACZ,SAAyB,CAAC,0BAAiB,qBAAM;AADrC,OAEZ,eAAe;AAAA,EACpB,gBAAgB;AAAA,EAChB,iBAAiB;AACnB;AAEkB;AAAA,EAAjB,MAAM,SAAS;AAAA,GAPG,OAOD;AAGD;AAAA,EAAhB,MAAM;AAAA,GAVY,OAUF;AAGA;AAAA,EAAhB,MAAM;AAAA,GAbY,OAaF;AAGL;AAAA,EAAX,SAAS;AAAA,GAhBS,OAgBP;AAGA;AAAA,EAAX,SAAS;AAAA,GAnBS,OAmBP;AAGA;AAAA,EAAX,SAAS;AAAA,GAtBS,OAsBP;AAGA;AAAA,EAAX,SAAS;AAAA,GAzBS,OAyBP;AAGA;AAAA,EAAX,SAAS;AAAA,GA5BS,OA4BP;AAGA;AAAA,EAAX,SAAS;AAAA,GA/BS,OA+BP;AAGZ;AAAA,EADC,MAAM,OAAO;AAAA,GAjCK,OAkCnB;",
  "names": []
}
