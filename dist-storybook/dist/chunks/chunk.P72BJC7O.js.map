{
  "version": 3,
  "sources": ["../../src/components/icon/icon.component.ts"],
  "sourcesContent": ["import { html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js';\n\nimport { getIconLibrary, unwatchIcon, watchIcon } from './library';\nimport { requestIcon } from './request';\nimport { watch } from '../../internal/watch';\nimport componentStyles from '../../styles/component.styles';\nimport styles from './icon.styles';\nimport UIKitElement from '../../internal/uikit-element';\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport type { CSSResultGroup } from 'lit';\n\nlet parser: DOMParser;\n\n/**\n * @summary Icons are symbols that can be used to represent various options within an application.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-icon--docs\n * @status stable\n * @since 1.0\n *\n * @event koerber-load - Emitted when the icon has loaded.\n * @event koerber-error - Emitted when the icon fails to load due to an error.\n *\n * @csspart svg - The internal SVG element.\n */\nexport default class Icon extends UIKitElement {\n  static styles: CSSResultGroup = [componentStyles, styles];\n\n  @state() private svg = '';\n\n  /** The name of a registered custom icon library. */\n  @state() library = 'default';\n\n  /** The name of the icon to draw. */\n  @property({ reflect: true }) name?: string;\n\n  /** The icon's size. */\n  @property({ reflect: true }) size: 'medium' | 'large' = 'medium';\n\n  /** The title (tooltip) of the attribute */\n  @property() title = '';\n\n  /**\n   * An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\n   * ignored by assistive devices.\n   */\n  @property() label = '';\n\n  connectedCallback() {\n    super.connectedCallback();\n    watchIcon(this);\n  }\n\n  firstUpdated() {\n    this.setIcon();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    unwatchIcon(this);\n  }\n\n  private getUrl() {\n    const library = getIconLibrary(this.library);\n    if (this.name && library) {\n      return library.resolver(this.name);\n    }\n    return '';\n  }\n\n  @watch('label')\n  handleLabelChange() {\n    const hasLabel = typeof this.label === 'string' && this.label.length > 0;\n\n    if (hasLabel) {\n      this.setAttribute('role', 'img');\n      this.setAttribute('aria-label', this.label);\n      this.removeAttribute('aria-hidden');\n    } else {\n      this.removeAttribute('role');\n      this.removeAttribute('aria-label');\n      this.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  @watch(['name', 'library'])\n  async setIcon() {\n    const library = getIconLibrary(this.library);\n    const url = this.getUrl();\n\n    // Create an instance of the DOM parser. We do it here instead of top-level to support SSR while maintaining a\n    // single parser instance for optimal performance.\n    if (!parser) {\n      parser = new DOMParser();\n    }\n\n    if (url) {\n      try {\n        const file = await requestIcon(url);\n        if (url !== this.getUrl()) {\n          // If the url has changed while fetching the icon, ignore this request\n        } else if (file.ok) {\n          const doc = parser.parseFromString(file.svg, 'text/html');\n          const svgEl = doc.body.querySelector('svg');\n          svgEl?.setAttribute('fill', 'currentColor');\n\n          if (svgEl !== null) {\n            svgEl.part.add('svg');\n            library?.mutator?.(svgEl);\n            this.svg = svgEl.outerHTML;\n            this.emit('koerber-load');\n          } else {\n            this.svg = '';\n            this.emit('koerber-error');\n          }\n        } else {\n          this.svg = '';\n          this.emit('koerber-error');\n        }\n      } catch {\n        this.emit('koerber-error');\n      }\n    } else if (this.svg.length > 0) {\n      // If we can't resolve a URL and an icon was previously set, remove it\n      this.svg = '';\n    }\n  }\n\n  render() {\n    return html`\n      <div\n        class=${classMap({\n          icon: true,\n          'icon--medium': this.size === 'medium',\n          'icon--large': this.size === 'large'\n        })}\n        title=${this.title}\n      >\n        ${unsafeSVG(this.svg)}\n      </div>\n    `;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
