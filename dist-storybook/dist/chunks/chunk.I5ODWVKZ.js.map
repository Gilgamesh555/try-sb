{
  "version": 3,
  "sources": ["../../src/components/radio-button/radio-button.component.ts"],
  "sourcesContent": ["import { classMap } from 'lit/directives/class-map.js';\r\nimport { HasSlotController } from '../../internal/slot';\r\nimport { html } from 'lit/static-html.js';\r\nimport { ifDefined } from 'lit/directives/if-defined.js';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { watch } from '../../internal/watch';\r\nimport buttonStyles from '../button/button.styles';\r\nimport styles from './radio-button.styles';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\n\r\n/**\r\n * @summary Radios buttons allow the user to select a single option from a group using a button-like control.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The radio button's label.\r\n * @slot prefix - A presentational prefix icon or similar element.\r\n * @slot suffix - A presentational suffix icon or similar element.\r\n *\r\n * @event koerber-blur - Emitted when the button loses focus.\r\n * @event koerber-focus - Emitted when the button gains focus.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart button - The internal `<button>` element.\r\n * @csspart button--checked - The internal button element when the radio button is checked.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart label - The container that wraps the radio button's label.\r\n * @csspart suffix - The container that wraps the suffix.\r\n */\r\nexport default class RadioButton extends UIKitElement {\r\n  static styles: CSSResultGroup = [buttonStyles, styles];\r\n\r\n  private readonly hasSlotController = new HasSlotController(this, '[default]', 'prefix', 'suffix');\r\n\r\n  @query('.button') input: HTMLInputElement;\r\n  @query('.hidden-input') hiddenInput: HTMLInputElement;\r\n\r\n  @state() protected hasFocus = false;\r\n\r\n  /**\r\n   * @internal The radio button's checked state. This is exposed as an \"internal\" attribute so we can reflect it, making\r\n   * it easier to style in button groups.\r\n   */\r\n  @property({ type: Boolean, reflect: true }) checked = false;\r\n\r\n  /** The radio's value. When selected, the radio group will receive this value. */\r\n  @property() value: string;\r\n\r\n  /** Disables the radio button. */\r\n  @property({ type: Boolean, reflect: true }) disabled = false;\r\n\r\n  /**\r\n   * The radio button's size. When used inside a radio group, the size will be determined by the radio group's size so\r\n   * this attribute can typically be omitted.\r\n   */\r\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /** Indicates en error on the component */\r\n  @property({ type: Boolean, reflect: true }) error = false;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.setAttribute('role', 'presentation');\r\n  }\r\n\r\n  private handleBlur() {\r\n    this.hasFocus = false;\r\n    this.emit('koerber-blur');\r\n  }\r\n\r\n  private handleClick(e: MouseEvent) {\r\n    if (this.disabled) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    this.checked = true;\r\n  }\r\n\r\n  private handleFocus() {\r\n    this.hasFocus = true;\r\n    this.emit('koerber-focus');\r\n  }\r\n\r\n  @watch('disabled', { waitUntilFirstUpdate: true })\r\n  handleDisabledChange() {\r\n    this.setAttribute('aria-disabled', this.disabled ? 'true' : 'false');\r\n  }\r\n\r\n  /** Sets focus on the radio button. */\r\n  focus(options?: FocusOptions) {\r\n    this.input.focus(options);\r\n  }\r\n\r\n  /** Removes focus from the radio button. */\r\n  blur() {\r\n    this.input.blur();\r\n  }\r\n\r\n  render() {\r\n    const radioButtonContent = html`\r\n      ${this.hasSlotController.test('prefix')\r\n        ? html`<slot name=\"prefix\" part=\"prefix\" class=\"button__prefix\"></slot>`\r\n        : ''}\r\n      ${this.hasSlotController.test('[default]') ? html`<slot part=\"label\" class=\"button__label\"></slot>` : ''}\r\n      ${this.hasSlotController.test('suffix')\r\n        ? html`<slot name=\"suffix\" part=\"suffix\" class=\"button__suffix\"></slot>`\r\n        : ''}\r\n    `;\r\n    return html`\r\n      <div part=\"base\" role=\"presentation\">\r\n        <button\r\n          part=\"${`button${this.checked ? ' button--checked' : ''}`}\"\r\n          role=\"radio\"\r\n          aria-checked=\"${this.checked}\"\r\n          class=${classMap({\r\n            button: true,\r\n            'button--default': true,\r\n            'button--small': this.size === 'small',\r\n            'button--medium': this.size === 'medium',\r\n            'button--large': this.size === 'large',\r\n            'button--checked': this.checked,\r\n            'button--disabled': this.disabled,\r\n            'button--focused': this.hasFocus,\r\n            'button--has-label': this.hasSlotController.test('[default]'),\r\n            'button--has-prefix': this.hasSlotController.test('prefix'),\r\n            'button--has-suffix': this.hasSlotController.test('suffix')\r\n          })}\r\n          aria-disabled=${this.disabled}\r\n          type=\"button\"\r\n          value=${ifDefined(this.value)}\r\n          tabindex=\"${this.checked ? '0' : '-1'}\"\r\n          @blur=${this.handleBlur}\r\n          @focus=${this.handleFocus}\r\n          @click=${this.handleClick}\r\n        >\r\n          ${radioButtonContent}\r\n        </button>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
