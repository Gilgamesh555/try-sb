{
  "version": 3,
  "sources": ["../../src/utilities/base-path.ts"],
  "sourcesContent": ["let basePath = '';\n\n/** Sets the library's base path to the specified directory. */\nexport function setBasePath(path: string) {\n  basePath = path;\n}\n\n/**\n * Gets the library's base path.\n *\n * The base path is used to load assets such as icons and images, so it needs to be set for components to work properly.\n * By default, this script will look for a script ending in uikit.js or shoelace-autoloader.js and set the base path\n * to the directory that contains that file. To override this behavior, you can add the data-shoelace attribute to any\n * script on the page (it probably makes the most sense to attach it to the Shoelace script, but it could also be on a\n * bundle). The value can be a local folder or it can point to a CORS-enabled endpoint such as a CDN.\n *\n *   <script src=\"bundle.js\" data-shoelace=\"/custom/base/path\"></script>\n *\n * Alternatively, you can set the base path manually using the exported setBasePath() function.\n *\n * @param subpath - An optional path to append to the base path.\n */\nexport function getBasePath(subpath = '') {\n  if (!basePath) {\n    const scripts = [...document.getElementsByTagName('script')] as HTMLScriptElement[];\n    const configScript = scripts.find(script => script.hasAttribute('data-shoelace'));\n\n    if (configScript) {\n      // Use the data-shoelace attribute\n      setBasePath(configScript.getAttribute('data-shoelace')!);\n    } else {\n      const fallbackScript = scripts.find(s => {\n        return /shoelace(\\.min)?\\.js($|\\?)/.test(s.src) || /shoelace-autoloader(\\.min)?\\.js($|\\?)/.test(s.src);\n      });\n      let path = '';\n\n      if (fallbackScript) {\n        path = fallbackScript.getAttribute('src')!;\n      }\n      setBasePath(path.split('/').slice(0, -1).join('/'));\n    }\n  }\n\n  if (!basePath) {\n    basePath = '/dist';\n  }\n\n  // Return the base path without a trailing slash. If one exists, append the subpath separated by a slash.\n  return basePath.replace(/\\/$/, '') + (subpath ? `/${subpath.replace(/^\\//, '')}` : ``);\n}\n"],
  "mappings": ";AAAA,IAAI,WAAW;AAGR,SAAS,YAAY,MAAc;AACxC,aAAW;AACb;AAiBO,SAAS,YAAY,UAAU,IAAI;AACxC,MAAI,CAAC,UAAU;AACb,UAAM,UAAU,CAAC,GAAG,SAAS,qBAAqB,QAAQ,CAAC;AAC3D,UAAM,eAAe,QAAQ,KAAK,YAAU,OAAO,aAAa,eAAe,CAAC;AAEhF,QAAI,cAAc;AAEhB,kBAAY,aAAa,aAAa,eAAe,CAAE;AAAA,IACzD,OAAO;AACL,YAAM,iBAAiB,QAAQ,KAAK,OAAK;AACvC,eAAO,6BAA6B,KAAK,EAAE,GAAG,KAAK,wCAAwC,KAAK,EAAE,GAAG;AAAA,MACvG,CAAC;AACD,UAAI,OAAO;AAEX,UAAI,gBAAgB;AAClB,eAAO,eAAe,aAAa,KAAK;AAAA,MAC1C;AACA,kBAAY,KAAK,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG,CAAC;AAAA,IACpD;AAAA,EACF;AAEA,MAAI,CAAC,UAAU;AACb,eAAW;AAAA,EACb;AAGA,SAAO,SAAS,QAAQ,OAAO,EAAE,KAAK,UAAU,IAAI,QAAQ,QAAQ,OAAO,EAAE,CAAC,KAAK;AACrF;",
  "names": []
}
