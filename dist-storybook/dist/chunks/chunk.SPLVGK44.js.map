{
  "version": 3,
  "sources": ["../../src/components/search/search.component.ts"],
  "sourcesContent": ["/** Exception due eslint doesn't support WAI-ARIA 1.3 that supports aria-description attr */\r\n/* eslint-disable lit-a11y/aria-attrs */\r\nimport { animateTo, stopAnimations } from '../../internal/animate';\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { defaultValue } from '../../internal/default-value';\r\nimport { getAnimation, setDefaultAnimation } from '../../utilities/animation-registry';\r\nimport { html } from 'lit';\r\nimport { ifDefined } from 'lit/directives/if-defined.js';\r\nimport { live } from 'lit/directives/live.js';\r\nimport { LocalizeController } from '../../utilities/localize';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { scrollIntoView } from '../../internal/scroll';\r\nimport { waitForEvent } from '../../internal/event';\r\nimport { watch } from '../../internal/watch';\r\nimport componentStyles from '../../styles/component.styles';\r\nimport formControlStyles from '../../styles/form-control.styles';\r\nimport Icon from '../icon/icon.component';\r\nimport Popup from '../popup/popup.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport styles from './search.styles';\r\nimport Tag from '../tag/tag.component';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\nimport type { UIKitFormControl } from '../../internal/uikit-element';\r\nimport type SearchOption from '../search-option/search-option';\r\n\r\n/**\r\n * @summary Search allow you to choose items from a menu of predefined options.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-search--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-popup\r\n * @dependency koerber-tag\r\n *\r\n * @slot - The listbox options. Must be `<koerber-search-option>` elements.\r\n * @slot prefix - Used to prepend a presentational icon or similar element to the combobox.\r\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\r\n * @slot search-icon - The icon to show when the control is expanded and collapsed. Rotates on open and close.\r\n *\r\n * @event koerber-change - Emitted when the control's value changes.\r\n * @event koerber-clear - Emitted when the control's value is cleared.\r\n * @event koerber-input - Emitted when the control receives input.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-show - Emitted when the search's menu opens.\r\n * @event koerber-after-show - Emitted after the search's menu opens and all animations are complete.\r\n * @event koerber-hide - Emitted when the search's menu closes.\r\n * @event koerber-after-hide - Emitted after the search's menu closes and all animations are complete.\r\n *\r\n * @csspart combobox - The container the wraps the prefix, combobox, clear icon, and expand button.\r\n * @csspart prefix - The container that wraps the prefix slot.\r\n * @csspart display-input - The element that displays the selected option's label, an `<input>` element.\r\n * @csspart listbox - The listbox container where options are slotted.\r\n * @csspart tag__base - The tag's base part.\r\n * @csspart tag__content - The tag's content part.\r\n * @csspart tag__remove-button - The tag's remove button.\r\n * @csspart tag__remove-button__base - The tag's remove button base part.\r\n * @csspart search-button - The search button or clear it depends.\r\n * @csspart search__icon - The container that wraps the expand icon.\r\n * @csspart form-control-error-message - The error's message wrapper.\r\n */\r\nexport default class Search extends UIKitElement implements UIKitFormControl {\r\n  static styles: CSSResultGroup = [componentStyles, formControlStyles, styles];\r\n  static dependencies = {\r\n    'koerber-icon': Icon,\r\n    'koerber-popup': Popup,\r\n    'koerber-tag': Tag,\r\n    'koerber-spinner': Spinner\r\n  };\r\n\r\n  private readonly localize = new LocalizeController(this);\r\n\r\n  @query('.search') popup: Popup;\r\n  @query('.search__display-input') displayInput: HTMLInputElement;\r\n  @query('.search__listbox') listbox: HTMLSlotElement;\r\n  @query('.search__icon') searchButton: HTMLElement;\r\n\r\n  @state() private hasFocus = false;\r\n  @state() currentOption: SearchOption;\r\n  @state() selectedOptions: SearchOption[] = [];\r\n  @state() minLengthMessage = '';\r\n  @state() searchResults = 0;\r\n\r\n  /** The name of the search, submitted as a name/value pair with form data. */\r\n  @property() name = '';\r\n\r\n  /**\r\n   * The current value of the search, submitted as a name/value pair with form data.\r\n   */\r\n  @property({ reflect: true }) value = '';\r\n\r\n  /** The default value of the form control. Primarily used for resetting the form control. */\r\n  @defaultValue() defaultValue: string = '';\r\n\r\n  /** Placeholder text to show as a hint when the search is empty. */\r\n  @property() placeholder = '';\r\n\r\n  /** The search's size. */\r\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /** Adds a loader/spinner in the suffix of the search control */\r\n  @property({ type: Boolean, reflect: true }) loading = false;\r\n\r\n  /** Displays loading message when loading flag set to true */\r\n  @property({ type: String }) loadingMessage = 'Disabled while loading';\r\n\r\n  /**\r\n   * Sets the maximum height for the dropdown box before the scrollbar appears.\r\n   */\r\n  @property({ attribute: 'max-height', type: Number }) maxHeight = 0;\r\n\r\n  /** Sets the minimum length of the search input before the search is triggered., zero by default (deactivated) */\r\n  @property({ type: Number, reflect: true, attribute: 'min-length' }) minLength = 0;\r\n\r\n  /** Disables the search control. */\r\n  @property({ type: Boolean, reflect: true }) disabled = false;\r\n\r\n  /**\r\n   * Indicates whether or not the search is open. You can toggle this attribute to show and hide the menu, or you can\r\n   * use the `show()` and `hide()` methods and this attribute will reflect the search's open state.\r\n   */\r\n  @property({ type: Boolean, reflect: true }) open = false;\r\n\r\n  /**\r\n   * Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\r\n   * `overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.\r\n   */\r\n  @property({ type: Boolean }) hoist = false;\r\n\r\n  /**\r\n   * The preferred placement of the search's menu. Note that the actual placement may vary as needed to keep the listbox\r\n   * inside of the viewport.\r\n   */\r\n  @property({ reflect: true }) placement: 'top' | 'bottom' = 'bottom';\r\n\r\n  /** The search's required attribute. */\r\n  @property({ type: Boolean, reflect: true }) required = false;\r\n\r\n  /**\r\n   * Used to indicate that the input has some error based on some rule.\r\n   */\r\n  @property({ type: Boolean }) error = false;\r\n\r\n  /** The component accessible label name */\r\n  @property({ attribute: 'accessible-name', reflect: true }) accessibleName: string;\r\n\r\n  /** The component accessible description */\r\n  @property({ attribute: 'accessible-description', reflect: true }) accessibleDescription: string;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    // Because this is a form control, it shouldn't be opened initially\r\n    this.open = false;\r\n  }\r\n\r\n  protected firstUpdated() {\r\n    // We need to check if items are provided at the beginning\r\n    this.handleDefaultSlotChange();\r\n  }\r\n\r\n  private addOpenListeners() {\r\n    document.addEventListener('focusin', this.handleDocumentFocusIn);\r\n    document.addEventListener('keydown', this.handleDocumentKeyDown);\r\n    document.addEventListener('mousedown', this.handleDocumentMouseDown);\r\n  }\r\n\r\n  private removeOpenListeners() {\r\n    document.removeEventListener('focusin', this.handleDocumentFocusIn);\r\n    document.removeEventListener('keydown', this.handleDocumentKeyDown);\r\n    document.removeEventListener('mousedown', this.handleDocumentMouseDown);\r\n  }\r\n\r\n  private async handleAnimations(previousValue: string) {\r\n    // Add animations when label input changes - we need in both since icons get rendered every time the input changes\r\n    const { keyframes, options } = getAnimation(this, 'search.icon.show', { dir: this.localize.dir() });\r\n\r\n    if (previousValue.length === 0 && this.value.length > 0) {\r\n      await animateTo(this.searchButton, keyframes, options);\r\n    } else if (this.value.length === 0) {\r\n      await animateTo(this.searchButton, keyframes, options);\r\n    }\r\n  }\r\n\r\n  private handleInput() {\r\n    const previousValue = this.value;\r\n    this.value = this.displayInput.value;\r\n\r\n    this.handleAnimations(previousValue);\r\n\r\n    if (this.value.length >= this.minLength) {\r\n      this.emit('koerber-change');\r\n    }\r\n\r\n    this.emit('koerber-input');\r\n  }\r\n\r\n  private handleChange() {\r\n    const previousValue = this.value;\r\n    this.value = this.displayInput.value;\r\n\r\n    this.handleAnimations(previousValue);\r\n\r\n    this.emit('koerber-change');\r\n  }\r\n\r\n  private handleFocus() {\r\n    this.hasFocus = true;\r\n    this.emit('koerber-focus');\r\n  }\r\n\r\n  private handleBlur() {\r\n    this.hasFocus = false;\r\n    this.emit('koerber-blur');\r\n  }\r\n\r\n  private handleDocumentFocusIn = (event: KeyboardEvent) => {\r\n    // Close when focusing out of the search\r\n    const path = event.composedPath();\r\n    if (this && !path.includes(this)) {\r\n      this.hide();\r\n    }\r\n  };\r\n\r\n  private handleDocumentKeyDown = (event: KeyboardEvent) => {\r\n    // Close when pressing escape\r\n    if (event.key === 'Escape' && this.open) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.hide();\r\n      this.displayInput.focus({ preventScroll: true });\r\n    }\r\n\r\n    // Handle enter and space. When pressing space, we allow for type to search behaviors so if there's anything in the\r\n    // buffer we _don't_ close it.\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n\r\n      // If it's not open, open it\r\n      if (!this.open) {\r\n        this.show();\r\n        return;\r\n      }\r\n\r\n      // If it is open, update the value based on the current selection and close it\r\n      if (this.currentOption && !this.currentOption.disabled) {\r\n        this.setSelectedOptions(this.currentOption);\r\n\r\n        // Emit after updating\r\n        this.updateComplete.then(() => {\r\n          this.emit('koerber-input');\r\n          this.emit('koerber-change');\r\n        });\r\n\r\n        this.hide();\r\n        this.displayInput.focus({ preventScroll: true });\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Navigate options\r\n    if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\r\n      const allOptions = this.getAllOptions();\r\n      const currentIndex = allOptions.indexOf(this.currentOption);\r\n      let newIndex = Math.max(0, currentIndex);\r\n\r\n      // Prevent scrolling\r\n      event.preventDefault();\r\n\r\n      // Open it\r\n      if (!this.open) {\r\n        this.show();\r\n\r\n        // If an option is already selected, stop here because we want that one to remain highlighted when the listbox\r\n        // opens for the first time\r\n        if (this.currentOption) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (event.key === 'ArrowDown') {\r\n        newIndex = currentIndex + 1;\r\n        if (newIndex > allOptions.length - 1) newIndex = 0;\r\n      } else if (event.key === 'ArrowUp') {\r\n        newIndex = currentIndex - 1;\r\n        if (newIndex < 0) newIndex = allOptions.length - 1;\r\n      } else if (event.key === 'Home') {\r\n        newIndex = 0;\r\n      } else if (event.key === 'End') {\r\n        newIndex = allOptions.length - 1;\r\n      }\r\n\r\n      this.setCurrentOption(allOptions[newIndex]);\r\n    }\r\n\r\n    // All other \"printable\" keys trigger type to search\r\n    if (event.key.length === 1 || event.key === 'Backspace') {\r\n      // Don't block important key combos like CMD+R\r\n      if (event.metaKey || event.ctrlKey || event.altKey) {\r\n        return;\r\n      }\r\n\r\n      // Open, unless the key that triggered is backspace\r\n      if (!this.open) {\r\n        if (event.key === 'Backspace') {\r\n          return;\r\n        }\r\n\r\n        this.show();\r\n      }\r\n\r\n      // When search has empty value, no searches should be displayed\r\n      if (event.key === 'Backspace' && this.value.length === 0) {\r\n        this.hide();\r\n      }\r\n\r\n      this.setCurrentOption(this.currentOption);\r\n\r\n      if (this.currentOption) {\r\n        scrollIntoView(this.currentOption, this.listbox, 'vertical', 'auto');\r\n      }\r\n    }\r\n  };\r\n\r\n  private handleDocumentMouseDown = (event: MouseEvent) => {\r\n    // Close when clicking outside of the search\r\n    const path = event.composedPath();\r\n    if (this && !path.includes(this)) {\r\n      this.hide();\r\n    }\r\n  };\r\n\r\n  private handleComboboxClick(event: MouseEvent) {\r\n    const path = event.composedPath();\r\n    const isIconButton = path.some(el => el instanceof Element && el.tagName.toLowerCase() === 'koerber-icon-button');\r\n\r\n    // Ignore disabled controls, clicks on tags (remove buttons) and empty values\r\n    if (this.disabled || isIconButton || this.value.length === 0) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    if (!this.open) {\r\n      this.show();\r\n    }\r\n\r\n    this.displayInput.focus({ preventScroll: true });\r\n  }\r\n\r\n  private handleComboboxKeyDown(event: KeyboardEvent) {\r\n    event.stopPropagation();\r\n\r\n    // Wait for keyboard rendered is done and value updated\r\n    requestAnimationFrame(() => {\r\n      this.handleDocumentKeyDown(event);\r\n    });\r\n  }\r\n\r\n  private handleClearClick(event: MouseEvent) {\r\n    event.stopPropagation();\r\n\r\n    this.value = '';\r\n\r\n    this.displayInput.focus({ preventScroll: true });\r\n    this.hide();\r\n\r\n    // Emit after update\r\n    this.updateComplete.then(() => {\r\n      this.emit('koerber-clear');\r\n      this.emit('koerber-input');\r\n      this.emit('koerber-change');\r\n    });\r\n  }\r\n\r\n  private handleClearMouseDown(event: MouseEvent) {\r\n    // Don't lose focus or propagate events when clicking the clear button\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  private handleOptionClick(event: MouseEvent) {\r\n    const target = event.target as HTMLElement;\r\n    const option = target.closest('koerber-search-option');\r\n\r\n    const oldValue = this.value;\r\n\r\n    if (option && !option.disabled) {\r\n      this.setSelectedOptions(option);\r\n\r\n      // Set focus after updating so the value is announced by screen readers\r\n      this.updateComplete.then(() => this.displayInput.focus({ preventScroll: true }));\r\n\r\n      if (this.value !== oldValue) {\r\n        // Emit after updating\r\n        this.updateComplete.then(() => {\r\n          this.emit('koerber-input');\r\n          this.emit('koerber-change');\r\n        });\r\n      }\r\n\r\n      this.hide();\r\n      this.displayInput.focus({ preventScroll: true });\r\n    }\r\n  }\r\n\r\n  private handleDefaultSlotChange() {\r\n    const allOptions = this.getAllOptions();\r\n\r\n    this.searchResults = allOptions.length;\r\n  }\r\n\r\n  // Gets an array of all <koerber-search-option> elements\r\n  private getAllOptions() {\r\n    return [...this.querySelectorAll<SearchOption>('koerber-search-option')];\r\n  }\r\n\r\n  // Gets the first <koerber-search-option> element\r\n  private getFirstOption() {\r\n    return this.querySelector<SearchOption>('koerber-search-option');\r\n  }\r\n\r\n  // Sets the current option, which is the option the user is currently interacting with (e.g. via keyboard). Only one\r\n  // option may be \"current\" at a time.\r\n  private setCurrentOption(option: SearchOption | null) {\r\n    const allOptions = this.getAllOptions();\r\n\r\n    // Clear selection\r\n    allOptions.forEach(el => {\r\n      el.current = false;\r\n      el.tabIndex = -1;\r\n    });\r\n\r\n    // Select the target option\r\n    if (option) {\r\n      this.currentOption = option;\r\n      option.current = true;\r\n      option.tabIndex = 0;\r\n    }\r\n  }\r\n\r\n  // Sets the selected option(s)\r\n  private setSelectedOptions(option: SearchOption) {\r\n    const allOptions = this.getAllOptions();\r\n    const newSelectedOptions = [option];\r\n\r\n    // Clear existing selection\r\n    allOptions.forEach(el => (el.selected = false));\r\n\r\n    // Set the new selection\r\n    if (newSelectedOptions.length) {\r\n      newSelectedOptions.forEach(el => (el.selected = true));\r\n    }\r\n\r\n    // Update selection, value, and display label\r\n    this.selectionChanged();\r\n  }\r\n\r\n  // This method must be called whenever the selection changes. It will update the selected options cache, the current\r\n  // value, and the display value\r\n  private selectionChanged() {\r\n    // Update selected options cache\r\n    this.selectedOptions = this.getAllOptions().filter(el => el.selected);\r\n\r\n    // Update the value and display label\r\n    this.value = this.selectedOptions[0].value;\r\n  }\r\n\r\n  private async updateMessage() {\r\n    await this.updateComplete;\r\n\r\n    if (this.searchResults <= 0) {\r\n      this.minLengthMessage = 'No Results';\r\n    }\r\n\r\n    if (this.value.length < this.minLength) {\r\n      this.minLengthMessage = `No Results - Minimum Characters Required: ${this.minLength}`;\r\n    }\r\n  }\r\n\r\n  private async syncOptions() {\r\n    const options = this.getAllOptions();\r\n\r\n    await Promise.all(\r\n      // Sync the checked state and size\r\n      options.map(async option => {\r\n        option.size = this.size;\r\n        await option.updateComplete;\r\n      })\r\n    );\r\n  }\r\n\r\n  handleSizeChange() {\r\n    this.syncOptions();\r\n  }\r\n\r\n  @watch('disabled', { waitUntilFirstUpdate: true })\r\n  handleDisabledChange() {\r\n    // Close the listbox when the control is disabled\r\n    if (this.disabled) {\r\n      this.open = false;\r\n      this.handleOpenChange();\r\n    }\r\n  }\r\n\r\n  @watch('value', { waitUntilFirstUpdate: true })\r\n  handleValueChange() {\r\n    // This to ensure if a no-result message is needed\r\n    this.updateMessage();\r\n  }\r\n\r\n  @watch('minLength')\r\n  handleMinLengthChange() {\r\n    this.updateMessage();\r\n  }\r\n\r\n  @watch('open', { waitUntilFirstUpdate: true })\r\n  async handleOpenChange() {\r\n    if (this.open && !this.disabled && !this.loading) {\r\n      // Set the maximum height of the dropdown box\r\n      if (this.maxHeight > 0) {\r\n        this.listbox.style.setProperty('max-height', `${this.maxHeight}px`);\r\n      }\r\n\r\n      this.handleSizeChange();\r\n\r\n      // Reset the current option\r\n      this.setCurrentOption(this.selectedOptions[0] || this.getFirstOption());\r\n\r\n      // Show\r\n      this.emit('koerber-show');\r\n      this.addOpenListeners();\r\n\r\n      await stopAnimations(this);\r\n      this.listbox.hidden = false;\r\n      this.popup.active = true;\r\n\r\n      // Select the appropriate option based on value after the listbox opens\r\n      requestAnimationFrame(() => {\r\n        this.setCurrentOption(this.currentOption);\r\n      });\r\n\r\n      const { keyframes, options } = getAnimation(this, 'search.show', { dir: this.localize.dir() });\r\n      await animateTo(this.popup.popup, keyframes, options);\r\n\r\n      // Make sure the current option is scrolled into view (required for Safari)\r\n      if (this.currentOption) {\r\n        scrollIntoView(this.currentOption, this.listbox, 'vertical', 'auto');\r\n      }\r\n\r\n      this.emit('koerber-after-show');\r\n      this.displayInput.focus({ preventScroll: true });\r\n    } else {\r\n      // Hide\r\n      this.emit('koerber-hide');\r\n      this.removeOpenListeners();\r\n\r\n      await stopAnimations(this);\r\n      const { keyframes, options } = getAnimation(this, 'search.hide', { dir: this.localize.dir() });\r\n      await animateTo(this.popup.popup, keyframes, options);\r\n      this.listbox.hidden = true;\r\n      this.popup.active = false;\r\n\r\n      this.emit('koerber-after-hide');\r\n    }\r\n  }\r\n\r\n  /** Shows the listbox. */\r\n  async show() {\r\n    if (this.open || this.disabled || this.loading) {\r\n      return undefined;\r\n    }\r\n\r\n    this.open = true;\r\n    return waitForEvent(this, 'koerber-after-show');\r\n  }\r\n\r\n  /** Hides the listbox. */\r\n  async hide() {\r\n    if (!this.open || this.disabled || this.loading) {\r\n      return undefined;\r\n    }\r\n\r\n    this.open = false;\r\n    return waitForEvent(this, 'koerber-after-hide');\r\n  }\r\n\r\n  /** Sets focus on the control. */\r\n  focus(options?: FocusOptions) {\r\n    this.displayInput.focus(options);\r\n  }\r\n\r\n  /** Removes focus from the control. */\r\n  blur() {\r\n    this.displayInput.blur();\r\n  }\r\n\r\n  render() {\r\n    const isResultEmpty = this.minLength > this.value.length || this.searchResults <= 0;\r\n\r\n    const noResultHTML = html`\r\n      <div class=\"search__listbox-min-length\">\r\n        <koerber-icon name=\"alert-circle\"></koerber-icon>\r\n        <span class=\"message\">${this.minLengthMessage}</span>\r\n      </div>\r\n    `;\r\n\r\n    return html`\r\n      <div\r\n        part=\"form-control\"\r\n        class=${classMap({\r\n          'form-control': true,\r\n          'form-control--small': this.size === 'small',\r\n          'form-control--medium': this.size === 'medium',\r\n          'form-control--large': this.size === 'large',\r\n          'form-control__label--disabled': this.disabled\r\n        })}\r\n      >\r\n        <div part=\"form-control-input\" class=\"form-control-input\">\r\n          <koerber-popup\r\n            class=${classMap({\r\n              search: true,\r\n              'search--standard': true,\r\n              'search--open': this.open && !this.loading,\r\n              'search--disabled': this.disabled,\r\n              'search--focused': this.hasFocus,\r\n              'search--placeholder': this.value.length === 0,\r\n              'search--top': this.placement === 'top',\r\n              'search--bottom': this.placement === 'bottom',\r\n              'search--small': this.size === 'small',\r\n              'search--medium': this.size === 'medium',\r\n              'search--large': this.size === 'large',\r\n              'search--loading': this.loading,\r\n              'search--error': this.error\r\n            })}\r\n            placement=${this.placement}\r\n            strategy=${this.hoist ? 'fixed' : 'absolute'}\r\n            flip\r\n            shift\r\n            sync=\"width\"\r\n            auto-size=\"vertical\"\r\n            auto-size-padding=\"10\"\r\n          >\r\n            <div\r\n              part=\"combobox\"\r\n              class=\"search__combobox\"\r\n              slot=\"anchor\"\r\n              @keydown=${this.handleComboboxKeyDown}\r\n              @click=${this.handleComboboxClick}\r\n            >\r\n              <slot part=\"prefix\" name=\"prefix\" class=\"search__prefix\"></slot>\r\n\r\n              <input\r\n                part=\"display-input\"\r\n                class=${classMap({\r\n                  'search__display-input': true,\r\n                  'search--small': this.size === 'small',\r\n                  'search--medium': this.size === 'medium',\r\n                  'search--large': this.size === 'large'\r\n                })}\r\n                type=\"text\"\r\n                placeholder=${this.placeholder}\r\n                .disabled=${this.disabled || this.loading}\r\n                .value=${live(this.value)}\r\n                autocomplete=\"off\"\r\n                spellcheck=\"false\"\r\n                autocapitalize=\"off\"\r\n                aria-label=${ifDefined(this.accessibleName)}\r\n                aria-description=${ifDefined(this.accessibleDescription)}\r\n                aria-controls=\"listbox\"\r\n                aria-expanded=${this.open ? 'true' : 'false'}\r\n                aria-haspopup=\"listbox\"\r\n                aria-labelledby=\"label\"\r\n                aria-disabled=${this.disabled || this.loading}\r\n                role=\"combobox\"\r\n                tabindex=\"0\"\r\n                @input=${this.handleInput}\r\n                @change=${this.handleChange}\r\n                @focus=${this.handleFocus}\r\n                @blur=${this.handleBlur}\r\n              />\r\n\r\n              <slot name=\"search-icon\" part=\"search__icon\" class=\"search__icon\">\r\n                ${this.value && this.value.length > 0\r\n                  ? html`\r\n                      <button\r\n                        part=\"clear-button\"\r\n                        class=\"search__clear\"\r\n                        type=\"button\"\r\n                        aria-label=${this.localize.term('clearEntry')}\r\n                        @mousedown=${this.handleClearMouseDown}\r\n                        @click=${this.handleClearClick}\r\n                        ?disabled=${this.disabled || this.loading}\r\n                        tabindex=\"-1\"\r\n                      >\r\n                        <koerber-icon name=\"close\" library=\"system\"></koerber-icon>\r\n                      </button>\r\n                    `\r\n                  : html` <koerber-icon name=\"magnify\"></koerber-icon> `}\r\n              </slot>\r\n            </div>\r\n\r\n            <div\r\n              id=\"listbox\"\r\n              role=\"listbox\"\r\n              aria-expanded=${this.open ? 'true' : 'false'}\r\n              part=\"listbox\"\r\n              class=\"search__listbox\"\r\n              tabindex=\"-1\"\r\n              @mouseup=${this.handleOptionClick}\r\n              @slotchange=${this.handleDefaultSlotChange}\r\n            >\r\n              ${isResultEmpty ? html` ${noResultHTML} ` : ''}\r\n\r\n              <slot class=\"${classMap({ options: true, 'options--hidden': isResultEmpty })}\"> </slot>\r\n\r\n              <slot></slot>\r\n            </div>\r\n          </koerber-popup>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\nsetDefaultAnimation('search.show', {\r\n  keyframes: [\r\n    { opacity: 0, scale: 0.9 },\r\n    { opacity: 1, scale: 1 }\r\n  ],\r\n  options: { duration: 100, easing: 'ease' }\r\n});\r\n\r\nsetDefaultAnimation('search.hide', {\r\n  keyframes: [\r\n    { opacity: 1, scale: 1 },\r\n    { opacity: 0, scale: 0.9 }\r\n  ],\r\n  options: { duration: 100, easing: 'ease' }\r\n});\r\n\r\nsetDefaultAnimation('search.icon.show', {\r\n  keyframes: [\r\n    { opacity: 0, scale: 0.9 },\r\n    { opacity: 1, scale: 1 }\r\n  ],\r\n  options: { duration: 250, easing: 'ease' }\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
