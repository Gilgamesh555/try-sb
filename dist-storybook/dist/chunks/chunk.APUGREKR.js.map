{
  "version": 3,
  "sources": ["../../src/components/select/select.component.ts"],
  "sourcesContent": ["/** Exception due eslint doesn't support WAI-ARIA 1.3 that supports aria-description attr */\r\n/* eslint-disable lit-a11y/aria-attrs */\r\nimport { animateTo, stopAnimations } from '../../internal/animate';\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { defaultValue } from '../../internal/default-value';\r\nimport { getAnimation, setDefaultAnimation } from '../../utilities/animation-registry';\r\nimport { html } from 'lit';\r\nimport { ifDefined } from 'lit/directives/if-defined.js';\r\nimport { LocalizeController } from '../../utilities/localize';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { scrollIntoView } from '../../internal/scroll';\r\nimport { waitForEvent } from '../../internal/event';\r\nimport { watch } from '../../internal/watch';\r\nimport componentStyles from '../../styles/component.styles';\r\nimport formControlStyles from '../../styles/form-control.styles';\r\nimport Icon from '../icon/icon.component';\r\nimport Popup from '../popup/popup.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport styles from './select.styles';\r\nimport Tag from '../tag/tag.component';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\nimport type { UIKitFormControl } from '../../internal/uikit-element';\r\nimport type RemoveEvent from '../../events/koerber-remove.js';\r\nimport type SelectOption from '../select-option/select-option.js';\r\n\r\n/**\r\n * @summary Selects allow you to choose items from a menu of predefined options.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-select--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-popup\r\n * @dependency koerber-tag\r\n *\r\n * @slot - The listbox options. Must be `<koerber-select-option>` elements.\r\n * @slot prefix - Used to prepend a presentational icon or similar element to the combobox.\r\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\r\n * @slot expand-icon - The icon to show when the control is expanded and collapsed. Rotates on open and close.\r\n *\r\n * @event koerber-change - Emitted when the control's value changes.\r\n * @event koerber-clear - Emitted when the control's value is cleared.\r\n * @event koerber-input - Emitted when the control receives input.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-show - Emitted when the select's menu opens.\r\n * @event koerber-after-show - Emitted after the select's menu opens and all animations are complete.\r\n * @event koerber-hide - Emitted when the select's menu closes.\r\n * @event koerber-after-hide - Emitted after the select's menu closes and all animations are complete.\r\n *\r\n * @csspart combobox - The container the wraps the prefix, combobox, clear icon, and expand button.\r\n * @csspart prefix - The container that wraps the prefix slot.\r\n * @csspart display-input - The element that displays the selected option's label, an `<input>` element.\r\n * @csspart listbox - The listbox container where options are slotted.\r\n * @csspart tags - The container that houses option tags when `multiselect` is used.\r\n * @csspart tag - The individual tags that represent each multiselect option.\r\n * @csspart tag__base - The tag's base part.\r\n * @csspart tag__content - The tag's content part.\r\n * @csspart tag__remove-button - The tag's remove button.\r\n * @csspart tag__remove-button__base - The tag's remove button base part.\r\n * @csspart clear-button - The clear button.\r\n * @csspart expand-icon - The container that wraps the expand icon.\r\n * @csspart form-control-error-message - The error's message wrapper.\r\n */\r\nexport default class Select extends UIKitElement implements UIKitFormControl {\r\n  static styles: CSSResultGroup = [componentStyles, formControlStyles, styles];\r\n  static dependencies = {\r\n    'koerber-icon': Icon,\r\n    'koerber-popup': Popup,\r\n    'koerber-tag': Tag,\r\n    'koerber-spinner': Spinner\r\n  };\r\n\r\n  private readonly localize = new LocalizeController(this);\r\n  private typeToSelectString = '';\r\n  private typeToSelectTimeout: number;\r\n\r\n  @query('.select') popup: Popup;\r\n  @query('.select__combobox') combobox: HTMLSlotElement;\r\n  @query('.select__display-input') displayInput: HTMLInputElement;\r\n  @query('.select__value-input') valueInput: HTMLInputElement;\r\n  @query('.select__listbox') listbox: HTMLSlotElement;\r\n\r\n  @state() private hasFocus = false;\r\n  @state() displayLabel = '';\r\n  @state() currentOption: SelectOption;\r\n  @state() selectedOptions: SelectOption[] = [];\r\n  @state() private hasClearIcon = this.shouldShowClearIcon();\r\n\r\n  /** The name of the select, submitted as a name/value pair with form data. */\r\n  @property() name = '';\r\n\r\n  /**\r\n   * The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\r\n   * value will be a space-delimited list of values based on the options selected.\r\n   */\r\n  @property({\r\n    converter: {\r\n      fromAttribute: (value: string) => value.split(' '),\r\n      toAttribute: (value: string[]) => value.join(' ')\r\n    }\r\n  })\r\n  value: string | string[] = '';\r\n\r\n  /** The default value of the form control. Primarily used for resetting the form control. */\r\n  @defaultValue() defaultValue: string | string[] = '';\r\n\r\n  /** Placeholder text to show as a hint when the select is empty. */\r\n  @property() placeholder = '';\r\n\r\n  /** The select's size. */\r\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /** Adds a loader/spinner in the suffix of the select control */\r\n  @property({ type: Boolean }) loading = false;\r\n\r\n  /** Displays loading message when loading flag set to true */\r\n  @property({ type: String }) loadingMessage = 'Disabled while loading';\r\n\r\n  /** Allows more than one option to be selected. */\r\n  @property({ type: Boolean, reflect: true }) multiple = false;\r\n\r\n  /**\r\n   * Sets the maximum height for the dropdown box before the scrollbar appears.\r\n   */\r\n  @property({ attribute: 'max-height', type: Number }) maxHeight = 0;\r\n\r\n  /**\r\n   * The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\r\n   * indicate the number of additional items that are selected. Set to 0 to remove the limit.\r\n   */\r\n  @property({ attribute: 'max-options-visible', type: Number }) maxOptionsVisible = 3;\r\n\r\n  /** Disables the select control. */\r\n  @property({ type: Boolean, reflect: true }) disabled = false;\r\n\r\n  /** Adds a clear button when the select is not empty. */\r\n  @property({ type: Boolean }) clearable = false;\r\n\r\n  /**\r\n   * Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\r\n   * use the `show()` and `hide()` methods and this attribute will reflect the select's open state.\r\n   */\r\n  @property({ type: Boolean, reflect: true }) open = false;\r\n\r\n  /**\r\n   * Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\r\n   * `overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.\r\n   */\r\n  @property({ type: Boolean }) hoist = false;\r\n\r\n  /**\r\n   * The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\r\n   * inside of the viewport.\r\n   */\r\n  @property({ reflect: true }) placement: 'top' | 'bottom' = 'bottom';\r\n\r\n  /** The select's required attribute. */\r\n  @property({ type: Boolean, reflect: true }) required = false;\r\n\r\n  /** Enables search functionality in the select box. */\r\n  @property({ type: Boolean }) allowSearch = false;\r\n\r\n  /**\r\n   * Used to indicate that the input has some error based on some rule.\r\n   */\r\n  @property({ type: Boolean }) error = false;\r\n\r\n  /**\r\n   * Used to indicate that the input has some error based on some rule.\r\n   */\r\n  @property({ attribute: 'loading-error-message' }) loadingErrorMessage: string;\r\n\r\n  /** The component accessible label name */\r\n  @property({ attribute: 'accessible-name', reflect: true }) accessibleName: string;\r\n\r\n  /** The component accessible description */\r\n  @property({ attribute: 'accessible-description', reflect: true }) accessibleDescription: string;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    // Because this is a form control, it shouldn't be opened initially\r\n    this.open = false;\r\n  }\r\n\r\n  private addOpenListeners() {\r\n    document.addEventListener('focusin', this.handleDocumentFocusIn);\r\n    document.addEventListener('keydown', this.handleDocumentKeyDown);\r\n    document.addEventListener('mousedown', this.handleDocumentMouseDown);\r\n  }\r\n\r\n  private removeOpenListeners() {\r\n    document.removeEventListener('focusin', this.handleDocumentFocusIn);\r\n    document.removeEventListener('keydown', this.handleDocumentKeyDown);\r\n    document.removeEventListener('mousedown', this.handleDocumentMouseDown);\r\n  }\r\n\r\n  private handleFocus() {\r\n    this.hasFocus = true;\r\n    this.displayInput.setSelectionRange(0, 0);\r\n    this.emit('koerber-focus');\r\n  }\r\n\r\n  private handleBlur() {\r\n    this.hasFocus = false;\r\n    this.emit('koerber-blur');\r\n  }\r\n\r\n  private handleDocumentFocusIn = (event: KeyboardEvent) => {\r\n    // Close when focusing out of the select\r\n    const path = event.composedPath();\r\n    if (this && !path.includes(this)) {\r\n      this.hide();\r\n    }\r\n  };\r\n\r\n  private handleDocumentKeyDown = (event: KeyboardEvent) => {\r\n    const target = event.target as HTMLElement;\r\n    const isClearButton = target.closest('.select__clear') !== null;\r\n    const isIconButton = target.closest('koerber-icon-button') !== null;\r\n\r\n    // Ignore presses when the target is an icon button (e.g. the remove button in <koerber-tag>)\r\n    if (isClearButton || isIconButton) {\r\n      return;\r\n    }\r\n\r\n    // Close when pressing escape\r\n    if (event.key === 'Escape' && this.open) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.hide();\r\n      this.displayInput.focus({ preventScroll: true });\r\n    }\r\n\r\n    // Handle enter and space. When pressing space, we allow for type to select behaviors so if there's anything in the\r\n    // buffer we _don't_ close it.\r\n    if (event.key === 'Enter' || (event.key === ' ' && this.typeToSelectString === '')) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n\r\n      // If it's not open, open it\r\n      if (!this.open) {\r\n        this.show();\r\n        return;\r\n      }\r\n\r\n      // If it is open, update the value based on the current selection and close it\r\n      if (this.currentOption && !this.currentOption.disabled) {\r\n        if (this.multiple) {\r\n          this.toggleOptionSelection(this.currentOption);\r\n        } else {\r\n          this.setSelectedOptions(this.currentOption);\r\n        }\r\n\r\n        this.typeToSelectString = '';\r\n\r\n        // Emit after updating\r\n        this.updateComplete.then(() => {\r\n          this.emit('koerber-input');\r\n          this.emit('koerber-change');\r\n        });\r\n\r\n        if (!this.multiple) {\r\n          this.hide();\r\n          this.displayInput.focus({ preventScroll: true });\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Navigate options\r\n    if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\r\n      const allOptions = this.getAllOptions();\r\n      const currentIndex = allOptions.indexOf(this.currentOption);\r\n      let newIndex = Math.max(0, currentIndex);\r\n\r\n      // Prevent scrolling\r\n      event.preventDefault();\r\n\r\n      // Open it\r\n      if (!this.open) {\r\n        this.show();\r\n\r\n        // If an option is already selected, stop here because we want that one to remain highlighted when the listbox\r\n        // opens for the first time\r\n        if (this.currentOption) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (event.key === 'ArrowDown') {\r\n        newIndex = currentIndex + 1;\r\n        if (newIndex > allOptions.length - 1) newIndex = 0;\r\n      } else if (event.key === 'ArrowUp') {\r\n        newIndex = currentIndex - 1;\r\n        if (newIndex < 0) newIndex = allOptions.length - 1;\r\n      } else if (event.key === 'Home') {\r\n        newIndex = 0;\r\n      } else if (event.key === 'End') {\r\n        newIndex = allOptions.length - 1;\r\n      }\r\n\r\n      this.setCurrentOption(allOptions[newIndex]);\r\n    }\r\n\r\n    if (this.allowSearch) {\r\n      // All other \"printable\" keys trigger type to select\r\n      if (event.key.length === 1 || event.key === 'Backspace') {\r\n        const allOptions = this.getAllOptions();\r\n\r\n        // Don't block important key combos like CMD+R\r\n        if (event.metaKey || event.ctrlKey || event.altKey) {\r\n          return;\r\n        }\r\n\r\n        // Open, unless the key that triggered is backspace\r\n        if (!this.open) {\r\n          if (event.key === 'Backspace') {\r\n            return;\r\n          }\r\n\r\n          this.show();\r\n        }\r\n\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        clearTimeout(this.typeToSelectTimeout);\r\n        this.typeToSelectTimeout = window.setTimeout(() => (this.typeToSelectString = ''), 10000);\r\n\r\n        if (event.key === 'Backspace') {\r\n          this.typeToSelectString = this.typeToSelectString.slice(0, -1);\r\n        } else {\r\n          // Use the shift key to check for uppercase\r\n          const isShiftPressed = event.shiftKey;\r\n          const charToAdd = isShiftPressed ? event.key : event.key.toLowerCase();\r\n\r\n          this.typeToSelectString += charToAdd;\r\n        }\r\n\r\n        // Update the value of the displayInput to show the characters being typed\r\n        this.displayInput.value = this.typeToSelectString;\r\n        this.displayInput.focus({ preventScroll: true });\r\n        this.setCurrentOption(this.currentOption);\r\n        this.hasClearIcon = this.shouldShowClearIcon();\r\n\r\n        if (this.currentOption) {\r\n          scrollIntoView(this.currentOption, this.listbox, 'vertical', 'auto');\r\n        }\r\n\r\n        this.emit('koerber-input');\r\n        this.emit('koerber-change');\r\n\r\n        for (const option of allOptions) {\r\n          const label = option.getTextLabel().toLowerCase();\r\n\r\n          if (label.startsWith(this.typeToSelectString.toLowerCase())) {\r\n            this.setCurrentOption(option);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private shouldShowClearIcon() {\r\n    return (this.isSearchable() || this.isClearable()) && !this.isDisabled();\r\n  }\r\n\r\n  private isSearchable() {\r\n    return this.allowSearch && this.typeToSelectString !== '' && !this.multiple;\r\n  }\r\n\r\n  private isClearable() {\r\n    return this.clearable && this.value.length > 0;\r\n  }\r\n\r\n  private isDisabled() {\r\n    return this.disabled;\r\n  }\r\n\r\n  private handleDocumentMouseDown = (event: MouseEvent) => {\r\n    // Close when clicking outside of the select\r\n    const path = event.composedPath();\r\n    if (this && !path.includes(this)) {\r\n      this.hide();\r\n    }\r\n  };\r\n\r\n  private handleComboboxMouseDown(event: MouseEvent) {\r\n    const path = event.composedPath();\r\n    const isIconButton = path.some(el => el instanceof Element && el.tagName.toLowerCase() === 'koerber-icon-button');\r\n\r\n    // Ignore disabled controls and clicks on tags (remove buttons)\r\n    if (this.disabled || isIconButton) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    this.open = !this.open;\r\n  }\r\n\r\n  private handleComboboxKeyDown(event: KeyboardEvent) {\r\n    event.stopPropagation();\r\n    this.handleDocumentKeyDown(event);\r\n  }\r\n\r\n  private handleClearClick(event: MouseEvent) {\r\n    event.stopPropagation();\r\n\r\n    this.typeToSelectString = '';\r\n    this.displayInput.value = this.typeToSelectString;\r\n\r\n    if (this.value !== '') {\r\n      this.setSelectedOptions([]);\r\n      this.displayInput.focus({ preventScroll: true });\r\n\r\n      // Emit after update\r\n      this.updateComplete.then(() => {\r\n        this.emit('koerber-clear');\r\n        this.emit('koerber-input');\r\n        this.emit('koerber-change');\r\n      });\r\n    }\r\n\r\n    this.hasClearIcon = false;\r\n  }\r\n\r\n  private handleClearMouseDown(event: MouseEvent) {\r\n    // Don't lose focus or propagate events when clicking the clear button\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  private handleOptionClick(event: MouseEvent) {\r\n    const target = event.target as HTMLElement;\r\n    const option = target.closest('koerber-select-option');\r\n    // Check if the click event was on the koerber-select-option > checkbox\r\n    const isCheckbox = event\r\n      .composedPath()\r\n      .some((el: HTMLElement) => el?.classList?.contains('select-option__checkbox'));\r\n\r\n    const oldValue = this.value;\r\n\r\n    if (option && !option.disabled) {\r\n      if (this.multiple) {\r\n        // If its clicked we only need to update the selected values\r\n        if (isCheckbox) {\r\n          option.addEventListener('koerber-change', () => this.selectionChanged());\r\n        } else {\r\n          this.toggleOptionSelection(option);\r\n        }\r\n      } else {\r\n        this.setSelectedOptions(option);\r\n      }\r\n\r\n      this.typeToSelectString = '';\r\n\r\n      // Set focus after updating so the value is announced by screen readers\r\n      this.updateComplete.then(() => this.displayInput.focus({ preventScroll: true }));\r\n\r\n      if (this.value !== oldValue) {\r\n        // Emit after updating\r\n        this.updateComplete.then(() => {\r\n          this.emit('koerber-input');\r\n          this.emit('koerber-change');\r\n        });\r\n      }\r\n\r\n      if (!this.multiple) {\r\n        this.hide();\r\n        this.displayInput.focus({ preventScroll: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleDefaultSlotChange() {\r\n    const allOptions = this.getAllOptions();\r\n    const value = Array.isArray(this.value) ? this.value : [this.value];\r\n    const values: string[] = [];\r\n\r\n    // Check for duplicate values in menu items\r\n    if (customElements.get('koerber-select-option')) {\r\n      allOptions.forEach(option => values.push(option.value));\r\n\r\n      // Select only the options that match the new value\r\n      this.setSelectedOptions(allOptions.filter(el => value.includes(el.value)));\r\n    } else {\r\n      // Rerun this handler when <koerber-select-option> is registered\r\n      customElements.whenDefined('koerber-select-option').then(() => this.handleDefaultSlotChange());\r\n    }\r\n  }\r\n\r\n  private handleTagRemove(event: RemoveEvent, option: SelectOption) {\r\n    event.stopPropagation();\r\n\r\n    if (!this.disabled) {\r\n      this.toggleOptionSelection(option, false);\r\n\r\n      // Emit after updating\r\n      this.updateComplete.then(() => {\r\n        this.emit('koerber-input');\r\n        this.emit('koerber-change');\r\n      });\r\n    }\r\n  }\r\n\r\n  // Gets an array of all <koerber-select-option> elements\r\n  private getAllOptions() {\r\n    return [...this.querySelectorAll<SelectOption>('koerber-select-option')];\r\n  }\r\n\r\n  // Gets the first <koerber-select-option> element\r\n  private getFirstOption() {\r\n    return this.querySelector<SelectOption>('koerber-select-option');\r\n  }\r\n\r\n  // Sets the current option, which is the option the user is currently interacting with (e.g. via keyboard). Only one\r\n  // option may be \"current\" at a time.\r\n  private setCurrentOption(option: SelectOption | null) {\r\n    const allOptions = this.getAllOptions();\r\n\r\n    // Clear selection\r\n    allOptions.forEach(el => {\r\n      el.current = false;\r\n      el.tabIndex = -1;\r\n    });\r\n\r\n    // Select the target option\r\n    if (option) {\r\n      this.currentOption = option;\r\n      option.current = true;\r\n      option.tabIndex = 0;\r\n    }\r\n  }\r\n\r\n  // Sets the selected option(s)\r\n  private setSelectedOptions(option: SelectOption | SelectOption[]) {\r\n    const allOptions = this.getAllOptions();\r\n    const newSelectedOptions = Array.isArray(option) ? option : [option];\r\n\r\n    // Clear existing selection\r\n    allOptions.forEach(el => (el.selected = false));\r\n\r\n    // Set the new selection\r\n    if (newSelectedOptions.length) {\r\n      newSelectedOptions.forEach(el => (el.selected = true));\r\n    }\r\n\r\n    // Update selection, value, and display label\r\n    this.selectionChanged();\r\n  }\r\n\r\n  // Toggles an option's selected state\r\n  private toggleOptionSelection(option: SelectOption, force?: boolean) {\r\n    if (force === true || force === false) {\r\n      option.selected = force;\r\n    } else {\r\n      option.selected = !option.selected;\r\n    }\r\n\r\n    this.selectionChanged();\r\n  }\r\n\r\n  // This method must be called whenever the selection changes. It will update the selected options cache, the current\r\n  // value, and the display value\r\n  private selectionChanged() {\r\n    // Update selected options cache\r\n    this.selectedOptions = this.getAllOptions().filter(el => el.selected);\r\n\r\n    // Update the value and display label\r\n    if (this.multiple) {\r\n      this.value = this.selectedOptions.map(el => el.value);\r\n\r\n      if (this.placeholder && this.value.length === 0) {\r\n        // When no items are selected, keep the value empty so the placeholder shows\r\n        this.displayLabel = '';\r\n      } else {\r\n        this.displayLabel = this.localize.term('numOptionsSelected', this.selectedOptions.length);\r\n      }\r\n    } else {\r\n      this.value = this.selectedOptions[0]?.value ?? '';\r\n      this.displayLabel = this.selectedOptions[0]?.getTextLabel() ?? '';\r\n    }\r\n  }\r\n\r\n  private async syncOptions() {\r\n    const options = this.getAllOptions();\r\n\r\n    await Promise.all(\r\n      // Sync the checked state and size\r\n      options.map(async option => {\r\n        await option.updateComplete;\r\n        option.size = this.size;\r\n      })\r\n    );\r\n  }\r\n\r\n  handleSizeChange() {\r\n    this.syncOptions();\r\n  }\r\n\r\n  @watch('disabled', { waitUntilFirstUpdate: true })\r\n  handleDisabledChange() {\r\n    // Close the listbox when the control is disabled\r\n    if (this.disabled) {\r\n      this.open = false;\r\n      this.handleOpenChange();\r\n    }\r\n  }\r\n\r\n  @watch('value', { waitUntilFirstUpdate: true })\r\n  handleValueChange() {\r\n    const allOptions = this.getAllOptions();\r\n    const value = Array.isArray(this.value) ? this.value : [this.value];\r\n\r\n    // Select only the options that match the new value\r\n    this.setSelectedOptions(allOptions.filter(el => value.includes(el.value)));\r\n\r\n    this.hasClearIcon = this.shouldShowClearIcon();\r\n  }\r\n\r\n  @watch('open', { waitUntilFirstUpdate: true })\r\n  async handleOpenChange() {\r\n    if (this.open && !this.disabled && !this.loading) {\r\n      // Set the maximum height of the dropdown box\r\n      if (this.maxHeight > 0) {\r\n        this.listbox.style.setProperty('max-height', `${this.maxHeight}px`);\r\n      }\r\n\r\n      this.handleSizeChange();\r\n\r\n      // Reset the current option\r\n      this.setCurrentOption(this.selectedOptions[0] || this.getFirstOption());\r\n\r\n      // Show\r\n      this.emit('koerber-show');\r\n      this.addOpenListeners();\r\n\r\n      await stopAnimations(this);\r\n      this.listbox.hidden = false;\r\n      this.popup.active = true;\r\n\r\n      // Select the appropriate option based on value after the listbox opens\r\n      requestAnimationFrame(() => {\r\n        this.setCurrentOption(this.currentOption);\r\n      });\r\n\r\n      const { keyframes, options } = getAnimation(this, 'select.show', { dir: this.localize.dir() });\r\n      await animateTo(this.popup.popup, keyframes, options);\r\n\r\n      // Make sure the current option is scrolled into view (required for Safari)\r\n      if (this.currentOption) {\r\n        scrollIntoView(this.currentOption, this.listbox, 'vertical', 'auto');\r\n      }\r\n\r\n      this.emit('koerber-after-show');\r\n      this.displayInput.focus({ preventScroll: true });\r\n    } else {\r\n      // Hide\r\n      this.emit('koerber-hide');\r\n      this.removeOpenListeners();\r\n\r\n      await stopAnimations(this);\r\n      const { keyframes, options } = getAnimation(this, 'select.hide', { dir: this.localize.dir() });\r\n      await animateTo(this.popup.popup, keyframes, options);\r\n      this.listbox.hidden = true;\r\n      this.popup.active = false;\r\n\r\n      this.emit('koerber-after-hide');\r\n    }\r\n  }\r\n\r\n  /** Shows the listbox. */\r\n  async show() {\r\n    if (this.open || this.disabled || this.loading) {\r\n      this.open = false;\r\n      return undefined;\r\n    }\r\n\r\n    this.open = true;\r\n    return waitForEvent(this, 'koerber-after-show');\r\n  }\r\n\r\n  /** Hides the listbox. */\r\n  async hide() {\r\n    if (!this.open || this.disabled || this.loading) {\r\n      this.open = false;\r\n      return undefined;\r\n    }\r\n\r\n    this.open = false;\r\n    return waitForEvent(this, 'koerber-after-hide');\r\n  }\r\n\r\n  /** Sets focus on the control. */\r\n  focus(options?: FocusOptions) {\r\n    this.displayInput.focus(options);\r\n  }\r\n\r\n  /** Removes focus from the control. */\r\n  blur() {\r\n    this.displayInput.blur();\r\n  }\r\n\r\n  render() {\r\n    const isPlaceholderVisible = this.placeholder && this.value.length === 0;\r\n    const hasError = this.error;\r\n\r\n    return html`\r\n      <div\r\n        part=\"form-control\"\r\n        class=${classMap({\r\n          'form-control': true,\r\n          'form-control--small': this.size === 'small',\r\n          'form-control--medium': this.size === 'medium',\r\n          'form-control--large': this.size === 'large',\r\n          'form-control__label--disabled': this.disabled\r\n        })}\r\n      >\r\n        <div part=\"form-control-input\" class=\"form-control-input\">\r\n          <koerber-popup\r\n            class=${classMap({\r\n              select: true,\r\n              'select--standard': true,\r\n              'select--open': this.open && !this.loading,\r\n              'select--disabled': this.disabled,\r\n              'select--multiple': this.multiple,\r\n              'select--focused': this.hasFocus,\r\n              'select--placeholder-visible': isPlaceholderVisible,\r\n              'select--top': this.placement === 'top',\r\n              'select--bottom': this.placement === 'bottom',\r\n              'select--small': this.size === 'small',\r\n              'select--medium': this.size === 'medium',\r\n              'select--large': this.size === 'large',\r\n              'select--loading': this.loading,\r\n              'select--error': hasError\r\n            })}\r\n            placement=${this.placement}\r\n            strategy=${this.hoist ? 'fixed' : 'absolute'}\r\n            flip\r\n            shift\r\n            sync=\"width\"\r\n            auto-size=\"vertical\"\r\n            auto-size-padding=\"10\"\r\n          >\r\n            <div\r\n              part=\"combobox\"\r\n              class=\"select__combobox\"\r\n              slot=\"anchor\"\r\n              @keydown=${this.handleComboboxKeyDown}\r\n              @mousedown=${this.handleComboboxMouseDown}\r\n            >\r\n              <slot part=\"prefix\" name=\"prefix\" class=\"select__prefix\"></slot>\r\n\r\n              <input\r\n                part=\"display-input\"\r\n                class=${classMap({\r\n                  'select__display-input': true,\r\n                  'select--small': this.size === 'small',\r\n                  'select--medium': this.size === 'medium',\r\n                  'select--large': this.size === 'large',\r\n                  'select--allowSearch': this.allowSearch\r\n                })}\r\n                type=\"text\"\r\n                placeholder=${this.placeholder}\r\n                .disabled=${this.disabled || this.loading}\r\n                .value=${this.displayLabel}\r\n                autocomplete=\"off\"\r\n                spellcheck=\"false\"\r\n                autocapitalize=\"off\"\r\n                ?readonly=${!this.allowSearch}\r\n                aria-label=${ifDefined(this.accessibleName)}\r\n                aria-description=${ifDefined(this.accessibleDescription)}\r\n                aria-controls=\"listbox\"\r\n                aria-expanded=${this.open ? 'true' : 'false'}\r\n                aria-haspopup=\"listbox\"\r\n                aria-labelledby=\"label\"\r\n                aria-disabled=${this.disabled || this.loading}\r\n                role=\"combobox\"\r\n                tabindex=\"0\"\r\n                @focus=${this.handleFocus}\r\n                @blur=${this.handleBlur}\r\n              />\r\n\r\n              ${this.multiple\r\n                ? html`\r\n                    <div part=\"tags\" class=\"select__tags\">\r\n                      ${this.selectedOptions.map((option, index) => {\r\n                        if (index < this.maxOptionsVisible || this.maxOptionsVisible <= 0) {\r\n                          return html`\r\n                            <koerber-tag\r\n                              part=\"tag\"\r\n                              exportparts=\"\r\n                                base:tag__base,\r\n                                content:tag__content,\r\n                                remove-button:tag__remove-button,\r\n                                remove-button__base:tag__remove-button__base\r\n                              \"\r\n                              size=${this.size}\r\n                              pill=\"true\"\r\n                              removable\r\n                              @koerber-remove=${(event: RemoveEvent) => this.handleTagRemove(event, option)}\r\n                            >\r\n                              ${option.getTextLabel()}\r\n                            </koerber-tag>\r\n                          `;\r\n                        } else if (index === this.maxOptionsVisible) {\r\n                          return html`\r\n                            <koerber-tag size=${this.size}> +${this.selectedOptions.length - index} </koerber-tag>\r\n                          `;\r\n                        } else {\r\n                          return null;\r\n                        }\r\n                      })}\r\n                    </div>\r\n                  `\r\n                : ''}\r\n\r\n              <input\r\n                class=\"select__value-input\"\r\n                type=\"text\"\r\n                ?disabled=${this.disabled || this.loading}\r\n                ?required=${this.required}\r\n                .value=${Array.isArray(this.value) ? this.value.join(', ') : this.value}\r\n                tabindex=\"-1\"\r\n                aria-hidden=\"true\"\r\n                @focus=${() => this.focus()}\r\n              />\r\n\r\n              ${this.loading && !this.error\r\n                ? html`\r\n                    <koerber-tooltip hoist content=${this.loadingMessage}>\r\n                      <div>\r\n                        <koerber-spinner></koerber-spinner>\r\n                      </div>\r\n                    </koerber-tooltip>\r\n                  `\r\n                : ''}\r\n              ${this.hasClearIcon\r\n                ? html`\r\n                    <button\r\n                      part=\"clear-button\"\r\n                      class=\"select__clear\"\r\n                      type=\"button\"\r\n                      aria-label=${this.localize.term('clearEntry')}\r\n                      @mousedown=${this.handleClearMouseDown}\r\n                      @click=${this.handleClearClick}\r\n                      tabindex=\"-1\"\r\n                    >\r\n                      <slot name=\"clear-icon\">\r\n                        <koerber-icon name=\"close\" library=\"system\"></koerber-icon>\r\n                      </slot>\r\n                    </button>\r\n                  `\r\n                : ''}\r\n              ${hasError\r\n                ? html`\r\n                    <div class=\"select-error-icon-slot\">\r\n                      <koerber-icon class=\"select-error-icon\" name=\"alert\"></koerber-icon>\r\n                    </div>\r\n                  `\r\n                : ''}\r\n\r\n              <slot name=\"expand-icon\" part=\"expand-icon\" class=\"select__expand-icon\">\r\n                <koerber-icon library=\"system\" name=\"chevron-down\"></koerber-icon>\r\n              </slot>\r\n            </div>\r\n\r\n            <div\r\n              id=\"listbox\"\r\n              role=\"listbox\"\r\n              aria-expanded=${this.open ? 'true' : 'false'}\r\n              aria-multiselectable=${this.multiple ? 'true' : 'false'}\r\n              part=\"listbox\"\r\n              class=\"select__listbox\"\r\n              tabindex=\"-1\"\r\n              @mouseup=${this.handleOptionClick}\r\n              @slotchange=${this.handleDefaultSlotChange}\r\n            >\r\n              <slot></slot>\r\n            </div>\r\n          </koerber-popup>\r\n        </div>\r\n        ${this.loadingErrorMessage\r\n          ? html`\r\n              <slot\r\n                name=\"error-message\"\r\n                part=\"form-control-error-message\"\r\n                id=\"error-message\"\r\n                class=\"form-control__error-message\"\r\n                aria-hidden=${this.loadingErrorMessage ? 'false' : 'true'}\r\n              >\r\n                ${this.loadingErrorMessage}\r\n              </slot>\r\n            `\r\n          : ''}\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\nsetDefaultAnimation('select.show', {\r\n  keyframes: [\r\n    { opacity: 0, scale: 0.9 },\r\n    { opacity: 1, scale: 1 }\r\n  ],\r\n  options: { duration: 100, easing: 'ease' }\r\n});\r\n\r\nsetDefaultAnimation('select.hide', {\r\n  keyframes: [\r\n    { opacity: 1, scale: 1 },\r\n    { opacity: 0, scale: 0.9 }\r\n  ],\r\n  options: { duration: 100, easing: 'ease' }\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
