{
  "version": 3,
  "sources": ["../../src/components/button/button.component.ts"],
  "sourcesContent": ["import { classMap } from 'lit/directives/class-map.js';\r\nimport { HasSlotController } from '../../internal/slot';\r\nimport { html } from 'lit/static-html.js';\r\nimport { ifDefined } from 'lit/directives/if-defined.js';\r\nimport { LocalizeController } from '../../utilities/localize';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport componentStyles from '../../styles/component.styles';\r\nimport Icon from '../icon/icon.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport styles from './button.styles';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\nimport type { UIKitFormControl } from '../../internal/uikit-element';\r\n\r\n/**\r\n * @summary Buttons represent actions that are available to the user.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-button--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-spinner\r\n *\r\n * @event koerber-blur - Emitted when the button loses focus.\r\n * @event koerber-focus - Emitted when the button gains focus.\r\n *\r\n * @slot - The button's label.\r\n * @slot prefix - A presentational prefix icon or similar element.\r\n * @slot suffix - A presentational suffix icon or similar element.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart label - The button's label.\r\n * @csspart suffix - The container that wraps the suffix.\r\n * @csspart caret - The button's caret icon, an `<koerber-icon>` element.\r\n */\r\nexport default class Button extends UIKitElement implements UIKitFormControl {\r\n  static styles: CSSResultGroup = [componentStyles, styles];\r\n  static dependencies = { 'koerber-icon': Icon, 'koerber-spinner': Spinner };\r\n\r\n  private readonly hasSlotController = new HasSlotController(this, '[default]', 'prefix', 'suffix');\r\n  private readonly localize = new LocalizeController(this);\r\n  /**\r\n   * The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native\r\n   * `<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.\r\n   */\r\n  private type = 'button';\r\n\r\n  @query('.button') button: HTMLButtonElement | HTMLLinkElement;\r\n\r\n  @state() private hasFocus = false;\r\n  @property() title = ''; // make reactive to pass through\r\n\r\n  /** The button's theme variant. */\r\n  @property({ reflect: true }) variant:\r\n    | 'primary'\r\n    | 'secondary'\r\n    | 'tertiary'\r\n    | 'ghost'\r\n    | 'danger'\r\n    | 'secondary-danger'\r\n    | 'ghost-danger' = 'primary';\r\n\r\n  /** The button's size. */\r\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /** Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior. */\r\n  @property({ type: Boolean, reflect: true }) caret = false;\r\n\r\n  /** Disables the button. */\r\n  @property({ type: Boolean, reflect: true }) disabled = false;\r\n\r\n  /** Draws the button in a loading state. */\r\n  @property({ type: Boolean, reflect: true }) loading = false;\r\n\r\n  /**\r\n   * The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\r\n   * This attribute is ignored when `href` is present.\r\n   */\r\n  @property() name = '';\r\n\r\n  /**\r\n   * The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\r\n   * button is the submitter. This attribute is ignored when `href` is present.\r\n   */\r\n  @property() value = '';\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.handleHostClick = this.handleHostClick.bind(this);\r\n    this.addEventListener('click', this.handleHostClick);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.removeEventListener('click', this.handleHostClick);\r\n  }\r\n\r\n  private handleBlur() {\r\n    this.hasFocus = false;\r\n    this.emit('koerber-blur');\r\n  }\r\n\r\n  private handleFocus() {\r\n    this.hasFocus = true;\r\n    this.emit('koerber-focus');\r\n  }\r\n\r\n  private handleClick() {\r\n    setTimeout(() => {\r\n      this.hasFocus = false;\r\n      this.emit('koerber-focus');\r\n    }, 100);\r\n  }\r\n\r\n  private handleHostClick(event: MouseEvent) {\r\n    // Prevent the click event from being emitted when the button is disabled or loading\r\n    if (this.disabled || this.loading) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  /** Simulates a click on the button. */\r\n  click() {\r\n    this.button.click();\r\n  }\r\n\r\n  /** Sets focus on the button. */\r\n  focus(options?: FocusOptions) {\r\n    this.button.focus(options);\r\n  }\r\n\r\n  /** Removes focus from the button. */\r\n  blur() {\r\n    this.button.blur();\r\n  }\r\n\r\n  render() {\r\n    /* eslint-disable lit/no-invalid-html */\r\n    /* eslint-disable lit/binding-positions */\r\n\r\n    let buttonContent;\r\n    if (this.loading) {\r\n      buttonContent = html`<koerber-spinner></koerber-spinner>`;\r\n    } else {\r\n      buttonContent = html`\r\n        ${this.hasSlotController.test('prefix')\r\n          ? html`<slot part=\"prefix\" name=\"prefix\" class=\"button__prefix\"></slot>`\r\n          : ''}\r\n        ${this.hasSlotController.test('[default]') ? html`<slot part=\"label\" class=\"button__label\"></slot>` : ''}\r\n        ${this.caret\r\n          ? html`<koerber-icon size=${this.size} part=\"caret\" class=\"button__caret\" name=\"chevron-down\"></koerber-icon>`\r\n          : ''}\r\n        ${this.hasSlotController.test('suffix')\r\n          ? html`<slot part=\"suffix\" name=\"suffix\" class=\"button__suffix\"></slot>`\r\n          : ''}\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <button\r\n        part=\"base\"\r\n        class=${classMap({\r\n          button: true,\r\n          'button--primary': this.variant === 'primary',\r\n          'button--secondary': this.variant === 'secondary',\r\n          'button--tertiary': this.variant === 'tertiary',\r\n          'button--ghost': this.variant === 'ghost',\r\n          'button--danger': this.variant === 'danger',\r\n          'button--secondary-danger': this.variant === 'secondary-danger',\r\n          'button--ghost-danger': this.variant === 'ghost-danger',\r\n          'button--small': this.size === 'small',\r\n          'button--medium': this.size === 'medium',\r\n          'button--large': this.size === 'large',\r\n          'button--caret': this.caret,\r\n          'button--disabled': this.disabled,\r\n          'button--focused': this.hasFocus,\r\n          'button--loading': this.loading,\r\n          'button--standard': this.variant !== 'secondary',\r\n          'button--rtl': this.localize.dir() === 'rtl',\r\n          'button--has-label': this.hasSlotController.test('[default]'),\r\n          'button--has-prefix': this.hasSlotController.test('prefix'),\r\n          'button--has-suffix': this.hasSlotController.test('suffix')\r\n        })}\r\n        ?disabled=${this.disabled}\r\n        type=${ifDefined(this.type)}\r\n        title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}\r\n        name=${ifDefined(this.name)}\r\n        value=${ifDefined(this.value)}\r\n        role=${ifDefined('button')}\r\n        aria-disabled=${this.disabled ? 'true' : 'false'}\r\n        tabindex=${this.disabled ? '-1' : '0'}\r\n        @blur=${this.handleBlur}\r\n        @focus=${this.handleFocus}\r\n        @click=${this.handleClick}\r\n        aria-label=${this.name}\r\n      >\r\n        <slot name=\"badge\" part=\"badge\"></slot>\r\n        ${buttonContent}\r\n      </button>\r\n    `;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
