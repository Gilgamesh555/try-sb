{
  "version": 3,
  "sources": ["../../src/components/breadcrumb-item/breadcrumb-item.component.ts"],
  "sourcesContent": ["import { classMap } from 'lit/directives/class-map.js';\r\nimport { HasSlotController } from '../../internal/slot';\r\nimport { html } from 'lit';\r\nimport { ifDefined } from 'lit/directives/if-defined.js';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport componentStyles from '../../styles/component.styles';\r\nimport styles from './breadcrumb-item.styles';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup, PropertyValues } from 'lit';\r\n\r\n/**\r\n * @summary Breadcrumb Items are used inside [breadcrumbs](/components/breadcrumb) to represent different links.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-breadcrumb-item--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The breadcrumb item's label.\r\n * @slot prefix - An optional prefix, usually an icon or icon button.\r\n * @slot suffix - An optional suffix, usually an icon or icon button.\r\n * @slot separator - The separator to use for the breadcrumb item. This will only change the separator for this item. If\r\n * you want to change it for all items in the group, set the separator on `<koerber-breadcrumb>` instead.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart label - The breadcrumb item's label.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart suffix - The container that wraps the suffix.\r\n * @csspart separator - The container that wraps the separator.\r\n */\r\nexport default class BreadcrumbItem extends UIKitElement {\r\n  static styles: CSSResultGroup = [componentStyles, styles];\r\n\r\n  private readonly hasSlotController = new HasSlotController(this, 'prefix', 'suffix');\r\n  private resizeObserver: ResizeObserver;\r\n\r\n  /* Checks if text is overflowing */\r\n  @state() private isTextOverflowing = false;\r\n\r\n  /** Indicates the max width of the item text */\r\n  @property({ type: Number, attribute: 'max-width' }) maxWidth = 0;\r\n\r\n  /**\r\n   * Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\r\n   * internally. When unset, a button will be rendered instead.\r\n   */\r\n  @property() href?: string;\r\n\r\n  /** Tells the browser where to open the link. Only used when `href` is set. */\r\n  @property() target?: '_blank' | '_parent' | '_self' | '_top';\r\n\r\n  /** The `rel` attribute to use on the link. Only used when `href` is set. */\r\n  @property() rel = 'noreferrer noopener';\r\n\r\n  /** Check if the item is the current Active */\r\n  @property({ type: Boolean, attribute: 'active' }) isActive = false;\r\n\r\n  @query('.breadcrumb-item__label') labelContentSlot: HTMLSlotElement;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    // observe the changes on current breadcrumb item\r\n    this.updateComplete.then(() => {\r\n      this.resizeObserver.observe(this.labelContentSlot);\r\n    });\r\n  }\r\n\r\n  protected updated(_changedProperties: PropertyValues): void {\r\n    if (_changedProperties.has('isTextOverflowing')) {\r\n      this.attachOverflowObserver();\r\n    }\r\n  }\r\n\r\n  private attachOverflowObserver() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n\r\n    this.resizeObserver = new ResizeObserver(() => this.checkIfTextIsTruncated());\r\n\r\n    this.updateComplete.then(() => {\r\n      this.resizeObserver.observe(this.labelContentSlot);\r\n    });\r\n  }\r\n\r\n  // This function checks if item width exceeds the max width if set\r\n  private checkIfTextIsTruncated() {\r\n    if (this.labelContentSlot) {\r\n      if (this.labelContentSlot.scrollWidth > this.labelContentSlot.clientWidth) {\r\n        this.isTextOverflowing = true;\r\n      } else {\r\n        this.isTextOverflowing = false;\r\n      }\r\n    }\r\n\r\n    return this.isTextOverflowing;\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.resizeObserver.disconnect();\r\n  }\r\n\r\n  // This function will return only the direct text nodes of the custom element, excluding slots.\r\n  private getTextContentExcludingSlots() {\r\n    const nodes = Array.from(this.childNodes);\r\n    const filteredTextContent = nodes\r\n      .filter(node => node.nodeType === Node.TEXT_NODE && node.textContent?.trim() !== '')\r\n      .map(node => node.textContent?.trim())\r\n      .join(' ');\r\n    return filteredTextContent;\r\n  }\r\n\r\n  render() {\r\n    const isLink = this.href ? true : false;\r\n    const textContent = this.getTextContentExcludingSlots();\r\n\r\n    const content = this.isActive\r\n      ? html`\r\n          <span id=\"breadcrumb-item\" part=\"label\" class=\"breadcrumb-item__label\">\r\n            <slot></slot>\r\n          </span>\r\n        `\r\n      : isLink\r\n        ? html`\r\n            <a\r\n              id=\"breadcrumb-item\"\r\n              part=\"label\"\r\n              class=\"breadcrumb-item__label breadcrumb-item__label--link\"\r\n              href=\"${this.href!}\"\r\n              target=\"${ifDefined(this.target ? this.target : undefined)}\"\r\n              rel=${ifDefined(this.target ? this.rel : undefined)}\r\n            >\r\n              <slot></slot>\r\n            </a>\r\n          `\r\n        : html`\r\n            <button\r\n              id=\"breadcrumb-item\"\r\n              part=\"label\"\r\n              type=\"button\"\r\n              class=\"breadcrumb-item__label breadcrumb-item__label--button\"\r\n            >\r\n              <slot></slot>\r\n            </button>\r\n          `;\r\n\r\n    return html`\r\n      <style>\r\n        .breadcrumb-item__label {\r\n          max-width: ${this.maxWidth > 0 ? `${this.maxWidth}px` : `100%`};\r\n        }\r\n      </style>\r\n      <div\r\n        part=\"base\"\r\n        class=${classMap({\r\n          'breadcrumb-item': true,\r\n          'breadcrumb-item--has-prefix': this.hasSlotController.test('prefix'),\r\n          'breadcrumb-item--has-suffix': this.hasSlotController.test('suffix')\r\n        })}\r\n      >\r\n        ${this.isTextOverflowing\r\n          ? html` <koerber-tooltip hoist content=${ifDefined(textContent)}>${content}</koerber-tooltip> `\r\n          : html` ${content} `}\r\n\r\n        <slot name=\"separator\" part=\"separator\" class=\"breadcrumb-item__separator\" aria-hidden=\"true\"></slot>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
