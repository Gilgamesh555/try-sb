{
  "version": 3,
  "sources": ["../../src/components/radio-group/radio-group.component.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { html } from 'lit';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { watch } from '../../internal/watch';\r\nimport ButtonGroup from '../button-group/button-group.component';\r\nimport componentStyles from '../../styles/component.styles';\r\nimport formControlStyles from '../../styles/form-control.styles';\r\nimport styles from './radio-group.styles';\r\nimport UIKitElement from '../../internal/uikit-element';\r\nimport type { CSSResultGroup } from 'lit';\r\nimport type { UIKitFormControl } from '../../internal/uikit-element';\r\nimport type Radio from '../radio/radio.component';\r\nimport type RadioButton from '../radio-button/radio-button.component';\r\n\r\n/**\r\n * @summary Radio groups are used to group multiple [radios](/components/radio) or [radio buttons](/components/radio-button) so they function as a single form control.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-button-group\r\n *\r\n * @slot - The default slot where `<koerber-radio>` or `<koerber-radio-button>` elements are placed.\r\n *  attribute.\r\n *\r\n * @event koerber-change - Emitted when the radio group's selected value changes.\r\n * @event koerber-input - Emitted when the radio group receives user input.\r\n *\r\n * @csspart button-group - The button group that wraps radio buttons.\r\n * @csspart button-group__base - The button group's `base` part.\r\n */\r\nexport default class RadioGroup extends UIKitElement implements UIKitFormControl {\r\n  static styles: CSSResultGroup = [componentStyles, formControlStyles, styles];\r\n  static dependencies = { 'koerber-button-group': ButtonGroup };\r\n\r\n  @query('slot:not([name])') defaultSlot: HTMLSlotElement;\r\n\r\n  @state() private hasButtonGroup = false;\r\n  @state() defaultValue = '';\r\n\r\n  /** The name of the radio group, submitted as a name/value pair with form data. */\r\n  @property() name = 'option';\r\n\r\n  /** The current value of the radio group, submitted as a name/value pair with form data. */\r\n  @property({ reflect: true }) value = '';\r\n\r\n  /** The radio group's size. This size will be applied to all child radios and radio buttons. */\r\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /** Ensures a child radio is checked before allowing the containing form to submit. */\r\n  @property({ type: Boolean, reflect: true }) required = false;\r\n\r\n  /** set layout horizontal/vertical. */\r\n  @property({ type: Boolean, reflect: true }) horizontal = false;\r\n\r\n  /** Disables all child radio buttons. */\r\n  @property({ type: Boolean, reflect: true }) disabled = false;\r\n\r\n  /** Put the checked item to error state - indicating an error to the user. */\r\n  @property({ type: Boolean, reflect: true }) error = false;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.defaultValue = this.value;\r\n  }\r\n\r\n  private getAllRadios() {\r\n    return [...this.querySelectorAll<Radio | RadioButton>('koerber-radio, koerber-radio-button')];\r\n  }\r\n\r\n  private handleRadioClick(event: MouseEvent) {\r\n    const target = (event.target as HTMLElement).closest<Radio | RadioButton>('koerber-radio, koerber-radio-button')!;\r\n    const radios = this.getAllRadios();\r\n    const oldValue = this.value;\r\n\r\n    if (target.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.value = target.value;\r\n    radios.forEach(radio => (radio.checked = radio === target));\r\n\r\n    if (this.value !== oldValue) {\r\n      this.emit('koerber-change');\r\n      this.emit('koerber-input');\r\n    }\r\n  }\r\n\r\n  private handleKeyDown(event: KeyboardEvent) {\r\n    if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ' '].includes(event.key)) {\r\n      return;\r\n    }\r\n\r\n    const radios = this.getAllRadios().filter(radio => !radio.disabled);\r\n    const checkedRadio = radios.find(radio => radio.checked) ?? radios[0];\r\n    const incr = event.key === ' ' ? 0 : ['ArrowUp', 'ArrowLeft'].includes(event.key) ? -1 : 1;\r\n    const oldValue = this.value;\r\n    let index = radios.indexOf(checkedRadio) + incr;\r\n\r\n    if (index < 0) {\r\n      index = radios.length - 1;\r\n    }\r\n\r\n    if (index > radios.length - 1) {\r\n      index = 0;\r\n    }\r\n\r\n    this.getAllRadios().forEach(radio => {\r\n      radio.checked = false;\r\n\r\n      if (!this.hasButtonGroup) {\r\n        radio.tabIndex = -1;\r\n      }\r\n    });\r\n\r\n    this.value = radios[index].value;\r\n    radios[index].checked = true;\r\n\r\n    if (!this.hasButtonGroup) {\r\n      radios[index].tabIndex = 0;\r\n      radios[index].focus();\r\n    } else {\r\n      radios[index].shadowRoot!.querySelector('button')!.focus();\r\n    }\r\n\r\n    if (this.value !== oldValue) {\r\n      this.emit('koerber-change');\r\n      this.emit('koerber-input');\r\n    }\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  private async syncRadioElements() {\r\n    const radios = this.getAllRadios();\r\n\r\n    await Promise.all(\r\n      // Sync the checked state and size\r\n      radios.map(async radio => {\r\n        await radio.updateComplete;\r\n        radio.checked = radio.value === this.value;\r\n        radio.size = this.size;\r\n      })\r\n    );\r\n\r\n    this.hasButtonGroup = radios.some(radio => radio.tagName.toLowerCase() === 'koerber-radio-button');\r\n\r\n    if (!radios.some(radio => radio.checked)) {\r\n      if (this.hasButtonGroup) {\r\n        const buttonRadio = radios[0].shadowRoot?.querySelector('button');\r\n\r\n        if (buttonRadio) {\r\n          buttonRadio.tabIndex = 0;\r\n        }\r\n      } else {\r\n        radios[0].tabIndex = 0;\r\n      }\r\n    }\r\n\r\n    if (this.hasButtonGroup) {\r\n      const buttonGroup = this.shadowRoot?.querySelector('koerber-button-group');\r\n\r\n      if (buttonGroup) {\r\n        buttonGroup.disableRole = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRadios() {\r\n    if (customElements.get('koerber-radio') && customElements.get('koerber-radio-button')) {\r\n      this.syncRadioElements();\r\n      return;\r\n    }\r\n\r\n    if (customElements.get('koerber-radio')) {\r\n      this.syncRadioElements();\r\n    } else {\r\n      customElements.whenDefined('koerber-radio').then(() => this.syncRadios());\r\n    }\r\n\r\n    if (customElements.get('koerber-radio-button')) {\r\n      this.syncRadioElements();\r\n    } else {\r\n      // Rerun this handler when <koerber-radio> or <koerber-radio-button> is registered\r\n      customElements.whenDefined('koerber-radio-button').then(() => this.syncRadios());\r\n    }\r\n  }\r\n\r\n  private updateCheckedRadio() {\r\n    const radios = this.getAllRadios();\r\n    radios.forEach(radio => (radio.checked = radio.value === this.value));\r\n  }\r\n\r\n  @watch('size', { waitUntilFirstUpdate: true })\r\n  handleSizeChange() {\r\n    this.syncRadios();\r\n  }\r\n\r\n  @watch('value')\r\n  handleValueChange() {\r\n    if (this.hasUpdated) {\r\n      this.updateCheckedRadio();\r\n    }\r\n  }\r\n\r\n  @watch('disabled')\r\n  handleDisabledChange() {\r\n    if (this.disabled) {\r\n      this.getAllRadios().forEach(radio => (radio.disabled = this.disabled));\r\n    }\r\n  }\r\n\r\n  @watch('error')\r\n  handleErrorChange() {\r\n    if (this.error) {\r\n      this.getAllRadios().forEach(radio => {\r\n        radio.error = true;\r\n      });\r\n    } else {\r\n      this.getAllRadios().forEach(radio => {\r\n        radio.error = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    const radios = this.getAllRadios();\r\n    const checked = radios.find(radio => radio.checked);\r\n    const radioToFocus = checked || radios[0];\r\n\r\n    // Move focus to the checked radio (or the first one if none are checked) when clicking the label\r\n    if (radioToFocus) {\r\n      radioToFocus.focus();\r\n    }\r\n  }\r\n\r\n  blur() {\r\n    const radios = this.getAllRadios();\r\n    radios.forEach(radio => radio.blur());\r\n  }\r\n\r\n  render() {\r\n    const defaultSlot = html`\r\n      <slot\r\n        @click=${this.handleRadioClick}\r\n        @keydown=${this.handleKeyDown}\r\n        @slotchange=${this.syncRadios}\r\n        role=\"presentation\"\r\n      ></slot>\r\n    `;\r\n\r\n    return html`\r\n      <fieldset\r\n        part=\"form-control\"\r\n        class=${classMap({\r\n          'form-control': true,\r\n          'form-control--small': this.size === 'small',\r\n          'form-control--medium': this.size === 'medium',\r\n          'form-control--large': this.size === 'large',\r\n          'form-control--radio-group': true\r\n        })}\r\n        role=\"radiogroup\"\r\n      >\r\n        <div\r\n          part=\"form-control-input\"\r\n          class=${classMap({\r\n            'form-control-input': true,\r\n            'radio-group--horizontal': this.horizontal\r\n          })}\r\n        >\r\n          ${this.hasButtonGroup\r\n            ? html`\r\n                <koerber-button-group part=\"button-group\" exportparts=\"base:button-group__base\">\r\n                  ${defaultSlot}\r\n                </koerber-button-group>\r\n              `\r\n            : defaultSlot}\r\n        </div>\r\n      </fieldset>\r\n    `;\r\n    /* eslint-enable lit-a11y/click-events-have-key-events */\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,UAAU,OAAO,aAAa;AA6BvC,IAAqB,aAArB,cAAwC,aAAyC;AAAA,EAAjF;AAAA;AAMW,SAAQ,iBAAiB;AACzB,wBAAe;AAGZ,gBAAO;AAGU,iBAAQ;AAGR,gBAAqC;AAGtB,oBAAW;AAGX,sBAAa;AAGb,oBAAW;AAGX,iBAAQ;AAAA;AAAA,EAEpD,oBAAoB;AAClB,UAAM,kBAAkB;AACxB,SAAK,eAAe,KAAK;AAAA,EAC3B;AAAA,EAEQ,eAAe;AACrB,WAAO,CAAC,GAAG,KAAK,iBAAsC,qCAAqC,CAAC;AAAA,EAC9F;AAAA,EAEQ,iBAAiB,OAAmB;AAC1C,UAAM,SAAU,MAAM,OAAuB,QAA6B,qCAAqC;AAC/G,UAAM,SAAS,KAAK,aAAa;AACjC,UAAM,WAAW,KAAK;AAEtB,QAAI,OAAO,UAAU;AACnB;AAAA,IACF;AAEA,SAAK,QAAQ,OAAO;AACpB,WAAO,QAAQ,WAAU,MAAM,UAAU,UAAU,MAAO;AAE1D,QAAI,KAAK,UAAU,UAAU;AAC3B,WAAK,KAAK,gBAAgB;AAC1B,WAAK,KAAK,eAAe;AAAA,IAC3B;AAAA,EACF;AAAA,EAEQ,cAAc,OAAsB;AAzF9C;AA0FI,QAAI,CAAC,CAAC,WAAW,aAAa,aAAa,cAAc,GAAG,EAAE,SAAS,MAAM,GAAG,GAAG;AACjF;AAAA,IACF;AAEA,UAAM,SAAS,KAAK,aAAa,EAAE,OAAO,WAAS,CAAC,MAAM,QAAQ;AAClE,UAAM,gBAAe,YAAO,KAAK,WAAS,MAAM,OAAO,MAAlC,YAAuC,OAAO,CAAC;AACpE,UAAM,OAAO,MAAM,QAAQ,MAAM,IAAI,CAAC,WAAW,WAAW,EAAE,SAAS,MAAM,GAAG,IAAI,KAAK;AACzF,UAAM,WAAW,KAAK;AACtB,QAAI,QAAQ,OAAO,QAAQ,YAAY,IAAI;AAE3C,QAAI,QAAQ,GAAG;AACb,cAAQ,OAAO,SAAS;AAAA,IAC1B;AAEA,QAAI,QAAQ,OAAO,SAAS,GAAG;AAC7B,cAAQ;AAAA,IACV;AAEA,SAAK,aAAa,EAAE,QAAQ,WAAS;AACnC,YAAM,UAAU;AAEhB,UAAI,CAAC,KAAK,gBAAgB;AACxB,cAAM,WAAW;AAAA,MACnB;AAAA,IACF,CAAC;AAED,SAAK,QAAQ,OAAO,KAAK,EAAE;AAC3B,WAAO,KAAK,EAAE,UAAU;AAExB,QAAI,CAAC,KAAK,gBAAgB;AACxB,aAAO,KAAK,EAAE,WAAW;AACzB,aAAO,KAAK,EAAE,MAAM;AAAA,IACtB,OAAO;AACL,aAAO,KAAK,EAAE,WAAY,cAAc,QAAQ,EAAG,MAAM;AAAA,IAC3D;AAEA,QAAI,KAAK,UAAU,UAAU;AAC3B,WAAK,KAAK,gBAAgB;AAC1B,WAAK,KAAK,eAAe;AAAA,IAC3B;AAEA,UAAM,eAAe;AAAA,EACvB;AAAA,EAEA,MAAc,oBAAoB;AAtIpC;AAuII,UAAM,SAAS,KAAK,aAAa;AAEjC,UAAM,QAAQ;AAAA;AAAA,MAEZ,OAAO,IAAI,OAAM,UAAS;AACxB,cAAM,MAAM;AACZ,cAAM,UAAU,MAAM,UAAU,KAAK;AACrC,cAAM,OAAO,KAAK;AAAA,MACpB,CAAC;AAAA,IACH;AAEA,SAAK,iBAAiB,OAAO,KAAK,WAAS,MAAM,QAAQ,YAAY,MAAM,sBAAsB;AAEjG,QAAI,CAAC,OAAO,KAAK,WAAS,MAAM,OAAO,GAAG;AACxC,UAAI,KAAK,gBAAgB;AACvB,cAAM,eAAc,YAAO,CAAC,EAAE,eAAV,mBAAsB,cAAc;AAExD,YAAI,aAAa;AACf,sBAAY,WAAW;AAAA,QACzB;AAAA,MACF,OAAO;AACL,eAAO,CAAC,EAAE,WAAW;AAAA,MACvB;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB,YAAM,eAAc,UAAK,eAAL,mBAAiB,cAAc;AAEnD,UAAI,aAAa;AACf,oBAAY,cAAc;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,aAAa;AACnB,QAAI,eAAe,IAAI,eAAe,KAAK,eAAe,IAAI,sBAAsB,GAAG;AACrF,WAAK,kBAAkB;AACvB;AAAA,IACF;AAEA,QAAI,eAAe,IAAI,eAAe,GAAG;AACvC,WAAK,kBAAkB;AAAA,IACzB,OAAO;AACL,qBAAe,YAAY,eAAe,EAAE,KAAK,MAAM,KAAK,WAAW,CAAC;AAAA,IAC1E;AAEA,QAAI,eAAe,IAAI,sBAAsB,GAAG;AAC9C,WAAK,kBAAkB;AAAA,IACzB,OAAO;AAEL,qBAAe,YAAY,sBAAsB,EAAE,KAAK,MAAM,KAAK,WAAW,CAAC;AAAA,IACjF;AAAA,EACF;AAAA,EAEQ,qBAAqB;AAC3B,UAAM,SAAS,KAAK,aAAa;AACjC,WAAO,QAAQ,WAAU,MAAM,UAAU,MAAM,UAAU,KAAK,KAAM;AAAA,EACtE;AAAA,EAGA,mBAAmB;AACjB,SAAK,WAAW;AAAA,EAClB;AAAA,EAGA,oBAAoB;AAClB,QAAI,KAAK,YAAY;AACnB,WAAK,mBAAmB;AAAA,IAC1B;AAAA,EACF;AAAA,EAGA,uBAAuB;AACrB,QAAI,KAAK,UAAU;AACjB,WAAK,aAAa,EAAE,QAAQ,WAAU,MAAM,WAAW,KAAK,QAAS;AAAA,IACvE;AAAA,EACF;AAAA,EAGA,oBAAoB;AAClB,QAAI,KAAK,OAAO;AACd,WAAK,aAAa,EAAE,QAAQ,WAAS;AACnC,cAAM,QAAQ;AAAA,MAChB,CAAC;AAAA,IACH,OAAO;AACL,WAAK,aAAa,EAAE,QAAQ,WAAS;AACnC,cAAM,QAAQ;AAAA,MAChB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,QAAQ;AACN,UAAM,SAAS,KAAK,aAAa;AACjC,UAAM,UAAU,OAAO,KAAK,WAAS,MAAM,OAAO;AAClD,UAAM,eAAe,WAAW,OAAO,CAAC;AAGxC,QAAI,cAAc;AAChB,mBAAa,MAAM;AAAA,IACrB;AAAA,EACF;AAAA,EAEA,OAAO;AACL,UAAM,SAAS,KAAK,aAAa;AACjC,WAAO,QAAQ,WAAS,MAAM,KAAK,CAAC;AAAA,EACtC;AAAA,EAEA,SAAS;AACP,UAAM,cAAc;AAAA;AAAA,iBAEP,KAAK,gBAAgB;AAAA,mBACnB,KAAK,aAAa;AAAA,sBACf,KAAK,UAAU;AAAA;AAAA;AAAA;AAKjC,WAAO;AAAA;AAAA;AAAA,gBAGK,SAAS;AAAA,MACf,gBAAgB;AAAA,MAChB,uBAAuB,KAAK,SAAS;AAAA,MACrC,wBAAwB,KAAK,SAAS;AAAA,MACtC,uBAAuB,KAAK,SAAS;AAAA,MACrC,6BAA6B;AAAA,IAC/B,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKQ,SAAS;AAAA,MACf,sBAAsB;AAAA,MACtB,2BAA2B,KAAK;AAAA,IAClC,CAAC,CAAC;AAAA;AAAA,YAEA,KAAK,iBACH;AAAA;AAAA,oBAEM,WAAW;AAAA;AAAA,kBAGjB,WAAW;AAAA;AAAA;AAAA;AAAA,EAKvB;AACF;AA3PqB,WACZ,SAAyB,CAAC,0BAAiB,6BAAmB,0BAAM;AADxD,WAEZ,eAAe,EAAE,wBAAwB,YAAY;AAEjC;AAAA,EAA1B,MAAM,kBAAkB;AAAA,GAJN,WAIQ;AAEV;AAAA,EAAhB,MAAM;AAAA,GANY,WAMF;AACR;AAAA,EAAR,MAAM;AAAA,GAPY,WAOV;AAGG;AAAA,EAAX,SAAS;AAAA,GAVS,WAUP;AAGiB;AAAA,EAA5B,SAAS,EAAE,SAAS,KAAK,CAAC;AAAA,GAbR,WAaU;AAGA;AAAA,EAA5B,SAAS,EAAE,SAAS,KAAK,CAAC;AAAA,GAhBR,WAgBU;AAGe;AAAA,EAA3C,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAnBvB,WAmByB;AAGA;AAAA,EAA3C,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAtBvB,WAsByB;AAGA;AAAA,EAA3C,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAzBvB,WAyByB;AAGA;AAAA,EAA3C,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GA5BvB,WA4ByB;AAuI5C;AAAA,EADC,MAAM,QAAQ,EAAE,sBAAsB,KAAK,CAAC;AAAA,GAlK1B,WAmKnB;AAKA;AAAA,EADC,MAAM,OAAO;AAAA,GAvKK,WAwKnB;AAOA;AAAA,EADC,MAAM,UAAU;AAAA,GA9KE,WA+KnB;AAOA;AAAA,EADC,MAAM,OAAO;AAAA,GArLK,WAsLnB;",
  "names": []
}
