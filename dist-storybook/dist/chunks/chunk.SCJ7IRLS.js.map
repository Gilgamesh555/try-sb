{
  "version": 3,
  "sources": ["../../src/components/breadcrumb/breadcrumb.component.ts"],
  "sourcesContent": ["import { html } from 'lit';\nimport { LocalizeController } from '../../utilities/localize';\nimport { property, query } from 'lit/decorators.js';\nimport componentStyles from '../../styles/component.styles';\nimport Icon from '../icon/icon.component';\nimport styles from './breadcrumb.styles';\nimport UIKitElement from '../../internal/uikit-element';\nimport type { CSSResultGroup } from 'lit';\nimport type BreadcrumbItem from '../breadcrumb-item/breadcrumb-item.component';\n\n/**\n * @summary Breadcrumbs provide a group of links so users can easily navigate a website's hierarchy.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-breadcrumb--docs\n * @status stable\n * @since 2.0\n *\n * @slot - One or more breadcrumb items to display.\n * @slot separator - The separator to use between breadcrumb items. Works best with `<koerber-icon>`.\n *\n * @dependency koerber-icon\n *\n * @csspart base - The component's base wrapper.\n */\nexport default class Breadcrumb extends UIKitElement {\n  static styles: CSSResultGroup = [componentStyles, styles];\n  static dependencies = { 'koerber-icon': Icon };\n\n  private readonly localize = new LocalizeController(this);\n  private separatorDir = this.localize.dir();\n\n  @query('slot') defaultSlot: HTMLSlotElement;\n  @query('slot[name=\"separator\"]') separatorSlot: HTMLSlotElement;\n\n  /**\n   * The label to use for the breadcrumb control. This will not be shown on the screen, but it will be announced by\n   * screen readers and other assistive devices to provide more context for users.\n   */\n  @property() label = '';\n\n  // Generates a clone of the separator element to use for each breadcrumb item\n  private getSeparator() {\n    const separator = this.separatorSlot.assignedElements({ flatten: true })[0] as HTMLElement;\n\n    // Clone it, remove ids, and slot it\n    const clone = separator.cloneNode(true) as HTMLElement;\n    [clone, ...clone.querySelectorAll('[id]')].forEach(el => el.removeAttribute('id'));\n    clone.setAttribute('data-default', '');\n    clone.slot = 'separator';\n\n    return clone;\n  }\n\n  private handleSlotChange() {\n    const items = [...this.defaultSlot.assignedElements({ flatten: true })].filter(\n      item => item.tagName.toLowerCase() === 'koerber-breadcrumb-item'\n    ) as BreadcrumbItem[];\n\n    items.forEach((item, index) => {\n      // Append separators to each item if they don't already have one\n      const separator = item.querySelector('[slot=\"separator\"]');\n      if (separator === null) {\n        // No separator exists, add one\n        item.append(this.getSeparator());\n      } else if (separator.hasAttribute('data-default')) {\n        // A default separator exists, replace it\n        separator.replaceWith(this.getSeparator());\n      }\n\n      // The last breadcrumb item is the \"current page\"\n      if (index === items.length - 1) {\n        item.setAttribute('aria-current', 'page');\n      } else {\n        item.removeAttribute('aria-current');\n      }\n    });\n  }\n\n  render() {\n    // We clone the separator and inject them into breadcrumb items, so we need to regenerate the default ones when\n    // directionality changes. We do this by storing the current separator direction, waiting for render, then calling\n    // the function that regenerates them.\n    if (this.separatorDir !== this.localize.dir()) {\n      this.separatorDir = this.localize.dir();\n      this.updateComplete.then(() => this.handleSlotChange());\n    }\n\n    return html`\n      <nav part=\"base\" class=\"breadcrumb\" aria-label=${this.label}>\n        <slot @slotchange=${this.handleSlotChange}></slot>\n      </nav>\n\n      <slot name=\"separator\" hidden aria-hidden=\"true\">\n        <koerber-icon\n          name=${this.localize.dir() === 'rtl' ? 'chevron-left' : 'chevron-right'}\n          library=\"system\"\n        ></koerber-icon>\n      </slot>\n    `;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,SAAS,YAAY;AAErB,SAAS,UAAU,aAAa;AAqBhC,IAAqB,aAArB,cAAwC,aAAa;AAAA,EAArD;AAAA;AAIE,SAAiB,WAAW,IAAI,mBAAmB,IAAI;AACvD,SAAQ,eAAe,KAAK,SAAS,IAAI;AAS7B,iBAAQ;AAAA;AAAA;AAAA,EAGZ,eAAe;AACrB,UAAM,YAAY,KAAK,cAAc,iBAAiB,EAAE,SAAS,KAAK,CAAC,EAAE,CAAC;AAG1E,UAAM,QAAQ,UAAU,UAAU,IAAI;AACtC,KAAC,OAAO,GAAG,MAAM,iBAAiB,MAAM,CAAC,EAAE,QAAQ,QAAM,GAAG,gBAAgB,IAAI,CAAC;AACjF,UAAM,aAAa,gBAAgB,EAAE;AACrC,UAAM,OAAO;AAEb,WAAO;AAAA,EACT;AAAA,EAEQ,mBAAmB;AACzB,UAAM,QAAQ,CAAC,GAAG,KAAK,YAAY,iBAAiB,EAAE,SAAS,KAAK,CAAC,CAAC,EAAE;AAAA,MACtE,UAAQ,KAAK,QAAQ,YAAY,MAAM;AAAA,IACzC;AAEA,UAAM,QAAQ,CAAC,MAAM,UAAU;AAE7B,YAAM,YAAY,KAAK,cAAc,oBAAoB;AACzD,UAAI,cAAc,MAAM;AAEtB,aAAK,OAAO,KAAK,aAAa,CAAC;AAAA,MACjC,WAAW,UAAU,aAAa,cAAc,GAAG;AAEjD,kBAAU,YAAY,KAAK,aAAa,CAAC;AAAA,MAC3C;AAGA,UAAI,UAAU,MAAM,SAAS,GAAG;AAC9B,aAAK,aAAa,gBAAgB,MAAM;AAAA,MAC1C,OAAO;AACL,aAAK,gBAAgB,cAAc;AAAA,MACrC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,SAAS;AAIP,QAAI,KAAK,iBAAiB,KAAK,SAAS,IAAI,GAAG;AAC7C,WAAK,eAAe,KAAK,SAAS,IAAI;AACtC,WAAK,eAAe,KAAK,MAAM,KAAK,iBAAiB,CAAC;AAAA,IACxD;AAEA,WAAO;AAAA,uDAC4C,KAAK,KAAK;AAAA,4BACrC,KAAK,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,iBAKhC,KAAK,SAAS,IAAI,MAAM,QAAQ,iBAAiB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/E;AACF;AA5EqB,WACZ,SAAyB,CAAC,0BAAiB,yBAAM;AADrC,WAEZ,eAAe,EAAE,gBAAgB,KAAK;AAK9B;AAAA,EAAd,MAAM,MAAM;AAAA,GAPM,WAOJ;AACkB;AAAA,EAAhC,MAAM,wBAAwB;AAAA,GARZ,WAQc;AAMrB;AAAA,EAAX,SAAS;AAAA,GAdS,WAcP;",
  "names": []
}
