{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "components/accordion/accordion.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Accordion",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The header that wraps both the summary and the expand/collapse icon.",
              "name": "header"
            },
            {
              "description": "The container that wraps the summary.",
              "name": "summary"
            },
            {
              "description": "The container that wraps the expand/collapse icons.",
              "name": "summary-icon"
            },
            {
              "description": "The accordion content.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The accordion' main content.",
              "name": ""
            },
            {
              "description": "Optional expand icon to use instead of the default. Works best with `<koerber-icon>`.",
              "name": "expand-icon"
            },
            {
              "description": "Optional collapse icon to use instead of the default. Works best with `<koerber-icon>`.",
              "name": "collapse-icon"
            },
            {
              "description": "Optional left side of the summary - Summary section.",
              "name": "prefix"
            },
            {
              "description": "Optional right side of the summary - Summary section.",
              "name": "suffix"
            },
            {
              "description": "Optional left side of the content - Body section.",
              "name": "prefix-content"
            },
            {
              "description": "Optional right side of the content - Body section.",
              "name": "suffix-content"
            },
            {
              "description": "The accordion' summary. Alternatively, you can use the `summary` attribute.",
              "name": "summary"
            },
            {
              "description": "The accordion' subtitle. Alternatively, you can use the `subtitle` attribute.",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'prefix-content', 'suffix-content')"
            },
            {
              "kind": "field",
              "name": "accordion",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "expandIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the accordion is open. You can toggle this attribute to show and hide the accordion, or you\ncan use the `show()` and `hide()` methods and this attribute will reflect the accordion' open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary to show in the header. If you need to display HTML, use the `summary` slot instead.",
              "attribute": "summary"
            },
            {
              "kind": "field",
              "name": "subtitle",
              "type": {
                "text": "string"
              },
              "description": "The text to complement the title below of them.",
              "attribute": "subtitle"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the accordion so it can't be toggled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The size of the accordion header",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'left'",
              "description": "The direction of which the chevron should be displayed in the summary section",
              "attribute": "direction",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSummaryClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSummaryKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the accordion."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the accordion"
            }
          ],
          "events": [
            {
              "description": "Emitted when the accordion opens.",
              "name": "koerber-show"
            },
            {
              "description": "Emitted after the accordion opens and all animations are complete.",
              "name": "koerber-after-show"
            },
            {
              "description": "Emitted when the accordion closes.",
              "name": "koerber-hide"
            },
            {
              "description": "Emitted after the accordion closes and all animations are complete.",
              "name": "koerber-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the accordion is open. You can toggle this attribute to show and hide the accordion, or you\ncan use the `show()` and `hide()` methods and this attribute will reflect the accordion' open state.",
              "fieldName": "open"
            },
            {
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary to show in the header. If you need to display HTML, use the `summary` slot instead.",
              "fieldName": "summary"
            },
            {
              "name": "subtitle",
              "type": {
                "text": "string"
              },
              "description": "The text to complement the title below of them.",
              "fieldName": "subtitle"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the accordion so it can't be toggled.",
              "fieldName": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The size of the accordion header",
              "fieldName": "size"
            },
            {
              "name": "direction",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'left'",
              "description": "The direction of which the chevron should be displayed in the summary section",
              "fieldName": "direction"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Accordion show a brief summary and expand to show additional content.",
          "tagNameWithoutPrefix": "accordion",
          "tagName": "koerber-accordion",
          "customElement": true,
          "jsDoc": "/**\n * @summary Accordion show a brief summary and expand to show additional content.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-accordion--docs\n * @status stable\n * @since 2.0\n *\n * @dependency koerber-icon\n *\n * @slot - The accordion' main content.\n * @slot expand-icon - Optional expand icon to use instead of the default. Works best with `<koerber-icon>`.\n * @slot collapse-icon - Optional collapse icon to use instead of the default. Works best with `<koerber-icon>`.\n * @slot prefix - Optional left side of the summary - Summary section.\n * @slot suffix - Optional right side of the summary - Summary section.\n * @slot prefix-content - Optional left side of the content - Body section.\n * @slot suffix-content - Optional right side of the content - Body section.\n * @slot summary - The accordion' summary. Alternatively, you can use the `summary` attribute.\n * @slot subtitle - The accordion' subtitle. Alternatively, you can use the `subtitle` attribute.\n *\n * @event koerber-show - Emitted when the accordion opens.\n * @event koerber-after-show - Emitted after the accordion opens and all animations are complete.\n * @event koerber-hide - Emitted when the accordion closes.\n * @event koerber-after-hide - Emitted after the accordion closes and all animations are complete.\n *\n * @csspart base - The component's base wrapper.\n * @csspart header - The header that wraps both the summary and the expand/collapse icon.\n * @csspart summary - The container that wraps the summary.\n * @csspart summary-icon - The container that wraps the expand/collapse icons.\n * @csspart content - The accordion content.\n *\n * @animation accordion.show - The animation to use when showing accordion. You can use `height: auto` with this animation.\n * @animation accordion.hide - The animation to use when hiding accordion. You can use `height: auto` with this animation.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-accordion--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon"
          ],
          "animations": [
            {
              "name": "accordion.show",
              "description": "The animation to use when showing accordion. You can use `height: auto` with this animation."
            },
            {
              "name": "accordion.hide",
              "description": "The animation to use when hiding accordion. You can use `height: auto` with this animation."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Accordion",
            "module": "components/accordion/accordion.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/alert/alert.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Alert",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    'koerber-button': Button\n  }"
            },
            {
              "kind": "field",
              "name": "autoHideTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(\n    this,\n    '[default]',\n    'icon',\n    'action-primary',\n    'action-secondary'\n  )"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "isTextOverflowing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Indicates whether the current text on the alert exceeds its bounds and the maximum number of lines"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can toggle this attribute to show and hide the alert, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the alert's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables a close button that allows the user to dismiss the alert.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "| 'info'\n    | 'success'\n    | 'warning'\n    | 'danger'\n    | 'alt-info'\n    | 'alt-success'\n    | 'alt-warning'\n    | 'alt-danger'"
              },
              "default": "'info'",
              "description": "The alert's theme variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "actionsPlacement",
              "type": {
                "text": "'inline' | 'footer'"
              },
              "default": "'inline'",
              "description": "Set wether actions should be rendered bottom or inline with main content",
              "attribute": "actions-placement"
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "Infinity",
              "description": "The length of time, in milliseconds (ms), the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `5000` ms, meaning\nthe alert will not close after 5 seconds.",
              "attribute": "duration"
            },
            {
              "kind": "method",
              "name": "restartAutoHide",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCloseClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toast",
              "description": "Displays the alert as a toast alert. This will move the alert out of its position in the DOM and, when dismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by calling this method again. The returned promise will resolve after the alert is hidden."
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleDurationChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the alert."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the alert"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can toggle this attribute to show and hide the alert, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the alert's open state.",
              "fieldName": "open"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables a close button that allows the user to dismiss the alert.",
              "fieldName": "closable"
            },
            {
              "name": "variant",
              "type": {
                "text": "| 'info'\n    | 'success'\n    | 'warning'\n    | 'danger'\n    | 'alt-info'\n    | 'alt-success'\n    | 'alt-warning'\n    | 'alt-danger'"
              },
              "default": "'info'",
              "description": "The alert's theme variant.",
              "fieldName": "variant"
            },
            {
              "name": "actions-placement",
              "type": {
                "text": "'inline' | 'footer'"
              },
              "default": "'inline'",
              "description": "Set wether actions should be rendered bottom or inline with main content",
              "fieldName": "actionsPlacement"
            },
            {
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "Infinity",
              "description": "The length of time, in milliseconds (ms), the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `5000` ms, meaning\nthe alert will not close after 5 seconds.",
              "resolveInitializer": {
                "module": "src/components/alert/alert.component.ts"
              },
              "fieldName": "duration"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "tagNameWithoutPrefix": "alert",
          "tagName": "koerber-alert",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Alert",
            "module": "components/alert/alert.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/animation/animation.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "KoerberAnimation",
          "slots": [
            {
              "description": "The element to animate. Avoid slotting in more than one element, as subsequent ones will be ignored. To animate multiple elements, either wrap them in a single container or use multiple `<koerber-animation>` elements.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasStarted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "Promise<HTMLSlotElement>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This attribute will be automatically removed when\nthe animation finishes or gets canceled.",
              "attribute": "play",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "attribute": "delay"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "'normal'",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.\n[Learn more](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction)",
              "attribute": "direction"
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "attribute": "duration"
            },
            {
              "kind": "field",
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "'linear'",
              "description": "The easing function to use for the animation. This can be a Shoelace easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
              "attribute": "easing"
            },
            {
              "kind": "field",
              "name": "endDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "attribute": "end-delay"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "'auto'",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "iterations",
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
              "attribute": "iterations"
            },
            {
              "kind": "field",
              "name": "iterationStart",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "attribute": "iteration-start"
            },
            {
              "kind": "field",
              "name": "keyframes",
              "type": {
                "text": "Keyframe[] | undefined"
              },
              "description": "The keyframes to use for the animation. If this is set, `name` will be ignored."
            },
            {
              "kind": "field",
              "name": "playbackRate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
              "attribute": "playback-rate"
            },
            {
              "kind": "field",
              "name": "currentTime",
              "type": {
                "text": "CSSNumberish"
              },
              "description": "Gets and sets the current animation time."
            },
            {
              "kind": "method",
              "name": "handleAnimationFinish",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAnimationCancel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createAnimation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "destroyAnimation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAnimationChange"
            },
            {
              "kind": "method",
              "name": "handlePlayChange"
            },
            {
              "kind": "method",
              "name": "handlePlaybackRateChange"
            },
            {
              "kind": "method",
              "name": "cancel",
              "description": "Clears all keyframe effects caused by this animation and aborts its playback."
            },
            {
              "kind": "method",
              "name": "finish",
              "description": "Sets the playback time to the end of the animation corresponding to the current playback direction."
            }
          ],
          "events": [
            {
              "description": "Emitted when the animation is canceled.",
              "name": "koerber-cancel"
            },
            {
              "description": "Emitted when the animation finishes.",
              "name": "koerber-finish"
            },
            {
              "description": "Emitted when the animation starts or restarts.",
              "name": "koerber-start"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
              "fieldName": "name"
            },
            {
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This attribute will be automatically removed when\nthe animation finishes or gets canceled.",
              "fieldName": "play"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "fieldName": "delay"
            },
            {
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "'normal'",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.\n[Learn more](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction)",
              "fieldName": "direction"
            },
            {
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "fieldName": "duration"
            },
            {
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "'linear'",
              "description": "The easing function to use for the animation. This can be a Shoelace easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
              "fieldName": "easing"
            },
            {
              "name": "end-delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "fieldName": "endDelay"
            },
            {
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "'auto'",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "fieldName": "fill"
            },
            {
              "name": "iterations",
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
              "resolveInitializer": {
                "module": "src/components/animation/animation.component.ts"
              },
              "fieldName": "iterations"
            },
            {
              "name": "iteration-start",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "fieldName": "iterationStart"
            },
            {
              "name": "playback-rate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
              "fieldName": "playbackRate"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Animate elements declaratively with nearly 100 baked-in presets, or roll your own with custom keyframes. Powered by the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).",
          "tagNameWithoutPrefix": "animation",
          "tagName": "koerber-animation",
          "customElement": true,
          "jsDoc": "/**\n * @summary Animate elements declaratively with nearly 100 baked-in presets, or roll your own with custom keyframes. Powered by the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n * @status stable\n * @since 2.0\n *\n * @event koerber-cancel - Emitted when the animation is canceled.\n * @event koerber-finish - Emitted when the animation finishes.\n * @event koerber-start - Emitted when the animation starts or restarts.\n *\n * @slot - The element to animate. Avoid slotting in more than one element, as subsequent ones will be ignored. To\n *  animate multiple elements, either wrap them in a single container or use multiple `<koerber-animation>` elements.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "KoerberAnimation",
            "module": "components/animation/animation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/avatar/avatar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Avatar",
          "cssProperties": [
            {
              "description": "The size of the avatar.",
              "name": "--size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the avatar's icon.",
              "name": "icon"
            },
            {
              "description": "The container that wraps the avatar's initials.",
              "name": "initials"
            },
            {
              "description": "The avatar image. Only shown when the `image` attribute is set.",
              "name": "image"
            }
          ],
          "slots": [
            {
              "description": "The default icon to use when no image or initials are present. Works best with `<koerber-icon>`.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    'koerber-icon': Icon,\n    'koerber-badge': Badge\n  }"
            },
            {
              "kind": "field",
              "name": "avatar",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Check if the image has an error on its download"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Focus state on component"
            },
            {
              "kind": "field",
              "name": "image",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The image source to use for the avatar.",
              "attribute": "image"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "'account'",
              "description": "Icon name attribute",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use to describe the avatar to assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "'eager' | 'lazy'"
              },
              "default": "'eager'",
              "description": "Indicates how the browser should load the image.",
              "attribute": "loading"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Indicates how the browser should load the image.",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "handleImageChange"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates click on the component"
            },
            {
              "kind": "method",
              "name": "press",
              "parameters": [
                {
                  "name": "time",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Simulates the component press certain amount of time in mil-seconds"
            }
          ],
          "attributes": [
            {
              "name": "image",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The image source to use for the avatar.",
              "fieldName": "image"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "'account'",
              "description": "Icon name attribute",
              "fieldName": "icon"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use to describe the avatar to assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "fieldName": "initials"
            },
            {
              "name": "loading",
              "type": {
                "text": "'eager' | 'lazy'"
              },
              "default": "'eager'",
              "description": "Indicates how the browser should load the image.",
              "fieldName": "loading"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Indicates how the browser should load the image.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Avatars are used to represent a person or object.",
          "tagNameWithoutPrefix": "avatar",
          "tagName": "koerber-avatar",
          "customElement": true,
          "jsDoc": "/**\n * @summary Avatars are used to represent a person or object.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-avatar--docs\n * @status stable\n * @since 2.0\n *\n * @dependency koerber-icon\n * @dependency koerber-badge\n *\n * @slot icon - The default icon to use when no image or initials are present. Works best with `<koerber-icon>`.\n *\n * @csspart base - The component's base wrapper.\n * @csspart icon - The container that wraps the avatar's icon.\n * @csspart initials - The container that wraps the avatar's initials.\n * @csspart image - The avatar image. Only shown when the `image` attribute is set.\n *\n * @cssproperty --size - The size of the avatar.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-avatar--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon",
            "koerber-badge"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Avatar",
            "module": "components/avatar/avatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/badge/badge.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Badge",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The chip's label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The badge's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'extra-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The badge's theme variant.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'extra-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The badge's theme variant.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Badges are used to draw attention and display statuses or counts.",
          "tagNameWithoutPrefix": "badge",
          "tagName": "koerber-badge",
          "customElement": true,
          "jsDoc": "/**\n * @summary Badges are used to draw attention and display statuses or counts.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-badge--docs\n * @status stable\n * @since 2.0\n *\n * @slot - The badge's content.\n *\n * @csspart base - The component's base wrapper.\n * @csspart label - The chip's label.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-badge--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Badge",
            "module": "components/badge/badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/breadcrumb/breadcrumb.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Breadcrumb",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more breadcrumb items to display.",
              "name": ""
            },
            {
              "description": "The separator to use between breadcrumb items. Works best with `<koerber-icon>`.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "separatorDir",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "separatorSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label to use for the breadcrumb control. This will not be shown on the screen, but it will be announced by\nscreen readers and other assistive devices to provide more context for users.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getSeparator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label to use for the breadcrumb control. This will not be shown on the screen, but it will be announced by\nscreen readers and other assistive devices to provide more context for users.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Breadcrumbs provide a group of links so users can easily navigate a website's hierarchy.",
          "tagNameWithoutPrefix": "breadcrumb",
          "tagName": "koerber-breadcrumb",
          "customElement": true,
          "jsDoc": "/**\n * @summary Breadcrumbs provide a group of links so users can easily navigate a website's hierarchy.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-breadcrumb--docs\n * @status stable\n * @since 2.0\n *\n * @slot - One or more breadcrumb items to display.\n * @slot separator - The separator to use between breadcrumb items. Works best with `<koerber-icon>`.\n *\n * @dependency koerber-icon\n *\n * @csspart base - The component's base wrapper.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-breadcrumb--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Breadcrumb",
            "module": "components/breadcrumb/breadcrumb.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/breadcrumb-item/breadcrumb-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BreadcrumbItem",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The breadcrumb item's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            },
            {
              "description": "The container that wraps the separator.",
              "name": "separator"
            }
          ],
          "slots": [
            {
              "description": "The breadcrumb item's label.",
              "name": ""
            },
            {
              "description": "An optional prefix, usually an icon or icon button.",
              "name": "prefix"
            },
            {
              "description": "An optional suffix, usually an icon or icon button.",
              "name": "suffix"
            },
            {
              "description": "The separator to use for the breadcrumb item. This will only change the separator for this item. If you want to change it for all items in the group, set the separator on `<koerber-breadcrumb>` instead.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'prefix', 'suffix')"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isTextOverflowing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "maxWidth",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Indicates the max width of the item text",
              "attribute": "max-width"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\r\ninternally. When unset, a button will be rendered instead.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "isActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Check if the item is the current Active",
              "attribute": "active"
            },
            {
              "kind": "field",
              "name": "labelContentSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "attachOverflowObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "checkIfTextIsTruncated",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getTextContentExcludingSlots",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "max-width",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Indicates the max width of the item text",
              "fieldName": "maxWidth"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\r\ninternally. When unset, a button will be rendered instead.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "fieldName": "rel"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Check if the item is the current Active",
              "fieldName": "isActive"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Breadcrumb Items are used inside [breadcrumbs](/components/breadcrumb) to represent different links.",
          "tagNameWithoutPrefix": "breadcrumb-item",
          "tagName": "koerber-breadcrumb-item",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Breadcrumb Items are used inside [breadcrumbs](/components/breadcrumb) to represent different links.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-breadcrumb-item--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The breadcrumb item's label.\r\n * @slot prefix - An optional prefix, usually an icon or icon button.\r\n * @slot suffix - An optional suffix, usually an icon or icon button.\r\n * @slot separator - The separator to use for the breadcrumb item. This will only change the separator for this item. If\r\n * you want to change it for all items in the group, set the separator on `<koerber-breadcrumb>` instead.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart label - The breadcrumb item's label.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart suffix - The container that wraps the suffix.\r\n * @csspart separator - The container that wraps the separator.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-breadcrumb-item--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "BreadcrumbItem",
            "module": "components/breadcrumb-item/breadcrumb-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button/button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Button",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            },
            {
              "description": "The button's caret icon, an `<koerber-icon>` element.",
              "name": "caret"
            }
          ],
          "slots": [
            {
              "description": "The button's label.",
              "name": ""
            },
            {
              "description": "A presentational prefix icon or similar element.",
              "name": "prefix"
            },
            {
              "description": "A presentational suffix icon or similar element.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon, 'koerber-spinner': Spinner }"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'prefix', 'suffix')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'button'",
              "description": "The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native\r\n`<button>` elements behave. When the type is `submit`, the button will submit the surrounding form."
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "| 'primary'\r\n    | 'secondary'\r\n    | 'tertiary'\r\n    | 'ghost'\r\n    | 'danger'\r\n    | 'secondary-danger'\r\n    | 'ghost-danger'"
              },
              "default": "'primary'",
              "description": "The button's theme variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior.",
              "attribute": "caret",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\r\nThis attribute is ignored when `href` is present.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\r\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleHostClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button."
            }
          ],
          "events": [
            {
              "description": "Emitted when the button loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the button gains focus.",
              "name": "koerber-focus"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "variant",
              "type": {
                "text": "| 'primary'\r\n    | 'secondary'\r\n    | 'tertiary'\r\n    | 'ghost'\r\n    | 'danger'\r\n    | 'secondary-danger'\r\n    | 'ghost-danger'"
              },
              "default": "'primary'",
              "description": "The button's theme variant.",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "fieldName": "size"
            },
            {
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior.",
              "fieldName": "caret"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "fieldName": "disabled"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "fieldName": "loading"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\r\nThis attribute is ignored when `href` is present.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\r\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Buttons represent actions that are available to the user.",
          "tagNameWithoutPrefix": "button",
          "tagName": "koerber-button",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Buttons represent actions that are available to the user.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-button--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-spinner\r\n *\r\n * @event koerber-blur - Emitted when the button loses focus.\r\n * @event koerber-focus - Emitted when the button gains focus.\r\n *\r\n * @slot - The button's label.\r\n * @slot prefix - A presentational prefix icon or similar element.\r\n * @slot suffix - A presentational suffix icon or similar element.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart label - The button's label.\r\n * @csspart suffix - The container that wraps the suffix.\r\n * @csspart caret - The button's caret icon, an `<koerber-icon>` element.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-button--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon",
            "koerber-spinner"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Button",
            "module": "components/button/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button-group/button-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ButtonGroup",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more `<koerber-button>` elements to display in the button group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "disableRole",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use for the button group. This won't be displayed on the screen, but it will be announced by assistive\ndevices when interacting with the control and is strongly recommended.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "split",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "split"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use for the button group. This won't be displayed on the screen, but it will be announced by assistive\ndevices when interacting with the control and is strongly recommended.",
              "fieldName": "label"
            },
            {
              "name": "split",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "split"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Button groups can be used to group related buttons into sections.",
          "tagNameWithoutPrefix": "button-group",
          "tagName": "koerber-button-group",
          "customElement": true,
          "jsDoc": "/**\n * @summary Button groups can be used to group related buttons into sections.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n * @status stable\n * @since 2.0\n *\n * @slot - One or more `<koerber-button>` elements to display in the button group.\n *\n * @csspart base - The component's base wrapper.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ButtonGroup",
            "module": "components/button-group/button-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/card/card.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Card",
          "cssProperties": [
            {
              "description": "The card's border color, including borders that occur inside the card.",
              "name": "--border-color"
            },
            {
              "description": "The border radius for the card's edges.",
              "name": "--border-radius"
            },
            {
              "description": "The width of the card's borders.",
              "name": "--border-width"
            },
            {
              "description": "The padding to use for the card's sections.",
              "name": "--padding"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the card's image.",
              "name": "image"
            },
            {
              "description": "The container that wraps the card's header.",
              "name": "header"
            },
            {
              "description": "The container that wraps the card's main content.",
              "name": "body"
            },
            {
              "description": "The container that wraps the card's footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The card's main content.",
              "name": ""
            },
            {
              "description": "An optional header for the card.",
              "name": "header"
            },
            {
              "description": "An optional footer for the card.",
              "name": "footer"
            },
            {
              "description": "An optional image to render at the start of the card.",
              "name": "image"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'footer', 'header', 'image')"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Cards can be used to group related subjects in a container.",
          "tagNameWithoutPrefix": "card",
          "tagName": "koerber-card",
          "customElement": true,
          "jsDoc": "/**\n * @summary Cards can be used to group related subjects in a container.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-card--docs\n * @status stable\n * @since 2.0\n *\n * @slot - The card's main content.\n * @slot header - An optional header for the card.\n * @slot footer - An optional footer for the card.\n * @slot image - An optional image to render at the start of the card.\n *\n * @csspart base - The component's base wrapper.\n * @csspart image - The container that wraps the card's image.\n * @csspart header - The container that wraps the card's header.\n * @csspart body - The container that wraps the card's main content.\n * @csspart footer - The container that wraps the card's footer.\n *\n * @cssproperty --border-color - The card's border color, including borders that occur inside the card.\n * @cssproperty --border-radius - The border radius for the card's edges.\n * @cssproperty --border-width - The width of the card's borders.\n * @cssproperty --padding - The padding to use for the card's sections.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-card--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Card",
            "module": "components/card/card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/checkbox/checkbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Checkbox",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The square container that wraps the checkbox's checked state.",
              "name": "control"
            },
            {
              "description": "Matches the control part when the checkbox is checked.",
              "name": "control--checked"
            },
            {
              "description": "Matches the control part when the checkbox is indeterminate.",
              "name": "control--indeterminate"
            },
            {
              "description": "The checked icon, an `<koerber-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "The indeterminate icon, an `<koerber-icon>` element.",
              "name": "indeterminate-icon"
            },
            {
              "description": "The container that wraps the checkbox's label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The checkbox's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon }"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label of the checkbox.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'standard' | 'comfortable'"
              },
              "default": "'standard'",
              "description": "The checkbox's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\r\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "attribute": "error"
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "attribute": "accessible-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleDescription",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "attribute": "accessible-description",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleWrapperClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "simulateSpacebarPress",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox."
            }
          ],
          "events": [
            {
              "description": "Emitted when the checkbox loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the checked state changes.",
              "name": "koerber-change"
            },
            {
              "description": "Emitted when the checkbox gains focus.",
              "name": "koerber-focus"
            },
            {
              "description": "Emitted when the checkbox receives input.",
              "name": "koerber-input"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label of the checkbox.",
              "fieldName": "label"
            },
            {
              "name": "size",
              "type": {
                "text": "'standard' | 'comfortable'"
              },
              "default": "'standard'",
              "description": "The checkbox's size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox.",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\r\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "fieldName": "indeterminate"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "fieldName": "required"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "fieldName": "error"
            },
            {
              "name": "accessible-name",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "fieldName": "accessibleName"
            },
            {
              "name": "accessible-description",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "fieldName": "accessibleDescription"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Checkboxes allow the user to toggle an option on or off.",
          "tagNameWithoutPrefix": "checkbox",
          "tagName": "koerber-checkbox",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Checkboxes allow the user to toggle an option on or off.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-checkbox--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n *\r\n * @slot - The checkbox's label.\r\n *\r\n * @event koerber-blur - Emitted when the checkbox loses focus.\r\n * @event koerber-change - Emitted when the checked state changes.\r\n * @event koerber-focus - Emitted when the checkbox gains focus.\r\n * @event koerber-input - Emitted when the checkbox receives input.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart control - The square container that wraps the checkbox's checked state.\r\n * @csspart control--checked - Matches the control part when the checkbox is checked.\r\n * @csspart control--indeterminate - Matches the control part when the checkbox is indeterminate.\r\n * @csspart checked-icon - The checked icon, an `<koerber-icon>` element.\r\n * @csspart indeterminate-icon - The indeterminate icon, an `<koerber-icon>` element.\r\n * @csspart label - The container that wraps the checkbox's label.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-checkbox--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Checkbox",
            "module": "components/checkbox/checkbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/chip/chip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Chip",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The chip's content.",
              "name": "content"
            },
            {
              "description": "The chip's remove button, an `<sl-icon-button>`.",
              "name": "remove-button"
            },
            {
              "description": "The remove button's exported `base` part.",
              "name": "remove-button__base"
            }
          ],
          "slots": [
            {
              "description": "The chip's content.",
              "name": ""
            },
            {
              "description": "Optional next icon to use instead of the default. Works best with `<koerber-icon>`.",
              "name": "next-icon"
            },
            {
              "description": "Optional previous icon to use instead of the default. Works best with `<koerber-icon>`.",
              "name": "previous-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-button': Button }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "chip",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              },
              "description": "The chip element itself"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "The chip's focus state."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The chip's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variants",
              "type": {
                "text": "| 'primary'\n    | 'primary-outline'\n    | 'info'\n    | 'info-outline'\n    | 'danger'\n    | 'danger-outline'\n    | 'tertiary'\n    | 'tertiary-outline'"
              },
              "default": "'info'",
              "description": "The chip's theme variant.",
              "attribute": "variants",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the chip removable and shows a remove button.",
              "attribute": "removable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the chip.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the chip in a selected state.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "prefixIcon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Set the prefixIcon name to render",
              "attribute": "prefix-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "suffixIcon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Set the suffixIcon name to render",
              "attribute": "suffix-icon",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the chip."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the chip."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the chip."
            },
            {
              "kind": "method",
              "name": "delete",
              "description": "Removes the chip."
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleDeleteClick",
              "privacy": "private",
              "description": "Events"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the chip is clicked.",
              "name": "koerber-click"
            },
            {
              "description": "Emitted when the remove button is activated.",
              "name": "koerber-remove"
            },
            {
              "description": "Emitted when the chip gains focus.",
              "name": "koerber-focus"
            },
            {
              "description": "Emitted when the chip loses focus.",
              "name": "koerber-blur"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The chip's size.",
              "fieldName": "size"
            },
            {
              "name": "variants",
              "type": {
                "text": "| 'primary'\n    | 'primary-outline'\n    | 'info'\n    | 'info-outline'\n    | 'danger'\n    | 'danger-outline'\n    | 'tertiary'\n    | 'tertiary-outline'"
              },
              "default": "'info'",
              "description": "The chip's theme variant.",
              "fieldName": "variants"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the chip removable and shows a remove button.",
              "fieldName": "removable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the chip.",
              "fieldName": "disabled"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the chip in a selected state.",
              "fieldName": "selected"
            },
            {
              "name": "prefix-icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Set the prefixIcon name to render",
              "fieldName": "prefixIcon"
            },
            {
              "name": "suffix-icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Set the suffixIcon name to render",
              "fieldName": "suffixIcon"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Chips are used as labels to organize things or to indicate a selection.",
          "tagNameWithoutPrefix": "chip",
          "tagName": "koerber-chip",
          "customElement": true,
          "jsDoc": "/**\n * @summary Chips are used as labels to organize things or to indicate a selection.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-chip--docs\n * @status stable\n * @since 2.0\n *\n * @dependency koerber-icon-button\n * @dependency koerber-icon\n *\n * @slot - The chip's content.\n * @slot next-icon - Optional next icon to use instead of the default. Works best with `<koerber-icon>`.\n * @slot previous-icon - Optional previous icon to use instead of the default. Works best with `<koerber-icon>`.\n *\n * @event koerber-click - Emitted when the chip is clicked.\n * @event koerber-remove - Emitted when the remove button is activated.\n * @event koerber-focus - Emitted when the chip gains focus.\n * @event koerber-blur - Emitted when the chip loses focus.\n *\n * @method click - Simulates a click on the chip.\n * @method focus - Sets focus on the chip.\n * @method blur - Removes focus from the chip.\n * @method delete - Removes the chip.\n *\n *\n * @csspart base - The component's base wrapper.\n * @csspart content - The chip's content.\n * @csspart remove-button - The chip's remove button, an `<sl-icon-button>`.\n * @csspart remove-button__base - The remove button's exported `base` part.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-chip--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon-button",
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Chip",
            "module": "components/chip/chip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/divider/divider.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Divider",
          "cssProperties": [
            {
              "description": "The color of the divider.",
              "name": "--color"
            },
            {
              "description": "The width of the divider.",
              "name": "--width"
            },
            {
              "description": "The spacing of the divider.",
              "name": "--spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'secondary'"
              },
              "default": "'primary'",
              "description": "The divider's theme variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the divider in a vertical orientation.",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The width of the divider.",
              "attribute": "width",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleVerticalChange"
            },
            {
              "kind": "method",
              "name": "handleVariantChange"
            },
            {
              "kind": "method",
              "name": "handleWidthChange"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'secondary'"
              },
              "default": "'primary'",
              "description": "The divider's theme variant.",
              "fieldName": "variant"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the divider in a vertical orientation.",
              "fieldName": "vertical"
            },
            {
              "name": "width",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The width of the divider.",
              "fieldName": "width"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Dividers are used to visually separate or group elements.",
          "tagNameWithoutPrefix": "divider",
          "tagName": "koerber-divider",
          "customElement": true,
          "jsDoc": "/**\n * @summary Dividers are used to visually separate or group elements.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-divider--docs\n * @status stable\n * @since 2.0\n *\n * @cssproperty --color - The color of the divider.\n * @cssproperty --width - The width of the divider.\n * @cssproperty --spacing - The spacing of the divider.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-divider--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Divider",
            "module": "components/divider/divider.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/drawer/drawer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Drawer",
          "cssProperties": [
            {
              "description": "The z-index for contained (non-modal) drawer.",
              "name": "--koerber-drawer-contained-z-index"
            },
            {
              "description": "The z-index for modal drawer.",
              "name": "--koerber-drawer-z-index"
            },
            {
              "description": "The max width for drawer with small size.",
              "name": "--koerber-drawer-small-max-width"
            },
            {
              "description": "The max width for drawer with large size.",
              "name": "--koerber-drawer-large-max-width"
            },
            {
              "description": "The amount of padding to use for the header.",
              "name": "--koerber-drawer-header-spacing"
            },
            {
              "description": "The amount of padding to use for the body.",
              "name": "--koerber-drawer-body-spacing"
            },
            {
              "description": "The amount of padding to use for the footer.",
              "name": "--koerber-drawer-footer-spacing"
            },
            {
              "description": "The amount of margin to use for the panel.",
              "name": "--koerber-drawer-panel-spacing:"
            },
            {
              "description": "The background color of the overlay.",
              "name": "--koerber-drawer-overlay-color"
            },
            {
              "description": "The target opacity of the overlay in percents.",
              "name": "--koerber-drawer-overlay-opacity"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The overlay that covers the screen behind the drawer.",
              "name": "overlay"
            },
            {
              "description": "The drawer's panel (where the drawer and its content are rendered).",
              "name": "panel"
            },
            {
              "description": "The drawer's header. This element wraps the title and header actions.",
              "name": "header"
            },
            {
              "description": "Optional icon to add to the header before the label. Works best with `<koerber-icon>`.",
              "name": "icon"
            },
            {
              "description": "The drawer's title.",
              "name": "title"
            },
            {
              "description": "The close button, an `<koerber-icon-button>`.",
              "name": "close-button"
            },
            {
              "description": "The close button's exported `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "The drawer's body.",
              "name": "body"
            },
            {
              "description": "The drawer's footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The drawer's main content.",
              "name": ""
            },
            {
              "description": "Optional icon to add to the icon before the label. Works best with `<koerber-icon>`.",
              "name": "icon"
            },
            {
              "description": "The drawer's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "The drawer's footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon-button': IconButton }"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'footer', 'icon')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "modal",
              "privacy": "public",
              "default": "new Modal(this)",
              "description": "Exposes the internal modal utility that controls focus trapping. To temporarily disable focus trapping and allow third-party modals spawned from an active modal, call `modal.activateExternal()` when the third-party modal opens. Upon closing, call `modal.deactivateExternal()` to restore Shoelace's focus trapping."
            },
            {
              "kind": "field",
              "name": "drawer",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can toggle this attribute to show and hide the drawer, or you can\r\nuse the `show()` and `hide()` methods and this attribute will reflect the drawer's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The drawer's label as displayed in the header. You should always include a relevant label even when using\r\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'end' | 'start'"
              },
              "default": "'end'",
              "description": "The direction from which the drawer will open.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'large'"
              },
              "default": "'small'",
              "description": "The drawer's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\r\nits parent element, set this attribute and add `position: relative` to the parent.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy,\r\naccessible way for users to dismiss the drawer.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "'close-button' | 'keyboard' | 'overlay'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleNoModalChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the drawer."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the drawer"
            }
          ],
          "events": [
            {
              "description": "Emitted when the drawer opens.",
              "name": "koerber-show"
            },
            {
              "description": "Emitted after the drawer opens and all animations are complete.",
              "name": "koerber-after-show"
            },
            {
              "description": "Emitted when the drawer closes.",
              "name": "koerber-hide"
            },
            {
              "description": "Emitted after the drawer closes and all animations are complete.",
              "name": "koerber-after-hide"
            },
            {
              "description": "Emitted when the drawer opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.",
              "name": "koerber-initial-focus"
            },
            {
              "description": "Emitted when the user attempts to close the drawer by clicking the close button, clicking the overlay, or pressing escape. Calling `event.preventDefault()` will keep the drawer open. Avoid using this unless closing the drawer will result in destructive behavior such as data loss.",
              "name": "koerber-request-close"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can toggle this attribute to show and hide the drawer, or you can\r\nuse the `show()` and `hide()` methods and this attribute will reflect the drawer's open state.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The drawer's label as displayed in the header. You should always include a relevant label even when using\r\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": {
                "text": "'end' | 'start'"
              },
              "default": "'end'",
              "description": "The direction from which the drawer will open.",
              "fieldName": "placement"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'large'"
              },
              "default": "'small'",
              "description": "The drawer's size.",
              "fieldName": "size"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\r\nits parent element, set this attribute and add `position: relative` to the parent.",
              "fieldName": "contained"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy,\r\naccessible way for users to dismiss the drawer.",
              "fieldName": "noHeader"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Drawers slide in from a container to expose additional options and information.",
          "tagNameWithoutPrefix": "drawer",
          "tagName": "koerber-drawer",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Drawers slide in from a container to expose additional options and information.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-drawer--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon-button\r\n *\r\n * @slot - The drawer's main content.\r\n * @slot icon - Optional icon to add to the icon before the label. Works best with `<koerber-icon>`.\r\n * @slot label - The drawer's label. Alternatively, you can use the `label` attribute.\r\n * @slot footer - The drawer's footer, usually one or more buttons representing various options.\r\n *\r\n * @event koerber-show - Emitted when the drawer opens.\r\n * @event koerber-after-show - Emitted after the drawer opens and all animations are complete.\r\n * @event koerber-hide - Emitted when the drawer closes.\r\n * @event koerber-after-hide - Emitted after the drawer closes and all animations are complete.\r\n * @event koerber-initial-focus - Emitted when the drawer opens and is ready to receive focus. Calling\r\n *   `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.\r\n * @event koerber-request-close - Emitted when the user attempts to\r\n *   close the drawer by clicking the close button, clicking the overlay, or pressing escape. Calling\r\n *   `event.preventDefault()` will keep the drawer open. Avoid using this unless closing the drawer will result in\r\n *   destructive behavior such as data loss.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart overlay - The overlay that covers the screen behind the drawer.\r\n * @csspart panel - The drawer's panel (where the drawer and its content are rendered).\r\n * @csspart header - The drawer's header. This element wraps the title and header actions.\r\n * @csspart icon - Optional icon to add to the header before the label. Works best with `<koerber-icon>`.\r\n * @csspart title - The drawer's title.\r\n * @csspart close-button - The close button, an `<koerber-icon-button>`.\r\n * @csspart close-button__base - The close button's exported `base` part.\r\n * @csspart body - The drawer's body.\r\n * @csspart footer - The drawer's footer.\r\n *\r\n * @cssproperty --koerber-drawer-contained-z-index - The z-index for contained (non-modal) drawer.\r\n * @cssproperty --koerber-drawer-z-index - The z-index for modal drawer.\r\n * @cssproperty --koerber-drawer-small-max-width - The max width for drawer with small size.\r\n * @cssproperty --koerber-drawer-large-max-width - The max width for drawer with large size.\r\n * @cssproperty --koerber-drawer-header-spacing - The amount of padding to use for the header.\r\n * @cssproperty --koerber-drawer-body-spacing - The amount of padding to use for the body.\r\n * @cssproperty --koerber-drawer-footer-spacing - The amount of padding to use for the footer.\r\n * @cssproperty --koerber-drawer-panel-spacing: - The amount of margin to use for the panel.\r\n * @cssproperty --koerber-drawer-overlay-color - The background color of the overlay.\r\n * @cssproperty --koerber-drawer-overlay-opacity - The target opacity of the overlay in percents.\r\n *\r\n * @animation drawer.showEnd - The animation to use when showing a drawer with `end` placement.\r\n * @animation drawer.showStart - The animation to use when showing a drawer with `start` placement.\r\n * @animation drawer.hideEnd - The animation to use when hiding a drawer with `end` placement.\r\n * @animation drawer.hideStart - The animation to use when hiding a drawer with `start` placement.\r\n * @animation drawer.denyClose - The animation to use when a request to close the drawer is denied.\r\n * @animation drawer.overlay.show - The animation to use when showing the drawer's overlay.\r\n * @animation drawer.overlay.hide - The animation to use when hiding the drawer's overlay.\r\n *\r\n * @property modal - Exposes the internal modal utility that controls focus trapping. To temporarily disable focus\r\n *   trapping and allow third-party modals spawned from an active modal, call `modal.activateExternal()` when\r\n *   the third-party modal opens. Upon closing, call `modal.deactivateExternal()` to restore Shoelace's focus trapping.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-drawer--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon-button"
          ],
          "animations": [
            {
              "name": "drawer.showEnd",
              "description": "The animation to use when showing a drawer with `end` placement."
            },
            {
              "name": "drawer.showStart",
              "description": "The animation to use when showing a drawer with `start` placement."
            },
            {
              "name": "drawer.hideEnd",
              "description": "The animation to use when hiding a drawer with `end` placement."
            },
            {
              "name": "drawer.hideStart",
              "description": "The animation to use when hiding a drawer with `start` placement."
            },
            {
              "name": "drawer.denyClose",
              "description": "The animation to use when a request to close the drawer is denied."
            },
            {
              "name": "drawer.overlay.show",
              "description": "The animation to use when showing the drawer's overlay."
            },
            {
              "name": "drawer.overlay.hide",
              "description": "The animation to use when hiding the drawer's overlay."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Drawer",
            "module": "components/drawer/drawer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown/dropdown.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Dropdown",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the trigger.",
              "name": "trigger"
            },
            {
              "description": "The panel that gets shown when the dropdown is open.",
              "name": "panel"
            }
          ],
          "slots": [
            {
              "description": "The dropdown's main content.",
              "name": ""
            },
            {
              "description": "The dropdown's trigger, usually a `<koerber-button>` element.",
              "name": "trigger"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "Popup"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dropdown is open. You can toggle this attribute to show and hide the dropdown, or you\r\ncan use the `show()` and `hide()` methods and this attribute will reflect the dropdown's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\r\n    | 'top-start'\r\n    | 'top-end'\r\n    | 'bottom'\r\n    | 'bottom-start'\r\n    | 'bottom-end'\r\n    | 'right'\r\n    | 'right-start'\r\n    | 'right-end'\r\n    | 'left'\r\n    | 'left-start'\r\n    | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\r\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the dropdown so the panel will not open.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stayOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\r\ndropdowns that allow for multiple interactions.",
              "attribute": "stay-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "containingElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The dropdown will close when the user interacts outside of this element (e.g. clicking). Useful for composing other\r\ncomponents that use a dropdown internally."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\r\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both' | undefined"
              },
              "default": "undefined",
              "description": "Syncs the popup width or height to that of the trigger element.",
              "attribute": "sync",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "buttonWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusOnTrigger"
            },
            {
              "kind": "method",
              "name": "getMenu"
            },
            {
              "kind": "field",
              "name": "handleKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handlePanelSelect",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTriggerClick"
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyUp",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerSlotChange"
            },
            {
              "kind": "method",
              "name": "updateAccessibleTrigger"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dropdown panel."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dropdown panel"
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu is activated."
            },
            {
              "kind": "method",
              "name": "addOpenListeners"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the dropdown opens.",
              "name": "koerber-show"
            },
            {
              "description": "Emitted after the dropdown opens and all animations are complete.",
              "name": "koerber-after-show"
            },
            {
              "description": "Emitted when the dropdown closes.",
              "name": "koerber-hide"
            },
            {
              "description": "Emitted after the dropdown closes and all animations are complete.",
              "name": "koerber-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dropdown is open. You can toggle this attribute to show and hide the dropdown, or you\r\ncan use the `show()` and `hide()` methods and this attribute will reflect the dropdown's open state.",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top'\r\n    | 'top-start'\r\n    | 'top-end'\r\n    | 'bottom'\r\n    | 'bottom-start'\r\n    | 'bottom-end'\r\n    | 'right'\r\n    | 'right-start'\r\n    | 'right-end'\r\n    | 'left'\r\n    | 'left-start'\r\n    | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\r\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the dropdown so the panel will not open.",
              "fieldName": "disabled"
            },
            {
              "name": "stay-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\r\ndropdowns that allow for multiple interactions.",
              "fieldName": "stayOpenOnSelect"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "fieldName": "skidding"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\r\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both' | undefined"
              },
              "default": "undefined",
              "description": "Syncs the popup width or height to that of the trigger element.",
              "resolveInitializer": {
                "module": "src/components/dropdown/dropdown.component.ts"
              },
              "fieldName": "sync"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Dropdowns expose additional content that \"drops down\" in a panel.",
          "tagNameWithoutPrefix": "dropdown",
          "tagName": "koerber-dropdown",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Dropdowns expose additional content that \"drops down\" in a panel.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-popup\r\n *\r\n * @slot - The dropdown's main content.\r\n * @slot trigger - The dropdown's trigger, usually a `<koerber-button>` element.\r\n *\r\n * @event koerber-show - Emitted when the dropdown opens.\r\n * @event koerber-after-show - Emitted after the dropdown opens and all animations are complete.\r\n * @event koerber-hide - Emitted when the dropdown closes.\r\n * @event koerber-after-hide - Emitted after the dropdown closes and all animations are complete.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart trigger - The container that wraps the trigger.\r\n * @csspart panel - The panel that gets shown when the dropdown is open.\r\n *\r\n * @animation dropdown.show - The animation to use when showing the dropdown.\r\n * @animation dropdown.hide - The animation to use when hiding the dropdown.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-popup"
          ],
          "animations": [
            {
              "name": "dropdown.show",
              "description": "The animation to use when showing the dropdown."
            },
            {
              "name": "dropdown.hide",
              "description": "The animation to use when hiding the dropdown."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Dropdown",
            "module": "components/dropdown/dropdown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/form-field/form-field.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormField",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's form control.",
              "name": "form-control"
            },
            {
              "description": "The component's error wrapper.",
              "name": "error"
            }
          ],
          "slots": [
            {
              "description": "form field control or a suitable display value if in readonly mode.",
              "name": "(default)"
            },
            {
              "description": "provides custom content for the form field before field control. It is used to provide context or enhance functionality.",
              "name": "prefix"
            },
            {
              "description": "provides custom content for the form field before field control. It is used to provide context or enhance functionality.",
              "name": "suffix"
            },
            {
              "description": "custom content for help text.",
              "name": "help-text"
            },
            {
              "description": "custom content for error messages below the field control. can be used to provide form field related error messages",
              "name": "error"
            },
            {
              "description": "custom content for form field footer. can be used to provide additional content after form field control and help-text area.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-form-field-label': FormFieldLabel, 'koerber-form-field-error': FormFieldError }"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "errorSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "suffixSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "_controlElements",
              "type": {
                "text": "HTMLElement[]"
              }
            },
            {
              "kind": "field",
              "name": "_labelElements",
              "type": {
                "text": "HTMLElement[]"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'label', 'error', 'footer')"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form-field's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "string[]"
              },
              "description": "The form-field's set of errors",
              "attribute": "errors",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the component",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valueHint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The Value Hint of the component",
              "attribute": "value-hint"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets if the user input is strictly required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Handles if the form field will contain a tooltip in its label",
              "attribute": "tooltip",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setAccessibilityAttributes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setErrorOnControlElement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "controlElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleErrorSlotChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleErrorsChanged"
            },
            {
              "kind": "method",
              "name": "setErrors",
              "parameters": [
                {
                  "name": "errors",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Sets the errors for the form-field."
            },
            {
              "kind": "method",
              "name": "clearErrors",
              "description": "Clears the errors for the form-field."
            }
          ],
          "attributes": [
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form-field's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "errors",
              "type": {
                "text": "string[]"
              },
              "description": "The form-field's set of errors",
              "fieldName": "errors"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the component",
              "fieldName": "label"
            },
            {
              "name": "value-hint",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The Value Hint of the component",
              "fieldName": "valueHint"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets if the user input is strictly required",
              "fieldName": "required"
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Handles if the form field will contain a tooltip in its label",
              "fieldName": "tooltip"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "tagNameWithoutPrefix": "form-field",
          "tagName": "koerber-form-field",
          "customElement": true,
          "jsDoc": "/**\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n *\r\n * @slot (default) - form field control or a suitable display value if in readonly mode.\r\n * @slot prefix - provides custom content for the form field before field control. It is used to provide context or enhance functionality.\r\n * @slot suffix - provides custom content for the form field before field control. It is used to provide context or enhance functionality.\r\n * @slot help-text - custom content for help text.\r\n * @slot error - custom content for error messages below the field control. can be used to provide form field related error messages\r\n * @slot footer - custom content for form field footer. can be used to provide additional content after form field control and help-text area.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart form-control - The component's form control.\r\n * @csspart error - The component's error wrapper.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FormField",
            "module": "components/form-field/form-field.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/form-field-error/form-field-error.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormFieldError",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The Form field error’s main content.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "tagNameWithoutPrefix": "form-field-error",
          "tagName": "koerber-form-field-error",
          "customElement": true,
          "jsDoc": "/**\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-form-field-error--docs\r\n *\r\n * @slot - The Form field error’s main content.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n *\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-form-field-error--docs"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FormFieldError",
            "module": "components/form-field-error/form-field-error.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/form-field-label/form-field-label.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormFieldLabel",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The form field label container.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The Form field label’s main content.",
              "name": ""
            },
            {
              "description": "Use to display tooltip content for the form field label.",
              "name": "tooltip"
            },
            {
              "description": "Use to mark the form field label as required.",
              "name": "required"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon, 'koerber-tooltip': Tooltip }"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label of the Form Field",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip of the Form field label",
              "attribute": "tooltip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the form field label a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleHidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "accessible-hidden",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleRequiredChange"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label of the Form Field",
              "fieldName": "label"
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip of the Form field label",
              "fieldName": "tooltip"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the form field label a required field.",
              "fieldName": "required"
            },
            {
              "name": "accessible-hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "accessibleHidden"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "tagNameWithoutPrefix": "form-field-label",
          "tagName": "koerber-form-field-label",
          "customElement": true,
          "jsDoc": "/**\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n *\r\n * @slot - The Form field label’s main content.\r\n * @slot tooltip - Use to display tooltip content for the form field label.\r\n * @slot required - Use to mark the form field label as required.\r\n *\r\n * @dependency koerber-icon\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart label - The form field label container.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FormFieldLabel",
            "module": "components/form-field-label/form-field-label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/icon/icon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Icon",
          "cssParts": [
            {
              "description": "The internal SVG element.",
              "name": "svg"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The icon's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title (tooltip) of the attribute",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\nignored by assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getUrl",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLabelChange"
            },
            {
              "kind": "method",
              "name": "setIcon"
            }
          ],
          "events": [
            {
              "description": "Emitted when the icon has loaded.",
              "name": "koerber-load"
            },
            {
              "description": "Emitted when the icon fails to load due to an error.",
              "name": "koerber-error"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw.",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The icon's size.",
              "fieldName": "size"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title (tooltip) of the attribute",
              "fieldName": "title"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\nignored by assistive devices.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Icons are symbols that can be used to represent various options within an application.",
          "tagNameWithoutPrefix": "icon",
          "tagName": "koerber-icon",
          "customElement": true,
          "jsDoc": "/**\n * @summary Icons are symbols that can be used to represent various options within an application.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-icon--docs\n * @status stable\n * @since 1.0\n *\n * @event koerber-load - Emitted when the icon has loaded.\n * @event koerber-error - Emitted when the icon fails to load due to an error.\n *\n * @csspart svg - The internal SVG element.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-icon--docs",
          "status": "stable",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Icon",
            "module": "components/icon/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/icon-button/icon-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IconButton",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon }"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw. Available names depend on the icon library being used.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of a registered custom icon library.",
              "attribute": "library"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file. Be sure you trust the content you are including, as it will be executed as code and\r\ncan result in XSS attacks.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The icon's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description that gets read by assistive devices. For optimal accessibility, you should always include a label\r\nthat describes what the icon button does.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the icon button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the icon button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the icon button."
            }
          ],
          "events": [
            {
              "description": "Emitted when the icon button loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the icon button gains focus.",
              "name": "koerber-focus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw. Available names depend on the icon library being used.",
              "fieldName": "name"
            },
            {
              "name": "library",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of a registered custom icon library.",
              "fieldName": "library"
            },
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file. Be sure you trust the content you are including, as it will be executed as code and\r\ncan result in XSS attacks.",
              "fieldName": "src"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "fieldName": "download"
            },
            {
              "name": "size",
              "type": {
                "text": "'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The icon's size.",
              "fieldName": "size"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description that gets read by assistive devices. For optimal accessibility, you should always include a label\r\nthat describes what the icon button does.",
              "fieldName": "label"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Icons buttons are simple, icon-only buttons that can be used for actions and in toolbars.",
          "tagNameWithoutPrefix": "icon-button",
          "tagName": "koerber-icon-button",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Icons buttons are simple, icon-only buttons that can be used for actions and in toolbars.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n *\r\n * @event koerber-blur - Emitted when the icon button loses focus.\r\n * @event koerber-focus - Emitted when the icon button gains focus.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IconButton",
            "module": "components/icon-button/icon-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/include/include.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Include",
          "members": [
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The location of the HTML file to include. Be sure you trust the content you are including as it will be executed as\ncode and can result in XSS attacks.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              },
              "default": "'cors'",
              "description": "The fetch mode to use.",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "allowScripts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows included scripts to be executed. Be sure you trust the content you are including as it will be executed as\ncode and can result in XSS attacks.",
              "attribute": "allow-scripts"
            },
            {
              "kind": "method",
              "name": "executeScript",
              "privacy": "private",
              "parameters": [
                {
                  "name": "script",
                  "type": {
                    "text": "HTMLScriptElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSrcChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the included file is loaded.",
              "name": "koerber-load"
            },
            {
              "type": {
                "text": "{ status: number }"
              },
              "description": "Emitted when the included file fails to load due to an error.",
              "name": "koerber-error"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The location of the HTML file to include. Be sure you trust the content you are including as it will be executed as\ncode and can result in XSS attacks.",
              "fieldName": "src"
            },
            {
              "name": "mode",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              },
              "default": "'cors'",
              "description": "The fetch mode to use.",
              "fieldName": "mode"
            },
            {
              "name": "allow-scripts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows included scripts to be executed. Be sure you trust the content you are including as it will be executed as\ncode and can result in XSS attacks.",
              "fieldName": "allowScripts"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Includes give you the power to embed external HTML files into the page.",
          "tagNameWithoutPrefix": "include",
          "tagName": "koerber-include",
          "customElement": true,
          "jsDoc": "/**\n * @summary Includes give you the power to embed external HTML files into the page.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n * @status stable\n * @since 2.0\n *\n * @event koerber-load - Emitted when the included file is loaded.\n * @event {{ status: number }} koerber-error - Emitted when the included file fails to load due to an error.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Include",
            "module": "components/include/include.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/input/input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Input",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The internal `<input>` control.",
              "name": "input"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The password toggle button.",
              "name": "password-toggle-button"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Used to prepend a presentational icon or similar element to the input.",
              "name": "prefix"
            },
            {
              "description": "Used to append a presentational icon or similar element to the input.",
              "name": "suffix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "An icon to use in lieu of the default show password icon.",
              "name": "show-password-icon"
            },
            {
              "description": "An icon to use in lieu of the default hide password icon.",
              "name": "hide-password-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon, 'koerber-divider': Divider }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| 'date'\r\n    | 'datetime-local'\r\n    | 'email'\r\n    | 'number'\r\n    | 'password'\r\n    | 'search'\r\n    | 'tel'\r\n    | 'text'\r\n    | 'time'\r\n    | 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "attribute": "error"
            },
            {
              "kind": "field",
              "name": "prefixIcon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Used to define an Icon as a prefix of Input",
              "attribute": "prefix-icon"
            },
            {
              "kind": "field",
              "name": "suffixIcon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Used to define an Icon as a suffix of Input",
              "attribute": "suffix-icon"
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string"
              },
              "description": "Used to define an accessible name for the input",
              "attribute": "accessible-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleDescription",
              "type": {
                "text": "string"
              },
              "description": "Used to define an accessible description for the input",
              "attribute": "accessible-description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted."
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "Gets or sets the current value as a number. Returns `NaN` if the value can't be converted."
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleIncreaseValueClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDecreaseValueClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleStepChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "koerber-change"
            },
            {
              "description": "Emitted when the clear button is activated.",
              "name": "koerber-clear"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "koerber-focus"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "koerber-input"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "type",
              "type": {
                "text": "| 'date'\r\n    | 'datetime-local'\r\n    | 'email'\r\n    | 'number'\r\n    | 'password'\r\n    | 'search'\r\n    | 'tel'\r\n    | 'text'\r\n    | 'time'\r\n    | 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "fieldName": "type"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "fieldName": "size"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "password-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "fieldName": "passwordVisible"
            },
            {
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "fieldName": "step"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "fieldName": "inputmode"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "fieldName": "error"
            },
            {
              "name": "prefix-icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Used to define an Icon as a prefix of Input",
              "fieldName": "prefixIcon"
            },
            {
              "name": "suffix-icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Used to define an Icon as a suffix of Input",
              "fieldName": "suffixIcon"
            },
            {
              "name": "accessible-name",
              "type": {
                "text": "string"
              },
              "description": "Used to define an accessible name for the input",
              "fieldName": "accessibleName"
            },
            {
              "name": "accessible-description",
              "type": {
                "text": "string"
              },
              "description": "Used to define an accessible description for the input",
              "fieldName": "accessibleDescription"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Inputs collect data from the user.",
          "tagNameWithoutPrefix": "input",
          "tagName": "koerber-input",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Inputs collect data from the user.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-input--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n *\r\n * @slot prefix - Used to prepend a presentational icon or similar element to the input.\r\n * @slot suffix - Used to append a presentational icon or similar element to the input.\r\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\r\n * @slot show-password-icon - An icon to use in lieu of the default show password icon.\r\n * @slot hide-password-icon - An icon to use in lieu of the default hide password icon.\r\n *\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-change - Emitted when an alteration to the control's value is committed by the user.\r\n * @event koerber-clear - Emitted when the clear button is activated.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-input - Emitted when the control receives input.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart input - The internal `<input>` control.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart clear-button - The clear button.\r\n * @csspart password-toggle-button - The password toggle button.\r\n * @csspart suffix - The container that wraps the suffix.\r\n\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-input--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Input",
            "module": "components/input/input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/link/link.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Link",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            },
            {
              "description": "The button's caret icon, an `<koerber-icon>` element.",
              "name": "caret"
            }
          ],
          "slots": [
            {
              "description": "The link's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    'koerber-icon': Icon\n  }"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "default": "'_blank'",
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The link's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the link.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "underline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "underline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows the Icon",
              "attribute": "showIcon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "link",
              "type": {
                "text": "HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleHostClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the link."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the link."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the link."
            }
          ],
          "events": [
            {
              "description": "Emitted when the link loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the link gains focus.",
              "name": "koerber-focus"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "string"
              },
              "default": "'_blank'",
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "fieldName": "rel"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The link's size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the link.",
              "fieldName": "disabled"
            },
            {
              "name": "underline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "underline"
            },
            {
              "name": "showIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows the Icon",
              "fieldName": "showIcon"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Links are used as navigational elements.",
          "tagNameWithoutPrefix": "link",
          "tagName": "koerber-link",
          "customElement": true,
          "jsDoc": "/**\n * @summary Links are used as navigational elements.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n *\n * @dependency koerber-icon\n *\n * @event koerber-blur - Emitted when the link loses focus.\n * @event koerber-focus - Emitted when the link gains focus.\n *\n * @slot - The link's label.\n *\n * @csspart base - The component's base wrapper.\n * @csspart prefix - The container that wraps the prefix.\n * @csspart label - The button's label.\n * @csspart suffix - The container that wraps the suffix.\n * @csspart caret - The button's caret icon, an `<koerber-icon>` element.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Link",
            "module": "components/link/link.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/list/list.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "List",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The list's content, includes only list items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The list's size. This size will be applied to all child list-items.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getAllLists",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncListElements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSizeChange"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The list's size. This size will be applied to all child list-items.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "List is used for displaying single-level information/data.",
          "tagNameWithoutPrefix": "list",
          "tagName": "koerber-list",
          "customElement": true,
          "jsDoc": "/**\n * @summary List is used for displaying single-level information/data.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-list--docs\n *\n * @slot - The list's content, includes only list items\n *\n * @csspart base - The component's base wrapper.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-list--docs"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "List",
            "module": "components/list/list.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/list-item/list-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListItem",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "list item's label text.",
              "name": "label"
            },
            {
              "description": "list item's prefix icon or avatar.",
              "name": "prefix"
            },
            {
              "description": "secondary text to the list item.",
              "name": "secondary-text"
            },
            {
              "description": "tertiary text to the list item.",
              "name": "tertiary-text"
            },
            {
              "description": "list item's suffix icon-only button.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-avatar': Avatar, 'koerber-button': Button, 'koerber-icon': Icon }"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label of the list item",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "secondaryText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The secondary text of the list item",
              "attribute": "secondary-text"
            },
            {
              "kind": "field",
              "name": "tertiaryText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tertiary text of the list item",
              "attribute": "tertiary-text"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The size of the list item",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "A unique value to store in the list item. This can be used as a way to identify list items when clicked.",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "getPrefixIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getPrefixAvatar",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncPrefix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getSuffixButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncSuffixButton",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label of the list item",
              "fieldName": "label"
            },
            {
              "name": "secondary-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The secondary text of the list item",
              "fieldName": "secondaryText"
            },
            {
              "name": "tertiary-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tertiary text of the list item",
              "fieldName": "tertiaryText"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The size of the list item",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "A unique value to store in the list item. This can be used as a way to identify list items when clicked.",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "list items provide options for the user to select in a list.",
          "tagNameWithoutPrefix": "list-item",
          "tagName": "koerber-list-item",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary list items provide options for the user to select in a list.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-list-item--docs\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-button\r\n * @dependency koerber-avatar\r\n *\r\n * @slot label - list item's label text.\r\n * @slot prefix - list item's prefix icon or avatar.\r\n * @slot secondary-text - secondary text to the list item.\r\n * @slot tertiary-text - tertiary text to the list item.\r\n * @slot suffix - list item's suffix icon-only button.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-list-item--docs",
          "dependencies": [
            "koerber-icon",
            "koerber-button",
            "koerber-avatar"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ListItem",
            "module": "components/list-item/list-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/menu/menu.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Menu",
          "slots": [
            {
              "description": "The menu's content, including menu items, menu labels, and dividers.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isMenuItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ item: MenuItem }"
              },
              "description": "Emitted when a menu item is selected.",
              "name": "koerber-select"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Menus provide a list of options for the user to choose from.",
          "tagNameWithoutPrefix": "menu",
          "tagName": "koerber-menu",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Menus provide a list of options for the user to choose from.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The menu's content, including menu items, menu labels, and dividers.\r\n *\r\n * @event {{ item: MenuItem }} koerber-select - Emitted when a menu item is selected.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Menu",
            "module": "components/menu/menu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/menu-item/menu-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MenuItem",
          "cssProperties": [
            {
              "description": "The distance submenus shift to overlap the parent menu.",
              "name": "--submenu-offset",
              "default": "-2px"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The prefix container.",
              "name": "prefix"
            },
            {
              "description": "The menu item label.",
              "name": "label"
            },
            {
              "description": "The suffix container.",
              "name": "suffix"
            },
            {
              "description": "The spinner that shows when the menu item is in the loading state.",
              "name": "spinner"
            },
            {
              "description": "The spinner's base part.",
              "name": "spinner__base"
            },
            {
              "description": "The submenu icon, visible only when the menu item has a submenu (not yet implemented).",
              "name": "submenu-icon"
            }
          ],
          "slots": [
            {
              "description": "The menu item's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the menu item.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the menu item.",
              "name": "suffix"
            },
            {
              "description": "Used to denote a nested menu.",
              "name": "submenu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\r\n    'koerber-icon': Icon,\r\n    'koerber-popup': Popup,\r\n    'koerber-tooltip': Tooltip\r\n  }"
            },
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tooltipContent",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "isLabelOverflowing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "menuItem",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "labelContentSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'checkbox'",
              "description": "The type of menu item to render. To use `checked`, this value must be set t`.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a selected state.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The height size value of the item - medium by default",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'submenu', 'prefix', 'suffix')"
            },
            {
              "kind": "field",
              "name": "submenuController",
              "type": {
                "text": "SubmenuController"
              },
              "privacy": "private",
              "default": "new SubmenuController(this, this.hasSlotController, this.localize)"
            },
            {
              "kind": "method",
              "name": "checkTextOverflow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleHostClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a text label based on the contents of the menu item's default slot."
            },
            {
              "kind": "method",
              "name": "isSubmenu"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'checkbox'",
              "description": "The type of menu item to render. To use `checked`, this value must be set t`.",
              "fieldName": "type"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a selected state.",
              "fieldName": "selected"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state, preventing selection.",
              "fieldName": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The height size value of the item - medium by default",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Menu items provide options for the user to pick from in a menu.",
          "tagNameWithoutPrefix": "menu-item",
          "tagName": "koerber-menu-item",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Menu items provide options for the user to pick from in a menu.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-popup\r\n * @dependency koerber-spinner\r\n * @dependency koerber-tooltip\r\n *\r\n * @slot - The menu item's label.\r\n * @slot prefix - Used to prepend an icon or similar element to the menu item.\r\n * @slot suffix - Used to append an icon or similar element to the menu item.\r\n * @slot submenu - Used to denote a nested menu.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart prefix - The prefix container.\r\n * @csspart label - The menu item label.\r\n * @csspart suffix - The suffix container.\r\n * @csspart spinner - The spinner that shows when the menu item is in the loading state.\r\n * @csspart spinner__base - The spinner's base part.\r\n * @csspart submenu-icon - The submenu icon, visible only when the menu item has a submenu (not yet implemented).\r\n *\r\n * @cssproperty [--submenu-offset=-2px] - The distance submenus shift to overlap the parent menu.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon",
            "koerber-popup",
            "koerber-spinner",
            "koerber-tooltip"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MenuItem",
            "module": "components/menu-item/menu-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/popup/popup.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Popup",
          "cssProperties": [
            {
              "description": "The size of the arrow. Note that an arrow won't be shown unless the `arrow` attribute is used.",
              "name": "--arrow-size",
              "default": "6px"
            },
            {
              "description": "The color of the arrow.",
              "name": "--arrow-color",
              "default": "var(--koerber-color-neutral-0)"
            },
            {
              "description": "A read-only custom property that determines the amount of width the popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-width"
            },
            {
              "description": "A read-only custom property that determines the amount of height the popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-height"
            }
          ],
          "cssParts": [
            {
              "description": "The arrow's container. Avoid setting `top|bottom|left|right` properties, as these values are assigned dynamically as the popup moves. This is most useful for applying a background color to match the popup, and maybe a border or box shadow.",
              "name": "arrow"
            },
            {
              "description": "The popup's container. Useful for setting a background color, box shadow, etc.",
              "name": "popup"
            },
            {
              "description": "The hover bridge element. Only available when the `hover-bridge` option is enabled.",
              "name": "hover-bridge"
            }
          ],
          "slots": [
            {
              "description": "The popup's content.",
              "name": ""
            },
            {
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can use the `anchor` attribute or property instead.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "anchorEl",
              "type": {
                "text": "Element | VirtualElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "HTMLElement"
              },
              "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript."
            },
            {
              "kind": "field",
              "name": "arrowEl",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | VirtualElement"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "attribute": "anchor"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "colorVariant",
              "type": {
                "text": "'default' | 'interactive' | 'unstyled'"
              },
              "default": "'unstyled'",
              "description": "The color variant of the popup. Valid options are `default`, `unstyled`, and `interactive`.",
              "attribute": "color-variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "default": "'absolute'",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "attribute": "strategy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "default": "'anchor'",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "attribute": "arrow-placement"
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "attribute": "arrow-padding"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "attribute": "flip-fallback-placements"
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "default": "'best-fit'",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "attribute": "flip-fallback-strategy"
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "flipBoundary"
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "attribute": "flip-padding"
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "shiftBoundary"
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "attribute": "shift-padding"
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "attribute": "auto-size"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both'"
              },
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "attribute": "sync"
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "autoSizeBoundary"
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "attribute": "auto-size-padding"
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "attribute": "hover-bridge"
            },
            {
              "kind": "method",
              "name": "handleAnchorChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Forces the popup to recalculate and reposition itself."
            },
            {
              "kind": "field",
              "name": "updateHoverBridge",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the popup is repositioned. This event can fire a lot, so avoid putting expensive operations in your listener or consider debouncing it.",
              "name": "koerber-reposition"
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | VirtualElement"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "fieldName": "anchor"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "fieldName": "active"
            },
            {
              "name": "color-variant",
              "type": {
                "text": "'default' | 'interactive' | 'unstyled'"
              },
              "default": "'unstyled'",
              "description": "The color variant of the popup. Valid options are `default`, `unstyled`, and `interactive`.",
              "fieldName": "colorVariant"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "strategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "default": "'absolute'",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "fieldName": "strategy"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "fieldName": "skidding"
            },
            {
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "fieldName": "arrow"
            },
            {
              "name": "arrow-placement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "default": "'anchor'",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "fieldName": "arrowPlacement"
            },
            {
              "name": "arrow-padding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "fieldName": "arrowPadding"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "fieldName": "flip"
            },
            {
              "name": "flip-fallback-placements",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "fieldName": "flipFallbackPlacements"
            },
            {
              "name": "flip-fallback-strategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "default": "'best-fit'",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "fieldName": "flipFallbackStrategy"
            },
            {
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "flipBoundary"
            },
            {
              "name": "flip-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "fieldName": "flipPadding"
            },
            {
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "fieldName": "shift"
            },
            {
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "shiftBoundary"
            },
            {
              "name": "shift-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "fieldName": "shiftPadding"
            },
            {
              "name": "auto-size",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "fieldName": "autoSize"
            },
            {
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both'"
              },
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "fieldName": "sync"
            },
            {
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "autoSizeBoundary"
            },
            {
              "name": "auto-size-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "fieldName": "autoSizePadding"
            },
            {
              "name": "hover-bridge",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "fieldName": "hoverBridge"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Popup is a utility that lets you declaratively anchor \"popup\" containers to another element.",
          "tagNameWithoutPrefix": "popup",
          "tagName": "koerber-popup",
          "customElement": true,
          "jsDoc": "/**\n * @summary Popup is a utility that lets you declaratively anchor \"popup\" containers to another element.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-popup--docs\n * @status stable\n * @since 2.0\n *\n * @event koerber-reposition - Emitted when the popup is repositioned. This event can fire a lot, so avoid putting expensive\n *  operations in your listener or consider debouncing it.\n *\n * @slot - The popup's content.\n * @slot anchor - The element the popup will be anchored to. If the anchor lives outside of the popup, you can use the\n *  `anchor` attribute or property instead.\n *\n * @csspart arrow - The arrow's container. Avoid setting `top|bottom|left|right` properties, as these values are\n *  assigned dynamically as the popup moves. This is most useful for applying a background color to match the popup, and\n *  maybe a border or box shadow.\n * @csspart popup - The popup's container. Useful for setting a background color, box shadow, etc.\n * @csspart hover-bridge - The hover bridge element. Only available when the `hover-bridge` option is enabled.\n *\n * @cssproperty [--arrow-size=6px] - The size of the arrow. Note that an arrow won't be shown unless the `arrow`\n *  attribute is used.\n * @cssproperty [--arrow-color=var(--koerber-color-neutral-0)] - The color of the arrow.\n * @cssproperty [--auto-size-available-width] - A read-only custom property that determines the amount of width the\n *  popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only\n *  available when using `auto-size`.\n * @cssproperty [--auto-size-available-height] - A read-only custom property that determines the amount of height the\n *  popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only\n *  available when using `auto-size`.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-popup--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Popup",
            "module": "components/popup/popup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio/radio.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Radio",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The circular container that wraps the radio's checked state.",
              "name": "control"
            },
            {
              "description": "The radio control when the radio is checked.",
              "name": "control--checked"
            },
            {
              "description": "The checked icon, an `<koerber-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "The container that wraps the radio's label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The radio's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon }"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value. When selected, the radio group will receive this value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label of the radio.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'standard' | 'comfortable'"
              },
              "default": "'standard'",
              "description": "The radio's size. When used inside a radio group, the size will be determined by the radio group's size so this\r\nattribute can typically be omitted.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "attribute": "accessible-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleDescription",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "attribute": "accessible-description",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setInitialAttributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "koerber-focus"
            },
            {
              "description": "Emitted when the control receives user input.",
              "name": "koerber-input"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "koerber-change"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value. When selected, the radio group will receive this value.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label of the radio.",
              "fieldName": "label"
            },
            {
              "name": "size",
              "type": {
                "text": "'standard' | 'comfortable'"
              },
              "default": "'standard'",
              "description": "The radio's size. When used inside a radio group, the size will be determined by the radio group's size so this\r\nattribute can typically be omitted.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "fieldName": "disabled"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "error"
            },
            {
              "name": "accessible-name",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "fieldName": "accessibleName"
            },
            {
              "name": "accessible-description",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "fieldName": "accessibleDescription"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Radios allow the user to select a single option from a group.",
          "tagNameWithoutPrefix": "radio",
          "tagName": "koerber-radio",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Radios allow the user to select a single option from a group.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n *\r\n * @slot - The radio's label.\r\n *\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-input - Emitted when the control receives user input.\r\n * @event koerber-change - Emitted when the control's checked state changes.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart control - The circular container that wraps the radio's checked state.\r\n * @csspart control--checked - The radio control when the radio is checked.\r\n * @csspart checked-icon - The checked icon, an `<koerber-icon>` element.\r\n * @csspart label - The container that wraps the radio's label.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Radio",
            "module": "components/radio/radio.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-button/radio-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RadioButton",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The internal `<button>` element.",
              "name": "button"
            },
            {
              "description": "The internal button element when the radio button is checked.",
              "name": "button--checked"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The container that wraps the radio button's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The radio button's label.",
              "name": ""
            },
            {
              "description": "A presentational prefix icon or similar element.",
              "name": "prefix"
            },
            {
              "description": "A presentational suffix icon or similar element.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'prefix', 'suffix')"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value. When selected, the radio group will receive this value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio button's size. When used inside a radio group, the size will be determined by the radio group's size so\r\nthis attribute can typically be omitted.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates en error on the component",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the radio button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the radio button."
            }
          ],
          "events": [
            {
              "description": "Emitted when the button loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the button gains focus.",
              "name": "koerber-focus"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value. When selected, the radio group will receive this value.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio button.",
              "fieldName": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio button's size. When used inside a radio group, the size will be determined by the radio group's size so\r\nthis attribute can typically be omitted.",
              "fieldName": "size"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates en error on the component",
              "fieldName": "error"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Radios buttons allow the user to select a single option from a group using a button-like control.",
          "tagNameWithoutPrefix": "radio-button",
          "tagName": "koerber-radio-button",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Radios buttons allow the user to select a single option from a group using a button-like control.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The radio button's label.\r\n * @slot prefix - A presentational prefix icon or similar element.\r\n * @slot suffix - A presentational suffix icon or similar element.\r\n *\r\n * @event koerber-blur - Emitted when the button loses focus.\r\n * @event koerber-focus - Emitted when the button gains focus.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart button - The internal `<button>` element.\r\n * @csspart button--checked - The internal button element when the radio button is checked.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart label - The container that wraps the radio button's label.\r\n * @csspart suffix - The container that wraps the suffix.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RadioButton",
            "module": "components/radio-button/radio-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-group/radio-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RadioGroup",
          "cssParts": [
            {
              "description": "The button group that wraps radio buttons.",
              "name": "button-group"
            },
            {
              "description": "The button group's `base` part.",
              "name": "button-group__base"
            }
          ],
          "slots": [
            {
              "description": "The default slot where `<koerber-radio>` or `<koerber-radio-button>` elements are placed. attribute.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-button-group': ButtonGroup }"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "hasButtonGroup",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "description": "The name of the radio group, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the radio group, submitted as a name/value pair with form data.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio group's size. This size will be applied to all child radios and radio buttons.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures a child radio is checked before allowing the containing form to submit.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "set layout horizontal/vertical.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables all child radio buttons.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Put the checked item to error state - indicating an error to the user.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getAllRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleRadioClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncRadioElements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateCheckedRadio",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSizeChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleErrorChange"
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "blur"
            }
          ],
          "events": [
            {
              "description": "Emitted when the radio group's selected value changes.",
              "name": "koerber-change"
            },
            {
              "description": "Emitted when the radio group receives user input.",
              "name": "koerber-input"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "description": "The name of the radio group, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the radio group, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio group's size. This size will be applied to all child radios and radio buttons.",
              "fieldName": "size"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures a child radio is checked before allowing the containing form to submit.",
              "fieldName": "required"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "set layout horizontal/vertical.",
              "fieldName": "horizontal"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables all child radio buttons.",
              "fieldName": "disabled"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Put the checked item to error state - indicating an error to the user.",
              "fieldName": "error"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Radio groups are used to group multiple [radios](/components/radio) or [radio buttons](/components/radio-button) so they function as a single form control.",
          "tagNameWithoutPrefix": "radio-group",
          "tagName": "koerber-radio-group",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Radio groups are used to group multiple [radios](/components/radio) or [radio buttons](/components/radio-button) so they function as a single form control.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-button-group\r\n *\r\n * @slot - The default slot where `<koerber-radio>` or `<koerber-radio-button>` elements are placed.\r\n *  attribute.\r\n *\r\n * @event koerber-change - Emitted when the radio group's selected value changes.\r\n * @event koerber-input - Emitted when the radio group receives user input.\r\n *\r\n * @csspart button-group - The button group that wraps radio buttons.\r\n * @csspart button-group__base - The button group's `base` part.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-button-group"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RadioGroup",
            "module": "components/radio-group/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/search/search.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Search",
          "cssParts": [
            {
              "description": "The container the wraps the prefix, combobox, clear icon, and expand button.",
              "name": "combobox"
            },
            {
              "description": "The container that wraps the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "The element that displays the selected option's label, an `<input>` element.",
              "name": "display-input"
            },
            {
              "description": "The listbox container where options are slotted.",
              "name": "listbox"
            },
            {
              "description": "The tag's base part.",
              "name": "tag__base"
            },
            {
              "description": "The tag's content part.",
              "name": "tag__content"
            },
            {
              "description": "The tag's remove button.",
              "name": "tag__remove-button"
            },
            {
              "description": "The tag's remove button base part.",
              "name": "tag__remove-button__base"
            },
            {
              "description": "The search button or clear it depends.",
              "name": "search-button"
            },
            {
              "description": "The container that wraps the expand icon.",
              "name": "search__icon"
            },
            {
              "description": "The error's message wrapper.",
              "name": "form-control-error-message"
            }
          ],
          "slots": [
            {
              "description": "The listbox options. Must be `<koerber-search-option>` elements.",
              "name": ""
            },
            {
              "description": "Used to prepend a presentational icon or similar element to the combobox.",
              "name": "prefix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "The icon to show when the control is expanded and collapsed. Rotates on open and close.",
              "name": "search-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\r\n    'koerber-icon': Icon,\r\n    'koerber-popup': Popup,\r\n    'koerber-tag': Tag,\r\n    'koerber-spinner': Spinner\r\n  }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "Popup"
              }
            },
            {
              "kind": "field",
              "name": "displayInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "searchButton",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "currentOption",
              "type": {
                "text": "SearchOption"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "SearchOption[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "minLengthMessage",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "searchResults",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the search, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the search, submitted as a name/value pair with form data.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the search is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The search's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a loader/spinner in the suffix of the search control",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loadingMessage",
              "type": {
                "text": "string"
              },
              "default": "'Disabled while loading'",
              "description": "Displays loading message when loading flag set to true",
              "attribute": "loadingMessage"
            },
            {
              "kind": "field",
              "name": "maxHeight",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the maximum height for the dropdown box before the scrollbar appears.",
              "attribute": "max-height"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the minimum length of the search input before the search is triggered., zero by default (deactivated)",
              "attribute": "min-length",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the search control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the search is open. You can toggle this attribute to show and hide the menu, or you can\r\nuse the `show()` and `hide()` methods and this attribute will reflect the search's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\r\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the search's menu. Note that the actual placement may vary as needed to keep the listbox\r\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The search's required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "attribute": "error"
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "attribute": "accessible-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleDescription",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "attribute": "accessible-description",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAnimations",
              "privacy": "private",
              "parameters": [
                {
                  "name": "previousValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentFocusIn",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleComboboxClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SearchOption | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SearchOption"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateMessage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSizeChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleMinLengthChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "koerber-change"
            },
            {
              "description": "Emitted when the control's value is cleared.",
              "name": "koerber-clear"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "koerber-input"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "koerber-focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the search's menu opens.",
              "name": "koerber-show"
            },
            {
              "description": "Emitted after the search's menu opens and all animations are complete.",
              "name": "koerber-after-show"
            },
            {
              "description": "Emitted when the search's menu closes.",
              "name": "koerber-hide"
            },
            {
              "description": "Emitted after the search's menu closes and all animations are complete.",
              "name": "koerber-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the search, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the search, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the search is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The search's size.",
              "fieldName": "size"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a loader/spinner in the suffix of the search control",
              "fieldName": "loading"
            },
            {
              "name": "loadingMessage",
              "type": {
                "text": "string"
              },
              "default": "'Disabled while loading'",
              "description": "Displays loading message when loading flag set to true",
              "fieldName": "loadingMessage"
            },
            {
              "name": "max-height",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the maximum height for the dropdown box before the scrollbar appears.",
              "fieldName": "maxHeight"
            },
            {
              "name": "min-length",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the minimum length of the search input before the search is triggered., zero by default (deactivated)",
              "fieldName": "minLength"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the search control.",
              "fieldName": "disabled"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the search is open. You can toggle this attribute to show and hide the menu, or you can\r\nuse the `show()` and `hide()` methods and this attribute will reflect the search's open state.",
              "fieldName": "open"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\r\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the search's menu. Note that the actual placement may vary as needed to keep the listbox\r\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The search's required attribute.",
              "fieldName": "required"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "fieldName": "error"
            },
            {
              "name": "accessible-name",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "fieldName": "accessibleName"
            },
            {
              "name": "accessible-description",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "fieldName": "accessibleDescription"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Search allow you to choose items from a menu of predefined options.",
          "tagNameWithoutPrefix": "search",
          "tagName": "koerber-search",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Search allow you to choose items from a menu of predefined options.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-search--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-popup\r\n * @dependency koerber-tag\r\n *\r\n * @slot - The listbox options. Must be `<koerber-search-option>` elements.\r\n * @slot prefix - Used to prepend a presentational icon or similar element to the combobox.\r\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\r\n * @slot search-icon - The icon to show when the control is expanded and collapsed. Rotates on open and close.\r\n *\r\n * @event koerber-change - Emitted when the control's value changes.\r\n * @event koerber-clear - Emitted when the control's value is cleared.\r\n * @event koerber-input - Emitted when the control receives input.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-show - Emitted when the search's menu opens.\r\n * @event koerber-after-show - Emitted after the search's menu opens and all animations are complete.\r\n * @event koerber-hide - Emitted when the search's menu closes.\r\n * @event koerber-after-hide - Emitted after the search's menu closes and all animations are complete.\r\n *\r\n * @csspart combobox - The container the wraps the prefix, combobox, clear icon, and expand button.\r\n * @csspart prefix - The container that wraps the prefix slot.\r\n * @csspart display-input - The element that displays the selected option's label, an `<input>` element.\r\n * @csspart listbox - The listbox container where options are slotted.\r\n * @csspart tag__base - The tag's base part.\r\n * @csspart tag__content - The tag's content part.\r\n * @csspart tag__remove-button - The tag's remove button.\r\n * @csspart tag__remove-button__base - The tag's remove button base part.\r\n * @csspart search-button - The search button or clear it depends.\r\n * @csspart search__icon - The container that wraps the expand icon.\r\n * @csspart form-control-error-message - The error's message wrapper.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-search--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon",
            "koerber-popup",
            "koerber-tag"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Search",
            "module": "components/search/search.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/search-option/search-option.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SearchOption",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The search option's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The search option's label.",
              "name": ""
            },
            {
              "description": "Used to append an icon or similar element to the search option.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHover",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The search-option's value. When selected, the containing form control will receive this value. The value must be unique\r\nfrom other search-options in the same group.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the search-option in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleMouseEnter",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseLeave",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a plain text label based on the search-option's content."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The search-option's value. When selected, the containing form control will receive this value. The value must be unique\r\nfrom other search-options in the same group.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the search-option in a disabled state, preventing selection.",
              "fieldName": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Search Options define the selectable options within the Search Component.",
          "tagNameWithoutPrefix": "search-option",
          "tagName": "koerber-search-option",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Search Options define the selectable options within the Search Component.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-search-option--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The search option's label.\r\n * @slot suffix - Used to append an icon or similar element to the search option.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart label - The search option's label.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart suffix - The container that wraps the suffix.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-search-option--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SearchOption",
            "module": "components/search-option/search-option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Select",
          "cssParts": [
            {
              "description": "The container the wraps the prefix, combobox, clear icon, and expand button.",
              "name": "combobox"
            },
            {
              "description": "The container that wraps the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "The element that displays the selected option's label, an `<input>` element.",
              "name": "display-input"
            },
            {
              "description": "The listbox container where options are slotted.",
              "name": "listbox"
            },
            {
              "description": "The container that houses option tags when `multiselect` is used.",
              "name": "tags"
            },
            {
              "description": "The individual tags that represent each multiselect option.",
              "name": "tag"
            },
            {
              "description": "The tag's base part.",
              "name": "tag__base"
            },
            {
              "description": "The tag's content part.",
              "name": "tag__content"
            },
            {
              "description": "The tag's remove button.",
              "name": "tag__remove-button"
            },
            {
              "description": "The tag's remove button base part.",
              "name": "tag__remove-button__base"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The container that wraps the expand icon.",
              "name": "expand-icon"
            },
            {
              "description": "The error's message wrapper.",
              "name": "form-control-error-message"
            }
          ],
          "slots": [
            {
              "description": "The listbox options. Must be `<koerber-select-option>` elements.",
              "name": ""
            },
            {
              "description": "Used to prepend a presentational icon or similar element to the combobox.",
              "name": "prefix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "The icon to show when the control is expanded and collapsed. Rotates on open and close.",
              "name": "expand-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\r\n    'koerber-icon': Icon,\r\n    'koerber-popup': Popup,\r\n    'koerber-tag': Tag,\r\n    'koerber-spinner': Spinner\r\n  }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "Popup"
              }
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "displayInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "valueInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentOption",
              "type": {
                "text": "SelectOption"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "SelectOption[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hasClearIcon",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\r\nvalue will be a space-delimited list of values based on the options selected.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a loader/spinner in the suffix of the select control",
              "attribute": "loading"
            },
            {
              "kind": "field",
              "name": "loadingMessage",
              "type": {
                "text": "string"
              },
              "default": "'Disabled while loading'",
              "description": "Displays loading message when loading flag set to true",
              "attribute": "loadingMessage"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows more than one option to be selected.",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxHeight",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the maximum height for the dropdown box before the scrollbar appears.",
              "attribute": "max-height"
            },
            {
              "kind": "field",
              "name": "maxOptionsVisible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\r\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "attribute": "max-options-visible"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\r\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\r\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\r\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "allowSearch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables search functionality in the select box.",
              "attribute": "allowSearch"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "attribute": "error"
            },
            {
              "kind": "field",
              "name": "loadingErrorMessage",
              "type": {
                "text": "string"
              },
              "description": "Used to indicate that the input has some error based on some rule.",
              "attribute": "loading-error-message"
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "attribute": "accessible-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleDescription",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "attribute": "accessible-description",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentFocusIn",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "shouldShowClearIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isSearchable",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isClearable",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isDisabled",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleComboboxMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTagRemove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "RemoveEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SelectOption | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SelectOption | SelectOption[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleOptionSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SelectOption"
                  }
                },
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSizeChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "koerber-change"
            },
            {
              "description": "Emitted when the control's value is cleared.",
              "name": "koerber-clear"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "koerber-input"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "koerber-focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the select's menu opens.",
              "name": "koerber-show"
            },
            {
              "description": "Emitted after the select's menu opens and all animations are complete.",
              "name": "koerber-after-show"
            },
            {
              "description": "Emitted when the select's menu closes.",
              "name": "koerber-hide"
            },
            {
              "description": "Emitted after the select's menu closes and all animations are complete.",
              "name": "koerber-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\r\nvalue will be a space-delimited list of values based on the options selected.",
              "fieldName": "value"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "fieldName": "size"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a loader/spinner in the suffix of the select control",
              "fieldName": "loading"
            },
            {
              "name": "loadingMessage",
              "type": {
                "text": "string"
              },
              "default": "'Disabled while loading'",
              "description": "Displays loading message when loading flag set to true",
              "fieldName": "loadingMessage"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows more than one option to be selected.",
              "fieldName": "multiple"
            },
            {
              "name": "max-height",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the maximum height for the dropdown box before the scrollbar appears.",
              "fieldName": "maxHeight"
            },
            {
              "name": "max-options-visible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\r\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "fieldName": "maxOptionsVisible"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "fieldName": "disabled"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\r\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "fieldName": "open"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\r\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\r\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "fieldName": "required"
            },
            {
              "name": "allowSearch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables search functionality in the select box.",
              "fieldName": "allowSearch"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to indicate that the input has some error based on some rule.",
              "fieldName": "error"
            },
            {
              "name": "loading-error-message",
              "type": {
                "text": "string"
              },
              "description": "Used to indicate that the input has some error based on some rule.",
              "fieldName": "loadingErrorMessage"
            },
            {
              "name": "accessible-name",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "fieldName": "accessibleName"
            },
            {
              "name": "accessible-description",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "fieldName": "accessibleDescription"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Selects allow you to choose items from a menu of predefined options.",
          "tagNameWithoutPrefix": "select",
          "tagName": "koerber-select",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Selects allow you to choose items from a menu of predefined options.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-select--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n * @dependency koerber-popup\r\n * @dependency koerber-tag\r\n *\r\n * @slot - The listbox options. Must be `<koerber-select-option>` elements.\r\n * @slot prefix - Used to prepend a presentational icon or similar element to the combobox.\r\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\r\n * @slot expand-icon - The icon to show when the control is expanded and collapsed. Rotates on open and close.\r\n *\r\n * @event koerber-change - Emitted when the control's value changes.\r\n * @event koerber-clear - Emitted when the control's value is cleared.\r\n * @event koerber-input - Emitted when the control receives input.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-show - Emitted when the select's menu opens.\r\n * @event koerber-after-show - Emitted after the select's menu opens and all animations are complete.\r\n * @event koerber-hide - Emitted when the select's menu closes.\r\n * @event koerber-after-hide - Emitted after the select's menu closes and all animations are complete.\r\n *\r\n * @csspart combobox - The container the wraps the prefix, combobox, clear icon, and expand button.\r\n * @csspart prefix - The container that wraps the prefix slot.\r\n * @csspart display-input - The element that displays the selected option's label, an `<input>` element.\r\n * @csspart listbox - The listbox container where options are slotted.\r\n * @csspart tags - The container that houses option tags when `multiselect` is used.\r\n * @csspart tag - The individual tags that represent each multiselect option.\r\n * @csspart tag__base - The tag's base part.\r\n * @csspart tag__content - The tag's content part.\r\n * @csspart tag__remove-button - The tag's remove button.\r\n * @csspart tag__remove-button__base - The tag's remove button base part.\r\n * @csspart clear-button - The clear button.\r\n * @csspart expand-icon - The container that wraps the expand icon.\r\n * @csspart form-control-error-message - The error's message wrapper.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-select--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon",
            "koerber-popup",
            "koerber-tag"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Select",
            "module": "components/select/select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select-option/select-option.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectOption",
          "cssParts": [
            {
              "description": "The checked icon, an `<koerber-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The option's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The option's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the menu item.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the menu item.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\r\n    'koerber-icon': Icon,\r\n    'koerber-checkbox': Checkbox\r\n  }"
            },
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHover",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\r\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\r\nmultiple values.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the option in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checkbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the option in a checkbox state.",
              "attribute": "checkbox",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The option's size. When used inside a select, the size will be determined by the select's size so this\r\nattribute can typically be omitted.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseEnter",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseLeave",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleCheckboxClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a plain text label based on the option's content."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\r\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\r\nmultiple values.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the option in a disabled state, preventing selection.",
              "fieldName": "disabled"
            },
            {
              "name": "checkbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the option in a checkbox state.",
              "fieldName": "checkbox"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The option's size. When used inside a select, the size will be determined by the select's size so this\r\nattribute can typically be omitted.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Options define the selectable items within various form controls such as [select](/components/select).",
          "tagNameWithoutPrefix": "select-option",
          "tagName": "koerber-select-option",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Options define the selectable items within various form controls such as [select](/components/select).\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-select-option--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-icon\r\n *\r\n * @slot - The option's label.\r\n * @slot prefix - Used to prepend an icon or similar element to the menu item.\r\n * @slot suffix - Used to append an icon or similar element to the menu item.\r\n *\r\n * @csspart checked-icon - The checked icon, an `<koerber-icon>` element.\r\n * @csspart base - The component's base wrapper.\r\n * @csspart label - The option's label.\r\n * @csspart prefix - The container that wraps the prefix.\r\n * @csspart suffix - The container that wraps the suffix.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-select-option--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SelectOption",
            "module": "components/select-option/select-option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/spinner/spinner.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Spinner",
          "cssProperties": [
            {
              "description": "The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The color of the spinner's indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The time it takes for the spinner to complete one animation cycle.",
              "name": "--speed"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Spinners are used to show the progress of an indeterminate operation.",
          "tagNameWithoutPrefix": "spinner",
          "tagName": "koerber-spinner",
          "customElement": true,
          "jsDoc": "/**\n * @summary Spinners are used to show the progress of an indeterminate operation.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n * @status stable\n * @since 2.0\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --track-width - The width of the track.\n * @cssproperty --track-color - The color of the track.\n * @cssproperty --indicator-color - The color of the spinner's indicator.\n * @cssproperty --speed - The time it takes for the spinner to complete one animation cycle.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Spinner",
            "module": "components/spinner/spinner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/textarea/textarea.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Textarea",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The internal `<textarea>` control.",
              "name": "textarea"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-icon': Icon }"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the textarea, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the textarea, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The textarea's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'none'",
              "description": "Controls how the textarea can be resized.",
              "attribute": "resize"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "characterCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current character count in the textarea."
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the textarea.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "description": "to indicate that the text area is used for an error.",
              "attribute": "error"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "attribute": "accessible-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleDescription",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "attribute": "accessible-description",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setTextareaHeight",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleRowsChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the textarea."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the textarea."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the textarea."
            },
            {
              "kind": "method",
              "name": "scrollPosition",
              "return": {
                "type": {
                  "text": "{ top: number; left: number } | undefined"
                }
              },
              "parameters": [
                {
                  "name": "position",
                  "optional": true,
                  "type": {
                    "text": "{ top?: number; left?: number }"
                  }
                }
              ],
              "description": "Gets or sets the textarea's scroll position."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "koerber-change"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "koerber-focus"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "koerber-input"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the textarea, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the textarea, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The textarea's size.",
              "fieldName": "size"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "fieldName": "rows"
            },
            {
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'none'",
              "description": "Controls how the textarea can be resized.",
              "fieldName": "resize"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "fieldName": "required"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the textarea.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "fieldName": "inputmode"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "description": "to indicate that the text area is used for an error.",
              "fieldName": "error"
            },
            {
              "name": "accessible-name",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "fieldName": "accessibleName"
            },
            {
              "name": "accessible-description",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "fieldName": "accessibleDescription"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Textareas collect data from the user and allow multiple lines of text.",
          "tagNameWithoutPrefix": "textarea",
          "tagName": "koerber-textarea",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary Textareas collect data from the user and allow multiple lines of text.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-textarea--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-change - Emitted when an alteration to the control's value is committed by the user.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n * @event koerber-input - Emitted when the control receives input.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart textarea - The internal `<textarea>` control.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-textarea--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Textarea",
            "module": "components/textarea/textarea.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tag/tag.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Tag",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tag's content.",
              "name": "content"
            },
            {
              "description": "The tag's remove button, an `<koerber-icon-button>`.",
              "name": "remove-button"
            },
            {
              "description": "The remove button's exported `base` part.",
              "name": "remove-button__base"
            }
          ],
          "slots": [
            {
              "description": "The tag's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    'koerber-icon-button': IconButton\n  }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The tag's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style tag with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tag removable and shows a remove button.",
              "attribute": "removable"
            },
            {
              "kind": "method",
              "name": "handleRemoveClick",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the remove button is activated.",
              "name": "koerber-remove"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The tag's size.",
              "fieldName": "size"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style tag with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tag removable and shows a remove button.",
              "fieldName": "removable"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Tags are used as labels to organize things or to indicate a selection.",
          "tagNameWithoutPrefix": "tag",
          "tagName": "koerber-tag",
          "customElement": true,
          "jsDoc": "/**\n * @summary Tags are used as labels to organize things or to indicate a selection.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n * @status stable\n * @since 2.0\n *\n * @dependency koerber-icon-button\n *\n * @slot - The tag's content.\n *\n * @event koerber-remove - Emitted when the remove button is activated.\n *\n * @csspart base - The component's base wrapper.\n * @csspart content - The tag's content.\n * @csspart remove-button - The tag's remove button, an `<koerber-icon-button>`.\n * @csspart remove-button__base - The remove button's exported `base` part.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-icon-button"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Tag",
            "module": "components/tag/tag.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/toggle/toggle.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Toggle",
          "cssProperties": [
            {
              "description": "The width of the toggle.",
              "name": "--width"
            },
            {
              "description": "The height of the toggle.",
              "name": "--height"
            },
            {
              "description": "The size of the thumb.",
              "name": "--thumb-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The control that houses the toggle's thumb.",
              "name": "control"
            },
            {
              "description": "The toggle's thumb.",
              "name": "thumb"
            },
            {
              "description": "The toggle's label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The toggle's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the toggle, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the toggle, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label of the toggle.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'standard' | 'comfortable'"
              },
              "default": "'standard'",
              "description": "The toggle's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the toggle.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the toggle in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the toggle a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates the form control is in an error state.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "attribute": "accessible-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "accessibleDescription",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "attribute": "accessible-description",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the toggle."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the toggle."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the toggle."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "koerber-blur"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "koerber-change"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "koerber-input"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "koerber-focus"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the toggle, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the toggle, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label of the toggle.",
              "fieldName": "label"
            },
            {
              "name": "size",
              "type": {
                "text": "'standard' | 'comfortable'"
              },
              "default": "'standard'",
              "description": "The toggle's size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the toggle.",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the toggle in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the toggle a required field.",
              "fieldName": "required"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates the form control is in an error state.",
              "fieldName": "error"
            },
            {
              "name": "accessible-name",
              "type": {
                "text": "string"
              },
              "description": "The component accessible label name",
              "fieldName": "accessibleName"
            },
            {
              "name": "accessible-description",
              "type": {
                "text": "string"
              },
              "description": "The component accessible description",
              "fieldName": "accessibleDescription"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "toggles allow the user to toggle an option on or off.",
          "tagNameWithoutPrefix": "toggle",
          "tagName": "koerber-toggle",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary toggles allow the user to toggle an option on or off.\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @slot - The toggle's label.\r\n *\r\n * @event koerber-blur - Emitted when the control loses focus.\r\n * @event koerber-change - Emitted when the control's checked state changes.\r\n * @event koerber-input - Emitted when the control receives input.\r\n * @event koerber-focus - Emitted when the control gains focus.\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart control - The control that houses the toggle's thumb.\r\n * @csspart thumb - The toggle's thumb.\r\n * @csspart label - The toggle's label.\r\n *\r\n * @cssproperty --width - The width of the toggle.\r\n * @cssproperty --height - The height of the toggle.\r\n * @cssproperty --thumb-size - The size of the thumb.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Toggle",
            "module": "components/toggle/toggle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tree/tree.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Tree",
          "cssProperties": [
            {
              "description": "The size of the indentation for nested items.",
              "name": "--indent-size",
              "default": "var(--koerber-spacing-s)"
            },
            {
              "description": "The color of the indentation line.",
              "name": "--indent-guide-color",
              "default": "var(--koerber-color-neutral-200)"
            },
            {
              "description": "The amount of vertical spacing to leave between the top and bottom of the indentation line's starting position.",
              "name": "--indent-guide-offset",
              "default": "0"
            },
            {
              "description": "The style of the indentation line, e.g. solid, dotted, dashed.",
              "name": "--indent-guide-style",
              "default": "solid"
            },
            {
              "description": "The width of the indentation line.",
              "name": "--indent-guide-width",
              "default": "0"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The icon to show when the tree item is expanded. Works best with `<koerber-icon>`.",
              "name": "expand-icon"
            },
            {
              "description": "The icon to show when the tree item is collapsed. Works best with `<koerber-icon>`.",
              "name": "collapse-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "expandedIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "collapsedIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'leaf'"
              },
              "default": "'multiple'",
              "description": "The selection behavior of the tree. Single selection allows only one node to be selected at a time. Multiple\ndisplays checkboxes and allows more than one node to be selected. Leaf allows only leaf nodes to be selected."
            },
            {
              "kind": "field",
              "name": "lastFocusedItem",
              "type": {
                "text": "TreeItem"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "clickTarget",
              "type": {
                "text": "TreeItem | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "getExpandButtonIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "'expand' | 'collapse'"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "initTreeItem",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleTreeChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncTreeItems",
              "privacy": "private",
              "parameters": [
                {
                  "name": "selectedItem",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "selectedItem",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllTreeItems",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "TreeItem | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleFocusOut",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocusIn",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSelectionChange"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ selection: TreeItem[] }"
              },
              "description": "Emitted when a tree item is selected or deselected.",
              "name": "koerber-selection-change"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Trees allow you to display a hierarchical list of selectable [tree items](/components/tree-item). Items with children can be expanded and collapsed as desired by the user.",
          "tagNameWithoutPrefix": "tree",
          "tagName": "koerber-tree",
          "customElement": true,
          "jsDoc": "/**\n * @summary Trees allow you to display a hierarchical list of selectable [tree items](/components/tree-item). Items with children can be expanded and collapsed as desired by the user.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-tree--docs\n * @status stable\n * @since 2.0\n *\n * @event {{ selection: TreeItem[] }} koerber-selection-change - Emitted when a tree item is selected or deselected.\n *\n * @slot - The default slot.\n * @slot expand-icon - The icon to show when the tree item is expanded. Works best with `<koerber-icon>`.\n * @slot collapse-icon - The icon to show when the tree item is collapsed. Works best with `<koerber-icon>`.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty [--indent-size=var(--koerber-spacing-s)] - The size of the indentation for nested items.\n * @cssproperty [--indent-guide-color=var(--koerber-color-neutral-200)] - The color of the indentation line.\n * @cssproperty [--indent-guide-offset=0] - The amount of vertical spacing to leave between the top and bottom of the\n *  indentation line's starting position.\n * @cssproperty [--indent-guide-style=solid] - The style of the indentation line, e.g. solid, dotted, dashed.\n * @cssproperty [--indent-guide-width=0] - The width of the indentation line.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-tree--docs",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Tree",
            "module": "components/tree/tree.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tooltip/tooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Tooltip",
          "cssProperties": [
            {
              "description": "The maximum width of the tooltip before its content will wrap.",
              "name": "--max-width"
            },
            {
              "description": "The amount of time to wait before hiding the tooltip when hovering.",
              "name": "--hide-delay"
            },
            {
              "description": "The amount of time to wait before showing the tooltip when hovering.",
              "name": "--show-delay"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper, an `<koerber-popup>` element.",
              "name": "base"
            },
            {
              "description": "The popup's exported `popup` part. Use this to target the tooltip's popup container.",
              "name": "base__popup"
            },
            {
              "description": "The popup's exported `arrow` part. Use this to target the tooltip's arrow.",
              "name": "base__arrow"
            },
            {
              "description": "The tooltip's body where its content is rendered.",
              "name": "body"
            }
          ],
          "slots": [
            {
              "description": "The tooltip's target element. Avoid slotting in more than one element, as subsequent ones will be ignored.",
              "name": ""
            },
            {
              "description": "The content to render in the tooltip. Alternatively, you can use the `content` attribute.",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'koerber-popup': Popup }"
            },
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true,
              "default": "8",
              "description": "The distance in pixels from which to offset the tooltip away from its target."
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true,
              "default": "0",
              "description": "The distance in pixels from which to offset the tooltip along its target."
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "readonly": true,
              "default": "'hover focus'",
              "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically."
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "Popup"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip's content. If you need to display HTML, use the `content` slot instead.",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all,\nscenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasTrigger",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggerType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the tooltip."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the tooltip"
            }
          ],
          "events": [
            {
              "description": "Emitted when the tooltip begins to show.",
              "name": "koerber-show"
            },
            {
              "description": "Emitted after the tooltip has shown and all animations are complete.",
              "name": "koerber-after-show"
            },
            {
              "description": "Emitted when the tooltip begins to hide.",
              "name": "koerber-hide"
            },
            {
              "description": "Emitted after the tooltip has hidden and all animations are complete.",
              "name": "koerber-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip's content. If you need to display HTML, use the `content` slot instead.",
              "fieldName": "content"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all,\nscenarios.",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "Tooltips display additional information based on a specific action.",
          "tagNameWithoutPrefix": "tooltip",
          "tagName": "koerber-tooltip",
          "customElement": true,
          "jsDoc": "/**\n * @summary Tooltips display additional information based on a specific action.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-tooltip--docs\n * @status stable\n * @since 2.0\n *\n * @dependency koerber-popup\n *\n * @slot - The tooltip's target element. Avoid slotting in more than one element, as subsequent ones will be ignored.\n * @slot content - The content to render in the tooltip. Alternatively, you can use the `content` attribute.\n *\n * @event koerber-show - Emitted when the tooltip begins to show.\n * @event koerber-after-show - Emitted after the tooltip has shown and all animations are complete.\n * @event koerber-hide - Emitted when the tooltip begins to hide.\n * @event koerber-after-hide - Emitted after the tooltip has hidden and all animations are complete.\n *\n * @csspart base - The component's base wrapper, an `<koerber-popup>` element.\n * @csspart base__popup - The popup's exported `popup` part. Use this to target the tooltip's popup container.\n * @csspart base__arrow - The popup's exported `arrow` part. Use this to target the tooltip's arrow.\n * @csspart body - The tooltip's body where its content is rendered.\n *\n * @cssproperty --max-width - The maximum width of the tooltip before its content will wrap.\n * @cssproperty --hide-delay - The amount of time to wait before hiding the tooltip when hovering.\n * @cssproperty --show-delay - The amount of time to wait before showing the tooltip when hovering.\n *\n * @animation tooltip.show - The animation to use when showing the tooltip.\n * @animation tooltip.hide - The animation to use when hiding the tooltip.\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-tooltip--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-popup"
          ],
          "animations": [
            {
              "name": "tooltip.show",
              "description": "The animation to use when showing the tooltip."
            },
            {
              "name": "tooltip.hide",
              "description": "The animation to use when hiding the tooltip."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Tooltip",
            "module": "components/tooltip/tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tree-item/tree-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TreeItem",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tree item's container. This element wraps everything except slotted tree item children.",
              "name": "item"
            },
            {
              "description": "Applied when the tree item is disabled.",
              "name": "item--disabled"
            },
            {
              "description": "Applied when the tree item is open.",
              "name": "item--open"
            },
            {
              "description": "Applied when the selection is indeterminate.",
              "name": "item--indeterminate"
            },
            {
              "description": "Applied when the tree item is selected.",
              "name": "item--selected"
            },
            {
              "description": "The tree item's indentation container.",
              "name": "indentation"
            },
            {
              "description": "The container that wraps the tree item's expand button and spinner.",
              "name": "expand-button"
            },
            {
              "description": "The tree item's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the tree item's nested children.",
              "name": "children"
            },
            {
              "description": "The checkbox that shows when using multiselect.",
              "name": "checkbox"
            },
            {
              "description": "The checkbox's exported `base` part.",
              "name": "checkbox__base"
            },
            {
              "description": "The checkbox's exported `control` part.",
              "name": "checkbox__control"
            },
            {
              "description": "The checkbox's exported `control--checked` part.",
              "name": "checkbox__control--checked"
            },
            {
              "description": "The checkbox's exported `control--indeterminate` part.",
              "name": "checkbox__control--indeterminate"
            },
            {
              "description": "The checkbox's exported `checked-icon` part.",
              "name": "checkbox__checked-icon"
            },
            {
              "description": "The checkbox's exported `indeterminate-icon` part.",
              "name": "checkbox__indeterminate-icon"
            },
            {
              "description": "The checkbox's exported `label` part.",
              "name": "checkbox__label"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The icon to show when the tree item is expanded.",
              "name": "expand-icon"
            },
            {
              "description": "The icon to show when the tree item is collapsed.",
              "name": "collapse-icon"
            },
            {
              "description": "The action buttons in the tree item.",
              "name": "actions"
            },
            {
              "description": "The icon to show the supporting visuals in the tree item.",
              "name": "support"
            },
            {
              "description": "The hint text in the tree item content.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\r\n    'koerber-checkbox': Checkbox,\r\n    'koerber-icon': Icon,\r\n    'koerber-spinner': Spinner,\r\n    'koerber-tooltip': Tooltip\r\n  }"
            },
            {
              "kind": "method",
              "name": "isTreeItem",
              "static": true,
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tooltipContent",
              "type": {
                "text": "null | string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "isTextOverflowing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isLeaf",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expands the tree item.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tree item in a selected state.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tree item.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "lazy",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables lazy loading behavior.",
              "attribute": "lazy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Set the current size of the tree item",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "childrenSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "itemElement",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "childrenContainer",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "expandButtonSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "labelContentSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "animateCollapse",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isNestedItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleChildrenSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "animateExpand",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachOverflowObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "checkTextOverflow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getTextContent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLoadingChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleExpandAnimation"
            },
            {
              "kind": "method",
              "name": "handleLazyChange"
            },
            {
              "kind": "field",
              "name": "getChildrenItems",
              "description": "Gets all the nested tree items in this node."
            }
          ],
          "events": [
            {
              "description": "Emitted when the tree item expands.",
              "name": "koerber-expand"
            },
            {
              "description": "Emitted after the tree item expands and all animations are complete.",
              "name": "koerber-after-expand"
            },
            {
              "description": "Emitted when the tree item collapses.",
              "name": "koerber-collapse"
            },
            {
              "description": "Emitted after the tree item collapses and all animations are complete.",
              "name": "koerber-after-collapse"
            },
            {
              "description": "Emitted when the tree item's lazy state changes.",
              "name": "koerber-lazy-change"
            },
            {
              "description": "Emitted when a lazy item is selected. Use this event to asynchronously load data and append items to the tree before expanding. After appending new items, remove the `lazy` attribute to remove the loading state and update the tree.",
              "name": "koerber-lazy-load"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expands the tree item.",
              "fieldName": "open"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tree item in a selected state.",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tree item.",
              "fieldName": "disabled"
            },
            {
              "name": "lazy",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables lazy loading behavior.",
              "fieldName": "lazy"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Set the current size of the tree item",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "UIKitElement",
            "module": "/src/internal/uikit-element"
          },
          "summary": "A tree item serves as a hierarchical node that lives inside a [tree](/components/tree).",
          "tagNameWithoutPrefix": "tree-item",
          "tagName": "koerber-tree-item",
          "customElement": true,
          "jsDoc": "/**\r\n * @summary A tree item serves as a hierarchical node that lives inside a [tree](/components/tree).\r\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-tree-item--docs\r\n * @status stable\r\n * @since 2.0\r\n *\r\n * @dependency koerber-checkbox\r\n * @dependency koerber-icon\r\n * @dependency koerber-spinner\r\n *\r\n * @event koerber-expand - Emitted when the tree item expands.\r\n * @event koerber-after-expand - Emitted after the tree item expands and all animations are complete.\r\n * @event koerber-collapse - Emitted when the tree item collapses.\r\n * @event koerber-after-collapse - Emitted after the tree item collapses and all animations are complete.\r\n * @event koerber-lazy-change - Emitted when the tree item's lazy state changes.\r\n * @event koerber-lazy-load - Emitted when a lazy item is selected. Use this event to asynchronously load data and append\r\n *  items to the tree before expanding. After appending new items, remove the `lazy` attribute to remove the loading\r\n *  state and update the tree.\r\n *\r\n * @slot - The default slot.\r\n * @slot expand-icon - The icon to show when the tree item is expanded.\r\n * @slot collapse-icon - The icon to show when the tree item is collapsed.\r\n * @slot actions - The action buttons in the tree item.\r\n * @slot support - The icon to show the supporting visuals in the tree item.\r\n * @slot hint - The hint text in the tree item content.\r\n *\r\n *\r\n * @csspart base - The component's base wrapper.\r\n * @csspart item - The tree item's container. This element wraps everything except slotted tree item children.\r\n * @csspart item--disabled - Applied when the tree item is disabled.\r\n * @csspart item--open - Applied when the tree item is open.\r\n * @csspart item--indeterminate - Applied when the selection is indeterminate.\r\n * @csspart item--selected - Applied when the tree item is selected.\r\n * @csspart indentation - The tree item's indentation container.\r\n * @csspart expand-button - The container that wraps the tree item's expand button and spinner.\r\n * @csspart label - The tree item's label.\r\n * @csspart children - The container that wraps the tree item's nested children.\r\n * @csspart checkbox - The checkbox that shows when using multiselect.\r\n * @csspart checkbox__base - The checkbox's exported `base` part.\r\n * @csspart checkbox__control - The checkbox's exported `control` part.\r\n * @csspart checkbox__control--checked - The checkbox's exported `control--checked` part.\r\n * @csspart checkbox__control--indeterminate - The checkbox's exported `control--indeterminate` part.\r\n * @csspart checkbox__checked-icon - The checkbox's exported `checked-icon` part.\r\n * @csspart checkbox__indeterminate-icon - The checkbox's exported `indeterminate-icon` part.\r\n * @csspart checkbox__label - The checkbox's exported `label` part.\r\n */",
          "documentation": "https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-tree-item--docs",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "koerber-checkbox",
            "koerber-icon",
            "koerber-spinner"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TreeItem",
            "module": "components/tree-item/tree-item.js"
          }
        }
      ]
    }
  ],
  "package": {
    "name": "@koerber/uikit",
    "description": "Körber Supply Chain UI-Kit",
    "version": "3.0.0-prealpha.0",
    "author": "",
    "license": "ISC"
  }
}
