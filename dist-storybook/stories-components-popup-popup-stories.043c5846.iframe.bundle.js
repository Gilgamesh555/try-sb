"use strict";(self.webpackChunk_koerber_uikit=self.webpackChunk_koerber_uikit||[]).push([[4211],{"./src/stories/components/popup/popup.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Activating:()=>Activating,Arrow_Placement:()=>Arrow_Placement,Auto_Size:()=>Auto_Size,Color_Variant_Default:()=>Color_Variant_Default,Color_Variant_Interactive:()=>Color_Variant_Interactive,Color_Variant_Unstyled:()=>Color_Variant_Unstyled,Default:()=>Default,Distance:()=>Distance,External_Anchor:()=>External_Anchor,Flip:()=>Flip,Flip_Fallback:()=>Flip_Fallback,Placement:()=>Placement,Popup_Default:()=>Popup_Default,Positioning:()=>Positioning,Shift:()=>Shift,Skidding_Variant:()=>Skidding_Variant,Sync_Trigger:()=>Sync_Trigger,Virtual_Element:()=>Virtual_Element,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/stories/utils.ts");__webpack_require__("./src/stories/component-imports.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Popup-Stories",component:"koerber-popup",argTypes:{anchor:{control:{type:"select"},options:["Element","string","VirtualElement"],description:"The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",table:{type:{summary:"Element | string | VirtualElement",detail:"Element | string | VirtualElement"},defaultValue:{}}},active:{control:{type:"boolean"},description:"Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",defaultValue:"false",table:{type:{summary:"boolean",detail:"boolean"},defaultValue:{summary:"false"}}},"color-variant":{control:{type:"select"},options:["default","interactive","unstyled"],description:"The color variant of the popup. Valid options are `default`, `unstyled`, and `interactive`.",defaultValue:"'unstyled'",table:{type:{summary:"'default' | 'interactive' | 'unstyled'",detail:"'default' | 'interactive' | 'unstyled'"},defaultValue:{summary:"'unstyled'"}}},placement:{control:{type:"select"},options:["top","top-start","top-end","bottom","bottom-start","bottom-end","right","right-start","right-end","left","left-start","left-end"],description:"The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",defaultValue:"'top'",table:{type:{summary:"| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'",detail:"| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"},defaultValue:{summary:"'top'"}}},strategy:{control:{type:"select"},options:["absolute","fixed"],description:"Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",defaultValue:"'absolute'",table:{type:{summary:"'absolute' | 'fixed'",detail:"'absolute' | 'fixed'"},defaultValue:{summary:"'absolute'"}}},distance:{control:{type:"number"},description:"The distance in pixels from which to offset the panel away from its anchor.",table:{type:{summary:"number",detail:"number"},defaultValue:{}}},skidding:{control:{type:"number"},description:"The distance in pixels from which to offset the panel along its anchor.",defaultValue:"0",table:{type:{summary:"number",detail:"number"},defaultValue:{summary:"0"}}},arrow:{control:{type:"boolean"},description:"Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",defaultValue:"false",table:{type:{summary:"boolean",detail:"boolean"},defaultValue:{summary:"false"}}},"arrow-placement":{control:{type:"select"},options:["start","end","center","anchor"],description:"The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",defaultValue:"'anchor'",table:{type:{summary:"'start' | 'end' | 'center' | 'anchor'",detail:"'start' | 'end' | 'center' | 'anchor'"},defaultValue:{summary:"'anchor'"}}},"arrow-padding":{control:{type:"number"},description:"The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",defaultValue:"10",table:{type:{summary:"number",detail:"number"},defaultValue:{summary:"10"}}},flip:{control:{type:"boolean"},description:"When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",defaultValue:"false",table:{type:{summary:"boolean",detail:"boolean"},defaultValue:{summary:"false"}}},"flip-fallback-placements":{control:{type:"text"},description:'If the preferred placement doesn\'t fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. "top bottom left". If no placement fits, the flip\nfallback strategy will be used instead.',defaultValue:"''",table:{type:{summary:"string",detail:"string"},defaultValue:{summary:"''"}}},"flip-fallback-strategy":{control:{type:"select"},options:["best-fit","initial"],description:"When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",defaultValue:"'best-fit'",table:{type:{summary:"'best-fit' | 'initial'",detail:"'best-fit' | 'initial'"},defaultValue:{summary:"'best-fit'"}}},flipBoundary:{control:{type:"select"},options:["Element","Element[]"],description:"The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",table:{type:{summary:"Element | Element[]",detail:"Element | Element[]"},defaultValue:{}}},"flip-padding":{control:{type:"number"},description:"The amount of padding, in pixels, to exceed before the flip behavior will occur.",defaultValue:"0",table:{type:{summary:"number",detail:"number"},defaultValue:{summary:"0"}}},shift:{control:{type:"boolean"},description:"Moves the popup along the axis to keep it in view when clipped.",defaultValue:"false",table:{type:{summary:"boolean",detail:"boolean"},defaultValue:{summary:"false"}}},shiftBoundary:{control:{type:"select"},options:["Element","Element[]"],description:"The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",table:{type:{summary:"Element | Element[]",detail:"Element | Element[]"},defaultValue:{}}},"shift-padding":{control:{type:"number"},description:"The amount of padding, in pixels, to exceed before the shift behavior will occur.",defaultValue:"0",table:{type:{summary:"number",detail:"number"},defaultValue:{summary:"0"}}},"auto-size":{control:{type:"select"},options:["horizontal","vertical","both"],description:"When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",table:{type:{summary:"'horizontal' | 'vertical' | 'both'",detail:"'horizontal' | 'vertical' | 'both'"},defaultValue:{}}},sync:{control:{type:"select"},options:["width","height","both"],description:"Syncs the popup's width or height to that of the anchor element.",table:{type:{summary:"'width' | 'height' | 'both'",detail:"'width' | 'height' | 'both'"},defaultValue:{}}},autoSizeBoundary:{control:{type:"select"},options:["Element","Element[]"],description:"The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",table:{type:{summary:"Element | Element[]",detail:"Element | Element[]"},defaultValue:{}}},"auto-size-padding":{control:{type:"number"},description:"The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",defaultValue:"0",table:{type:{summary:"number",detail:"number"},defaultValue:{summary:"0"}}},"hover-bridge":{control:{type:"boolean"},description:'When a gap exists between the anchor and the popup element, this option will add a "hover bridge" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.',defaultValue:"false",table:{type:{summary:"boolean",detail:"boolean"},defaultValue:{summary:"false"}}}}},Default={render:args=>{const popupHTML=`<koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})}></koerber-popup>`;return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{},storyName:"Default"},Popup_Default={render:args=>{const popupHTML=`\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="popup-container color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n    `;return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed"},argTypes:{anchor:{table:{disable:!0}},flipBoundary:{table:{disable:!0}},shiftBoundary:{table:{disable:!0}},autoSizeBoundary:{table:{disable:!0}}}},Color_Variant_Default={render:args=>{const popupHTML=`\n    <div class="popup-container">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n    </div>`;return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed"}},Color_Variant_Interactive={render:args=>{const popupHTML=`\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="popup-container color-variant-interactive" arrow-placement="anchor" arrow="true" >\n        <span slot="anchor"></span>\n        <div class="box">\n          <koerber-card>\n            <div slot="header">Layout</div>\n            <div>Start building new pages to your project, the definition tooltip provides additional help ot defines an item or term.</div>\n            <div slot="footer">\n              <koerber-button variant="ghost" size="small">Learn more</koerber-button>\n              <koerber-button variant="primary" size="small">Next</koerber-button>\n            </div>\n          </koerber-card>\n        </div>\n      </koerber-popup>`;return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"interactive",active:"true",placement:"right",strategy:"fixed"}},Activating={render:args=>{const popupHTML=`\n    <div class="popup-active popup-container">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default" id="popup_activating">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n      <koerber-toggle checked>Active</koerber-toggle>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-active"),popup=null==container?void 0:container.querySelector("koerber-popup"),active=null==container?void 0:container.querySelector("koerber-toggle");null==active||active.addEventListener("koerber-change",(()=>{popup&&(popup.active=active.checked)}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed"}},Color_Variant_Unstyled={render:args=>{const popupHTML=`\n    <div class="popup-container">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box" style="background-color: var(--koerber-color-bg-fill);"></div>\n      </koerber-popup>\n    </div>`;return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"unstyled",active:"true",placement:"top",strategy:"fixed"}},External_Anchor={render:args=>{const popupHTML=`\n    <div class="popup-active popup-container">\n      <span id="external-anchor"></span>\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})}>\n        <div class="box"></div>\n      </koerber-popup>\n    </div>`;return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed",anchor:"external-anchor"}},Placement={render:args=>{const popupHTML=`\n    <div class="popup-container popup-placement">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n\n      <div style="height: 280px;">\n        <koerber-select label="Placement" value="top">\n          <koerber-select-option value="top">top</koerber-select-option>\n          <koerber-select-option value="top-start">top-start</koerber-select-option>\n          <koerber-select-option value="top-end">top-end</koerber-select-option>\n          <koerber-select-option value="bottom">bottom</koerber-select-option>\n          <koerber-select-option value="bottom-start">bottom-start</koerber-select-option>\n          <koerber-select-option value="bottom-end">bottom-end</koerber-select-option>\n          <koerber-select-option value="right">right</koerber-select-option>\n          <koerber-select-option value="right-start">right-start</koerber-select-option>\n          <koerber-select-option value="right-end">right-end</koerber-select-option>\n          <koerber-select-option value="left">left</koerber-select-option>\n          <koerber-select-option value="left-start">left-start</koerber-select-option>\n          <koerber-select-option value="left-end">left-end</koerber-select-option>\n        </koerber-select>\n      <div>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-placement"),popup=null==container?void 0:container.querySelector("koerber-popup"),select=null==container?void 0:container.querySelector("koerber-select");null==select||select.addEventListener("koerber-change",(()=>{if(popup&&select){const value=select.value;popup.placement=value}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed",distance:0}},Distance={render:args=>{const popupHTML=`\n    <div class="popup-container popup-distance">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n      <koerber-input type="number" name="distance" label="Distance" value="0"></koerber-input>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-distance"),popup=null==container?void 0:container.querySelector("koerber-popup"),distance=null==container?void 0:container.querySelector("koerber-input");null==distance||distance.addEventListener("koerber-change",(()=>{if(popup&&distance){const value=distance.value;popup.distance=value}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed",distance:"0"}},Skidding_Variant={render:args=>{const popupHTML=`\n    <div class="popup-container popup-skidding">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n      <koerber-input type="number" name="skidding" label="Skidding" value="0"></koerber-input>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-skidding"),popup=null==container?void 0:container.querySelector("koerber-popup"),distance=null==container?void 0:container.querySelector("koerber-input");null==distance||distance.addEventListener("koerber-change",(()=>{if(popup&&distance){const value=distance.value;popup.skidding=value}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed",skidding:"0"}},Arrow_Placement={render:args=>{const popupHTML=`\n    <div class="popup-container popup-arrow">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n\n      <div class="popup-arrow-options" style="height: 200px;">\n        <koerber-select label="Arrow Placement" name="arrow-placement" value="anchor">\n          <koerber-select-option value="anchor">anchor</koerber-select-option>\n          <koerber-select-option value="start">start</koerber-select-option>\n          <koerber-select-option value="end">end</koerber-select-option>\n          <koerber-select-option value="center">center</koerber-select-option>\n        </koerber-select>\n      <div>\n\n      <div class="popup-arrow-options">\n        <koerber-toggle name="arrow" checked>Arrow</koerber-toggle>\n      </div>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-arrow"),popup=null==container?void 0:container.querySelector("koerber-popup"),arrowPlacement=null==container?void 0:container.querySelector("koerber-select"),arrow=null==container?void 0:container.querySelector("koerber-toggle");null==arrow||arrow.addEventListener("koerber-change",(()=>{if(popup){const value=arrow.checked;popup.arrow=value}})),null==arrowPlacement||arrowPlacement.addEventListener("koerber-change",(()=>{if(popup&&arrowPlacement){const value=arrowPlacement.value;popup.arrowPlacement=value}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed",arrow:!0,"arrow-placement":"anchor"}},Sync_Trigger={render:args=>{const popupHTML=`\n    <div class="popup-container popup-sync">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n\n      <div class="popup-sync-options" style="height: 200px;">\n        <koerber-select value="" label="Sync">\n          <koerber-select-option value="width">Width</koerber-select-option>\n          <koerber-select-option value="height">Height</koerber-select-option>\n          <koerber-select-option value="both">Both</koerber-select-option>\n          <koerber-select-option value="">None</koerber-select-option>\n        </koerber-select>\n      <div>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-sync"),popup=null==container?void 0:container.querySelector("koerber-popup"),sync_select=null==container?void 0:container.querySelector("koerber-select");null==sync_select||sync_select.addEventListener("koerber-change",(()=>{if(console.log(sync_select.value),popup&&sync_select){const value=sync_select.value;popup.sync=value}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed",arrow:!0,"arrow-placement":"anchor"}},Positioning={render:args=>{const popupHTML=`\n    <div class="popup-strategy">\n      <div class="overflow">\n        <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n          <span slot="anchor"></span>\n          <div class="box"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle name="strategy" checked>Fixed</koerber-toggle>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-strategy"),popup=null==container?void 0:container.querySelector("koerber-popup"),strategy=null==container?void 0:container.querySelector("koerber-toggle");null==strategy||strategy.addEventListener("koerber-change",(()=>{if(popup&&strategy){const value=strategy.checked;popup.strategy=value?"fixed":"absolute"}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",strategy:"fixed",arrow:!0,"arrow-placement":"anchor"}},Flip={render:args=>{const popupHTML=`\n    <div class="popup-flip">\n      <div class="overflow">\n        <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n          <span slot="anchor"></span>\n          <div class="box"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle name="flip" checked>Flip</koerber-toggle>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-flip"),popup=null==container?void 0:container.querySelector("koerber-popup"),flip=null==container?void 0:container.querySelector("koerber-toggle");null==flip||flip.addEventListener("koerber-change",(()=>{if(popup&&flip){const value=flip.checked;popup.flip=value}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",flip:!0,arrow:!0,"arrow-placement":"anchor"}},Flip_Fallback={render:args=>{const popupHTML=`\n    <div class="popup-flip-fallbacks">\n      <div class="overflow">\n        <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n          <span slot="anchor"></span>\n          <div class="box"></div>\n        </koerber-popup>\n      </div>\n    </div>`;return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",flip:!0,"flip-fallback-placements":"right bottom","flip-fallback-strategy":"initial",arrow:!0,"arrow-placement":"anchor"}},Shift={render:args=>{const popupHTML=`\n    <div class="popup-shift">\n      <div class="overflow">\n        <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n          <span slot="anchor"></span>\n          <div class="box"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle name="shift" checked>Shift</koerber-toggle>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-shift"),popup=null==container?void 0:container.querySelector("koerber-popup"),shift=null==container?void 0:container.querySelector("koerber-toggle");null==shift||shift.addEventListener("koerber-change",(()=>{if(popup&&shift){const value=shift.checked;popup.shift=value}}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top",fixed:!0,shift:!0,"shift-padding":10,arrow:!0,"arrow-placement":"anchor"}},Auto_Size={render:args=>{const popupHTML=`\n    <div class="popup-auto-size">\n      <div class="overflow">\n        <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})} class="color-variant-default">\n          <span slot="anchor"></span>\n          <div class="box"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle checked>Auto Size</koerber-toggle>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-auto-size"),popup=null==container?void 0:container.querySelector("koerber-popup"),autoSize=null==container?void 0:container.querySelector("koerber-toggle");null==autoSize||autoSize.addEventListener("koerber-change",(()=>{popup&&(popup.autoSize=autoSize.checked?"both":"")}))}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{"color-variant":"default",active:"true",placement:"top","auto-size":"both","auto-size-padding":10}},Virtual_Element={render:args=>{const popupHTML=`\n    <div class="popup-virtual-element">\n      <koerber-popup ${(0,_utils__WEBPACK_IMPORTED_MODULE_0__.c)({args})}>\n        <div class="circle"></div>\n      </koerber-popup>\n\n      <koerber-toggle>Highlight mouse cursor</koerber-toggle>\n    </div>`;return setTimeout((()=>{const container=document.querySelector(".popup-virtual-element"),popup=null==container?void 0:container.querySelector("koerber-popup"),enabled=null==container?void 0:container.querySelector("koerber-toggle");let clientX=0,clientY=0;if(popup){popup.anchor={getBoundingClientRect:()=>({width:0,height:0,x:clientX,y:clientY,top:clientY,left:clientX,right:clientX,bottom:clientY})},null==enabled||enabled.addEventListener("koerber-change",(()=>{popup.active=enabled.checked}));const handleMouseMove=event=>{clientX=event.clientX,clientY=event.clientY,popup.active&&popup.reposition()};document.addEventListener("mousemove",handleMouseMove)}}),0),(0,_utils__WEBPACK_IMPORTED_MODULE_0__.a)(popupHTML)},args:{placement:"right-start"}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `<koerber-popup ${attributes}></koerber-popup>`;\n    return getStoryTemplate(popupHTML);\n  },\n  args: {}\n}",...Default.parameters?.docs?.source}}},Popup_Default.parameters={...Popup_Default.parameters,docs:{...Popup_Default.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n      <koerber-popup ${attributes} class=\"popup-container color-variant-default\">\n        <span slot=\"anchor\"></span>\n        <div class=\"box\"></div>\n      </koerber-popup>\n    `;\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed'\n  },\n  argTypes: {\n    anchor: {\n      table: {\n        disable: true\n      }\n    },\n    flipBoundary: {\n      table: {\n        disable: true\n      }\n    },\n    shiftBoundary: {\n      table: {\n        disable: true\n      }\n    },\n    autoSizeBoundary: {\n      table: {\n        disable: true\n      }\n    }\n  }\n}",...Popup_Default.parameters?.docs?.source}}},Color_Variant_Default.parameters={...Color_Variant_Default.parameters,docs:{...Color_Variant_Default.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-container\">\n      <koerber-popup ${attributes} class=\"color-variant-default\">\n        <span slot=\"anchor\"></span>\n        <div class=\"box\"></div>\n      </koerber-popup>\n    </div>`;\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed'\n  }\n}",...Color_Variant_Default.parameters?.docs?.source}}},Color_Variant_Interactive.parameters={...Color_Variant_Interactive.parameters,docs:{...Color_Variant_Interactive.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n      <koerber-popup ${attributes} class="popup-container color-variant-interactive" arrow-placement="anchor" arrow="true" >\n        <span slot="anchor"></span>\n        <div class="box">\n          <koerber-card>\n            <div slot="header">Layout</div>\n            <div>Start building new pages to your project, the definition tooltip provides additional help ot defines an item or term.</div>\n            <div slot="footer">\n              <koerber-button variant="ghost" size="small">Learn more</koerber-button>\n              <koerber-button variant="primary" size="small">Next</koerber-button>\n            </div>\n          </koerber-card>\n        </div>\n      </koerber-popup>`;\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    \'color-variant\': \'interactive\',\n    active: \'true\',\n    placement: \'right\',\n    strategy: \'fixed\'\n  }\n}',...Color_Variant_Interactive.parameters?.docs?.source}}},Activating.parameters={...Activating.parameters,docs:{...Activating.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-active popup-container\">\n      <koerber-popup ${attributes} class=\"color-variant-default\" id=\"popup_activating\">\n        <span slot=\"anchor\"></span>\n        <div class=\"box\"></div>\n      </koerber-popup>\n      <koerber-toggle checked>Active</koerber-toggle>\n    </div>`;\n\n    // After the content is rendered, add the event listener to update the display element\n    setTimeout(() => {\n      const container = document.querySelector('.popup-active');\n      const popup = container?.querySelector('koerber-popup');\n      const active = container?.querySelector('koerber-toggle');\n      active?.addEventListener('koerber-change', () => {\n        if (popup) {\n          popup.active = active.checked;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed'\n  }\n}",...Activating.parameters?.docs?.source}}},Color_Variant_Unstyled.parameters={...Color_Variant_Unstyled.parameters,docs:{...Color_Variant_Unstyled.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-container\">\n      <koerber-popup ${attributes} class=\"color-variant-default\">\n        <span slot=\"anchor\"></span>\n        <div class=\"box\" style=\"background-color: var(--koerber-color-bg-fill);\"></div>\n      </koerber-popup>\n    </div>`;\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'unstyled',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed'\n  }\n}",...Color_Variant_Unstyled.parameters?.docs?.source}}},External_Anchor.parameters={...External_Anchor.parameters,docs:{...External_Anchor.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-active popup-container\">\n      <span id=\"external-anchor\"></span>\n      <koerber-popup ${attributes}>\n        <div class=\"box\"></div>\n      </koerber-popup>\n    </div>`;\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed',\n    anchor: 'external-anchor'\n  }\n}",...External_Anchor.parameters?.docs?.source}}},Placement.parameters={...Placement.parameters,docs:{...Placement.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class="popup-container popup-placement">\n      <koerber-popup ${attributes} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n\n      <div style="height: 280px;">\n        <koerber-select label="Placement" value="top">\n          <koerber-select-option value="top">top</koerber-select-option>\n          <koerber-select-option value="top-start">top-start</koerber-select-option>\n          <koerber-select-option value="top-end">top-end</koerber-select-option>\n          <koerber-select-option value="bottom">bottom</koerber-select-option>\n          <koerber-select-option value="bottom-start">bottom-start</koerber-select-option>\n          <koerber-select-option value="bottom-end">bottom-end</koerber-select-option>\n          <koerber-select-option value="right">right</koerber-select-option>\n          <koerber-select-option value="right-start">right-start</koerber-select-option>\n          <koerber-select-option value="right-end">right-end</koerber-select-option>\n          <koerber-select-option value="left">left</koerber-select-option>\n          <koerber-select-option value="left-start">left-start</koerber-select-option>\n          <koerber-select-option value="left-end">left-end</koerber-select-option>\n        </koerber-select>\n      <div>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector(\'.popup-placement\');\n      const popup = container?.querySelector(\'koerber-popup\');\n      const select = container?.querySelector(\'koerber-select\');\n      select?.addEventListener(\'koerber-change\', () => {\n        if (popup && select) {\n          const value = select.value;\n          // @ts-expect-error - placement is private\n          popup.placement = value;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    \'color-variant\': \'default\',\n    active: \'true\',\n    placement: \'top\',\n    strategy: \'fixed\',\n    distance: 0\n  }\n}',...Placement.parameters?.docs?.source}}},Distance.parameters={...Distance.parameters,docs:{...Distance.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-container popup-distance\">\n      <koerber-popup ${attributes} class=\"color-variant-default\">\n        <span slot=\"anchor\"></span>\n        <div class=\"box\"></div>\n      </koerber-popup>\n      <koerber-input type=\"number\" name=\"distance\" label=\"Distance\" value=\"0\"></koerber-input>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector('.popup-distance');\n      const popup = container?.querySelector('koerber-popup');\n      const distance = container?.querySelector('koerber-input');\n      distance?.addEventListener('koerber-change', () => {\n        if (popup && distance) {\n          const value = distance.value;\n          // @ts-expect-error - placement is private\n          popup.distance = value;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed',\n    distance: '0'\n  }\n}",...Distance.parameters?.docs?.source}}},Skidding_Variant.parameters={...Skidding_Variant.parameters,docs:{...Skidding_Variant.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-container popup-skidding\">\n      <koerber-popup ${attributes} class=\"color-variant-default\">\n        <span slot=\"anchor\"></span>\n        <div class=\"box\"></div>\n      </koerber-popup>\n      <koerber-input type=\"number\" name=\"skidding\" label=\"Skidding\" value=\"0\"></koerber-input>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector('.popup-skidding');\n      const popup = container?.querySelector('koerber-popup');\n      const distance = container?.querySelector('koerber-input');\n      distance?.addEventListener('koerber-change', () => {\n        if (popup && distance) {\n          const value = distance.value;\n          // @ts-expect-error - placement is private\n          popup.skidding = value;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed',\n    skidding: '0'\n  }\n}",...Skidding_Variant.parameters?.docs?.source}}},Arrow_Placement.parameters={...Arrow_Placement.parameters,docs:{...Arrow_Placement.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class="popup-container popup-arrow">\n      <koerber-popup ${attributes} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n\n      <div class="popup-arrow-options" style="height: 200px;">\n        <koerber-select label="Arrow Placement" name="arrow-placement" value="anchor">\n          <koerber-select-option value="anchor">anchor</koerber-select-option>\n          <koerber-select-option value="start">start</koerber-select-option>\n          <koerber-select-option value="end">end</koerber-select-option>\n          <koerber-select-option value="center">center</koerber-select-option>\n        </koerber-select>\n      <div>\n\n      <div class="popup-arrow-options">\n        <koerber-toggle name="arrow" checked>Arrow</koerber-toggle>\n      </div>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector(\'.popup-arrow\');\n      const popup = container?.querySelector(\'koerber-popup\');\n      const arrowPlacement = container?.querySelector(\'koerber-select\');\n      const arrow = container?.querySelector(\'koerber-toggle\');\n      arrow?.addEventListener(\'koerber-change\', () => {\n        if (popup) {\n          const value = arrow.checked;\n          popup.arrow = value;\n        }\n      });\n      arrowPlacement?.addEventListener(\'koerber-change\', () => {\n        if (popup && arrowPlacement) {\n          const value = arrowPlacement.value;\n          // @ts-expect-error - placement is private\n          popup.arrowPlacement = value;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    \'color-variant\': \'default\',\n    active: \'true\',\n    placement: \'top\',\n    strategy: \'fixed\',\n    arrow: true,\n    \'arrow-placement\': \'anchor\'\n  }\n}',...Arrow_Placement.parameters?.docs?.source}}},Sync_Trigger.parameters={...Sync_Trigger.parameters,docs:{...Sync_Trigger.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class="popup-container popup-sync">\n      <koerber-popup ${attributes} class="color-variant-default">\n        <span slot="anchor"></span>\n        <div class="box"></div>\n      </koerber-popup>\n\n      <div class="popup-sync-options" style="height: 200px;">\n        <koerber-select value="" label="Sync">\n          <koerber-select-option value="width">Width</koerber-select-option>\n          <koerber-select-option value="height">Height</koerber-select-option>\n          <koerber-select-option value="both">Both</koerber-select-option>\n          <koerber-select-option value="">None</koerber-select-option>\n        </koerber-select>\n      <div>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector(\'.popup-sync\');\n      const popup = container?.querySelector(\'koerber-popup\');\n      const sync_select = container?.querySelector(\'koerber-select\');\n      sync_select?.addEventListener(\'koerber-change\', () => {\n        console.log(sync_select.value);\n        if (popup && sync_select) {\n          const value = sync_select.value;\n          // @ts-expect-error - placement is private\n          popup.sync = value;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    \'color-variant\': \'default\',\n    active: \'true\',\n    placement: \'top\',\n    strategy: \'fixed\',\n    arrow: true,\n    \'arrow-placement\': \'anchor\'\n  }\n}',...Sync_Trigger.parameters?.docs?.source}}},Positioning.parameters={...Positioning.parameters,docs:{...Positioning.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-strategy\">\n      <div class=\"overflow\">\n        <koerber-popup ${attributes} class=\"color-variant-default\">\n          <span slot=\"anchor\"></span>\n          <div class=\"box\"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle name=\"strategy\" checked>Fixed</koerber-toggle>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector('.popup-strategy');\n      const popup = container?.querySelector('koerber-popup');\n      const strategy = container?.querySelector('koerber-toggle');\n      strategy?.addEventListener('koerber-change', () => {\n        if (popup && strategy) {\n          const value = strategy.checked;\n          popup.strategy = value ? 'fixed' : 'absolute';\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    strategy: 'fixed',\n    arrow: true,\n    'arrow-placement': 'anchor'\n  }\n}",...Positioning.parameters?.docs?.source}}},Flip.parameters={...Flip.parameters,docs:{...Flip.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-flip\">\n      <div class=\"overflow\">\n        <koerber-popup ${attributes} class=\"color-variant-default\">\n          <span slot=\"anchor\"></span>\n          <div class=\"box\"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle name=\"flip\" checked>Flip</koerber-toggle>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector('.popup-flip');\n      const popup = container?.querySelector('koerber-popup');\n      const flip = container?.querySelector('koerber-toggle');\n      flip?.addEventListener('koerber-change', () => {\n        if (popup && flip) {\n          const value = flip.checked;\n          popup.flip = value;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    flip: true,\n    arrow: true,\n    'arrow-placement': 'anchor'\n  }\n}",...Flip.parameters?.docs?.source}}},Flip_Fallback.parameters={...Flip_Fallback.parameters,docs:{...Flip_Fallback.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-flip-fallbacks\">\n      <div class=\"overflow\">\n        <koerber-popup ${attributes} class=\"color-variant-default\">\n          <span slot=\"anchor\"></span>\n          <div class=\"box\"></div>\n        </koerber-popup>\n      </div>\n    </div>`;\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    flip: true,\n    'flip-fallback-placements': 'right bottom',\n    'flip-fallback-strategy': 'initial',\n    arrow: true,\n    'arrow-placement': 'anchor'\n  }\n}",...Flip_Fallback.parameters?.docs?.source}}},Shift.parameters={...Shift.parameters,docs:{...Shift.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-shift\">\n      <div class=\"overflow\">\n        <koerber-popup ${attributes} class=\"color-variant-default\">\n          <span slot=\"anchor\"></span>\n          <div class=\"box\"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle name=\"shift\" checked>Shift</koerber-toggle>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector('.popup-shift');\n      const popup = container?.querySelector('koerber-popup');\n      const shift = container?.querySelector('koerber-toggle');\n      shift?.addEventListener('koerber-change', () => {\n        if (popup && shift) {\n          const value = shift.checked;\n          popup.shift = value;\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    fixed: true,\n    shift: true,\n    'shift-padding': 10,\n    arrow: true,\n    'arrow-placement': 'anchor'\n  }\n}",...Shift.parameters?.docs?.source}}},Auto_Size.parameters={...Auto_Size.parameters,docs:{...Auto_Size.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-auto-size\">\n      <div class=\"overflow\">\n        <koerber-popup ${attributes} class=\"color-variant-default\">\n          <span slot=\"anchor\"></span>\n          <div class=\"box\"></div>\n        </koerber-popup>\n      </div>\n\n      <koerber-toggle checked>Auto Size</koerber-toggle>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector('.popup-auto-size');\n      const popup = container?.querySelector('koerber-popup');\n      const autoSize = container?.querySelector('koerber-toggle');\n      autoSize?.addEventListener('koerber-change', () => {\n        if (popup) {\n          // @ts-expect-error - autosize is private\n          popup.autoSize = autoSize.checked ? 'both' : '';\n        }\n      });\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    'color-variant': 'default',\n    active: 'true',\n    placement: 'top',\n    'auto-size': 'both',\n    'auto-size-padding': 10\n  }\n}",...Auto_Size.parameters?.docs?.source}}},Virtual_Element.parameters={...Virtual_Element.parameters,docs:{...Virtual_Element.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const attributes = generateAttributes({\n      args\n    });\n    const popupHTML = `\n    <div class=\"popup-virtual-element\">\n      <koerber-popup ${attributes}>\n        <div class=\"circle\"></div>\n      </koerber-popup>\n\n      <koerber-toggle>Highlight mouse cursor</koerber-toggle>\n    </div>`;\n    setTimeout(() => {\n      const container = document.querySelector('.popup-virtual-element');\n      const popup = container?.querySelector('koerber-popup');\n      const enabled = container?.querySelector('koerber-toggle');\n      let clientX = 0;\n      let clientY = 0;\n\n      // Set the virtual element as a property\n      if (popup) {\n        popup.anchor = {\n          getBoundingClientRect(): DOMRect {\n            // @ts-expect-error - DOMRect inconclusive type\n            return {\n              width: 0,\n              height: 0,\n              x: clientX,\n              y: clientY,\n              top: clientY,\n              left: clientX,\n              right: clientX,\n              bottom: clientY\n            };\n          }\n        };\n\n        // Only activate the popup when the switch is checked\n        enabled?.addEventListener('koerber-change', () => {\n          popup.active = enabled.checked;\n        });\n\n        // Update the virtual element as the mouse moves\n        const handleMouseMove = (event: MouseEvent) => {\n          clientX = event.clientX;\n          clientY = event.clientY;\n\n          // Reposition the popup when the virtual anchor moves\n          if (popup.active) {\n            popup.reposition();\n          }\n        };\n        document.addEventListener('mousemove', handleMouseMove);\n      }\n    }, 0);\n    return getStoryTemplate(popupHTML);\n  },\n  args: {\n    placement: 'right-start'\n  }\n}",...Virtual_Element.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Popup_Default","Color_Variant_Default","Color_Variant_Interactive","Activating","Color_Variant_Unstyled","External_Anchor","Placement","Distance","Skidding_Variant","Arrow_Placement","Sync_Trigger","Positioning","Flip","Flip_Fallback","Shift","Auto_Size","Virtual_Element"]}}]);