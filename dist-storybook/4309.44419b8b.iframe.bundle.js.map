{"version":3,"file":"4309.44419b8b.iframe.bundle.js","mappings":";AA2HA;AAGA;AACA;AAGA;AAKA;;;AAGA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AAKA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA","sources":["webpack://@koerber/uikit/./src/components/button/button.component.ts","webpack://@koerber/uikit/./src/components/icon/icon.component.ts","webpack://@koerber/uikit/./src/components/spinner/spinner.component.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { classMap } from 'lit/directives/class-map.js';\nimport { HasSlotController } from '../../internal/slot';\nimport { html } from 'lit/static-html.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { LocalizeController } from '../../utilities/localize';\nimport { property, query, state } from 'lit/decorators.js';\nimport componentStyles from '../../styles/component.styles';\nimport Icon from '../icon/icon.component';\nimport Spinner from '../spinner/spinner.component';\nimport styles from './button.styles';\nimport UIKitElement from '../../internal/uikit-element';\n/**\n * @summary Buttons represent actions that are available to the user.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-button--docs\n * @status stable\n * @since 2.0\n *\n * @dependency koerber-icon\n * @dependency koerber-spinner\n *\n * @event koerber-blur - Emitted when the button loses focus.\n * @event koerber-focus - Emitted when the button gains focus.\n *\n * @slot - The button's label.\n * @slot prefix - A presentational prefix icon or similar element.\n * @slot suffix - A presentational suffix icon or similar element.\n *\n * @csspart base - The component's base wrapper.\n * @csspart prefix - The container that wraps the prefix.\n * @csspart label - The button's label.\n * @csspart suffix - The container that wraps the suffix.\n * @csspart caret - The button's caret icon, an `<koerber-icon>` element.\n */\nclass Button extends UIKitElement {\n    constructor() {\n        super(...arguments);\n        this.hasSlotController = new HasSlotController(this, '[default]', 'prefix', 'suffix');\n        this.localize = new LocalizeController(this);\n        /**\n         * The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native\n         * `<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.\n         */\n        this.type = 'button';\n        this.hasFocus = false;\n        this.title = ''; // make reactive to pass through\n        /** The button's theme variant. */\n        this.variant = 'primary';\n        /** The button's size. */\n        this.size = 'medium';\n        /** Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior. */\n        this.caret = false;\n        /** Disables the button. */\n        this.disabled = false;\n        /** Draws the button in a loading state. */\n        this.loading = false;\n        /**\n         * The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\n         * This attribute is ignored when `href` is present.\n         */\n        this.name = '';\n        /**\n         * The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\n         * button is the submitter. This attribute is ignored when `href` is present.\n         */\n        this.value = '';\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.handleHostClick = this.handleHostClick.bind(this);\n        this.addEventListener('click', this.handleHostClick);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener('click', this.handleHostClick);\n    }\n    handleBlur() {\n        this.hasFocus = false;\n        this.emit('koerber-blur');\n    }\n    handleFocus() {\n        this.hasFocus = true;\n        this.emit('koerber-focus');\n    }\n    handleClick() {\n        setTimeout(() => {\n            this.hasFocus = false;\n            this.emit('koerber-focus');\n        }, 100);\n    }\n    handleHostClick(event) {\n        // Prevent the click event from being emitted when the button is disabled or loading\n        if (this.disabled || this.loading) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n    /** Simulates a click on the button. */\n    click() {\n        this.button.click();\n    }\n    /** Sets focus on the button. */\n    focus(options) {\n        this.button.focus(options);\n    }\n    /** Removes focus from the button. */\n    blur() {\n        this.button.blur();\n    }\n    render() {\n        /* eslint-disable lit/no-invalid-html */\n        /* eslint-disable lit/binding-positions */\n        let buttonContent;\n        if (this.loading) {\n            buttonContent = html `<koerber-spinner></koerber-spinner>`;\n        }\n        else {\n            buttonContent = html `\r\n        ${this.hasSlotController.test('prefix')\n                ? html `<slot part=\"prefix\" name=\"prefix\" class=\"button__prefix\"></slot>`\n                : ''}\r\n        ${this.hasSlotController.test('[default]') ? html `<slot part=\"label\" class=\"button__label\"></slot>` : ''}\r\n        ${this.caret\n                ? html `<koerber-icon size=${this.size} part=\"caret\" class=\"button__caret\" name=\"chevron-down\"></koerber-icon>`\n                : ''}\r\n        ${this.hasSlotController.test('suffix')\n                ? html `<slot part=\"suffix\" name=\"suffix\" class=\"button__suffix\"></slot>`\n                : ''}\r\n      `;\n        }\n        return html `\r\n      <button\r\n        part=\"base\"\r\n        class=${classMap({\n            button: true,\n            'button--primary': this.variant === 'primary',\n            'button--secondary': this.variant === 'secondary',\n            'button--tertiary': this.variant === 'tertiary',\n            'button--ghost': this.variant === 'ghost',\n            'button--danger': this.variant === 'danger',\n            'button--secondary-danger': this.variant === 'secondary-danger',\n            'button--ghost-danger': this.variant === 'ghost-danger',\n            'button--small': this.size === 'small',\n            'button--medium': this.size === 'medium',\n            'button--large': this.size === 'large',\n            'button--caret': this.caret,\n            'button--disabled': this.disabled,\n            'button--focused': this.hasFocus,\n            'button--loading': this.loading,\n            'button--standard': this.variant !== 'secondary',\n            'button--rtl': this.localize.dir() === 'rtl',\n            'button--has-label': this.hasSlotController.test('[default]'),\n            'button--has-prefix': this.hasSlotController.test('prefix'),\n            'button--has-suffix': this.hasSlotController.test('suffix')\n        })}\r\n        ?disabled=${this.disabled}\r\n        type=${ifDefined(this.type)}\r\n        title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}\r\n        name=${ifDefined(this.name)}\r\n        value=${ifDefined(this.value)}\r\n        role=${ifDefined('button')}\r\n        aria-disabled=${this.disabled ? 'true' : 'false'}\r\n        tabindex=${this.disabled ? '-1' : '0'}\r\n        @blur=${this.handleBlur}\r\n        @focus=${this.handleFocus}\r\n        @click=${this.handleClick}\r\n        aria-label=${this.name}\r\n      >\r\n        <slot name=\"badge\" part=\"badge\"></slot>\r\n        ${buttonContent}\r\n      </button>\r\n    `;\n    }\n}\nButton.styles = [componentStyles, styles];\nButton.dependencies = { 'koerber-icon': Icon, 'koerber-spinner': Spinner };\nexport default Button;\n__decorate([\n    query('.button')\n], Button.prototype, \"button\", void 0);\n__decorate([\n    state()\n], Button.prototype, \"hasFocus\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"title\", void 0);\n__decorate([\n    property({ reflect: true })\n], Button.prototype, \"variant\", void 0);\n__decorate([\n    property({ reflect: true })\n], Button.prototype, \"size\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"caret\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"loading\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"name\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"value\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js';\nimport { getIconLibrary, unwatchIcon, watchIcon } from './library';\nimport { requestIcon } from './request';\nimport { watch } from '../../internal/watch';\nimport componentStyles from '../../styles/component.styles';\nimport styles from './icon.styles';\nimport UIKitElement from '../../internal/uikit-element';\nimport { classMap } from 'lit/directives/class-map.js';\nlet parser;\n/**\n * @summary Icons are symbols that can be used to represent various options within an application.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net/?path=/docs/components-icon--docs\n * @status stable\n * @since 1.0\n *\n * @event koerber-load - Emitted when the icon has loaded.\n * @event koerber-error - Emitted when the icon fails to load due to an error.\n *\n * @csspart svg - The internal SVG element.\n */\nclass Icon extends UIKitElement {\n    constructor() {\n        super(...arguments);\n        this.svg = '';\n        /** The name of a registered custom icon library. */\n        this.library = 'default';\n        /** The icon's size. */\n        this.size = 'medium';\n        /** The title (tooltip) of the attribute */\n        this.title = '';\n        /**\n         * An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\n         * ignored by assistive devices.\n         */\n        this.label = '';\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        watchIcon(this);\n    }\n    firstUpdated() {\n        this.setIcon();\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        unwatchIcon(this);\n    }\n    getUrl() {\n        const library = getIconLibrary(this.library);\n        if (this.name && library) {\n            return library.resolver(this.name);\n        }\n        return '';\n    }\n    handleLabelChange() {\n        const hasLabel = typeof this.label === 'string' && this.label.length > 0;\n        if (hasLabel) {\n            this.setAttribute('role', 'img');\n            this.setAttribute('aria-label', this.label);\n            this.removeAttribute('aria-hidden');\n        }\n        else {\n            this.removeAttribute('role');\n            this.removeAttribute('aria-label');\n            this.setAttribute('aria-hidden', 'true');\n        }\n    }\n    async setIcon() {\n        var _a;\n        const library = getIconLibrary(this.library);\n        const url = this.getUrl();\n        // Create an instance of the DOM parser. We do it here instead of top-level to support SSR while maintaining a\n        // single parser instance for optimal performance.\n        if (!parser) {\n            parser = new DOMParser();\n        }\n        if (url) {\n            try {\n                const file = await requestIcon(url);\n                if (url !== this.getUrl()) {\n                    // If the url has changed while fetching the icon, ignore this request\n                }\n                else if (file.ok) {\n                    const doc = parser.parseFromString(file.svg, 'text/html');\n                    const svgEl = doc.body.querySelector('svg');\n                    svgEl === null || svgEl === void 0 ? void 0 : svgEl.setAttribute('fill', 'currentColor');\n                    if (svgEl !== null) {\n                        svgEl.part.add('svg');\n                        (_a = library === null || library === void 0 ? void 0 : library.mutator) === null || _a === void 0 ? void 0 : _a.call(library, svgEl);\n                        this.svg = svgEl.outerHTML;\n                        this.emit('koerber-load');\n                    }\n                    else {\n                        this.svg = '';\n                        this.emit('koerber-error');\n                    }\n                }\n                else {\n                    this.svg = '';\n                    this.emit('koerber-error');\n                }\n            }\n            catch (_b) {\n                this.emit('koerber-error');\n            }\n        }\n        else if (this.svg.length > 0) {\n            // If we can't resolve a URL and an icon was previously set, remove it\n            this.svg = '';\n        }\n    }\n    render() {\n        return html `\n      <div\n        class=${classMap({\n            icon: true,\n            'icon--medium': this.size === 'medium',\n            'icon--large': this.size === 'large'\n        })}\n        title=${this.title}\n      >\n        ${unsafeSVG(this.svg)}\n      </div>\n    `;\n    }\n}\nIcon.styles = [componentStyles, styles];\nexport default Icon;\n__decorate([\n    state()\n], Icon.prototype, \"svg\", void 0);\n__decorate([\n    state()\n], Icon.prototype, \"library\", void 0);\n__decorate([\n    property({ reflect: true })\n], Icon.prototype, \"name\", void 0);\n__decorate([\n    property({ reflect: true })\n], Icon.prototype, \"size\", void 0);\n__decorate([\n    property()\n], Icon.prototype, \"title\", void 0);\n__decorate([\n    property()\n], Icon.prototype, \"label\", void 0);\n__decorate([\n    watch('label')\n], Icon.prototype, \"handleLabelChange\", null);\n__decorate([\n    watch(['name', 'library'])\n], Icon.prototype, \"setIcon\", null);\n","import { html } from 'lit';\nimport componentStyles from '../../styles/component.styles';\nimport styles from './spinner.styles';\nimport UIKitElement from '../../internal/uikit-element';\n/**\n * @summary Spinners are used to show the progress of an indeterminate operation.\n * @documentation https://kind-desert-0fb80550f.5.azurestaticapps.net\n * @status stable\n * @since 2.0\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --track-width - The width of the track.\n * @cssproperty --track-color - The color of the track.\n * @cssproperty --indicator-color - The color of the spinner's indicator.\n * @cssproperty --speed - The time it takes for the spinner to complete one animation cycle.\n */\nclass Spinner extends UIKitElement {\n    // private readonly localize = new LocalizeController(this);\n    render() {\n        return html `\n      <svg part=\"base\" class=\"spinner\" role=\"progressbar\" aria-valuetext=\"loading\">\n        <circle class=\"spinner__track\"></circle>\n        <circle class=\"spinner__indicator\"></circle>\n      </svg>\n    `;\n    }\n}\nSpinner.styles = [componentStyles, styles];\nexport default Spinner;\n"],"names":[],"sourceRoot":""}